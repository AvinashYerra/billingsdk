This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.github/
  ISSUE_TEMPLATE/
    bug_report.md
    feature_request.md
  workflows/
    ci.yml
  pull_request_template.md
  SECURITY.md
content/
  docs/
    components/
      banner/
        index.mdx
      cancel-subscription/
        cancel-subscription-card.mdx
        cancel-subscription-dialog.mdx
      manage-subscription/
        index.mdx
      payment-method-manager/
        index.mdx
      pricing-table/
        pricing-table-one.mdx
        pricing-table-three.mdx
        pricing-table-two.mdx
      update-plan/
        update-plan-card.mdx
        update-plan-dialog.mdx
      usage-meter/
        usage-meter-circle.mdx
        usage-meter-linear.mdx
      index.mdx
    contribution-open-source.mdx
    index.mdx
    interfaces.mdx
    meta.json
    quick-start.mdx
    theming.mdx
public/
  logo/
    logo-dodo.svg
    Logo.svg
  r/
    all.json
    banner.json
    cancel-subscription-card.json
    cancel-subscription-dialog.json
    hello-world.json
    index.json
    payment-method-manager.json
    pricing-table-one.json
    pricing-table-three.json
    pricing-table-two.json
    subscription-management.json
    update-plan-card.json
    update-plan-dialog.json
    usage-meter-circle.json
    usage-meter-linear.json
src/
  app/
    (home)/
      layout.tsx
      page.tsx
    api/
      chat/
        route.ts
      search/
        route.ts
    docs/
      [[...slug]]/
        page.tsx
      layout.tsx
    llms-full.txt/
      route.ts
    llms.mdx/
      [[...slug]]/
        route.ts
    global.css
    layout.config.tsx
    layout.tsx
  components/
    billingsdk/
      banner.tsx
      cancel-subscription-card.tsx
      cancel-subscription-dialog.tsx
      pricing-table-one.tsx
      pricing-table-three.tsx
      pricing-table-two.tsx
      subscription-management.tsx
      update-plan-card.tsx
      update-plan-dialog.tsx
      usage-meter.tsx
    landing/
      code-section.tsx
      components.tsx
      Features.tsx
      footer.tsx
      footer2.tsx
      Hero-old.tsx
      hero.css
      Hero.tsx
      Icons.tsx
      NavBar.tsx
      opensource.tsx
    preview/
      preview-components.tsx
    ui/
      badge.tsx
      button.tsx
      card.tsx
      cover.tsx
      dialog.tsx
      form.tsx
      input.tsx
      label.tsx
      radio-group.tsx
      select.tsx
      separator.tsx
      sparkles.tsx
      switch.tsx
      table.tsx
      tabs.tsx
      toggle.tsx
      tooltip.tsx
    banner-demo-three.tsx
    banner-demo-two.tsx
    banner-demo.tsx
    banner-gradient-demo.tsx
    cancel-subscription-card-demo.tsx
    cancel-subscription-dialog-demo.tsx
    code.tsx
    index.tsx
    markdown.tsx
    page-actions.tsx
    pricing-table-one-demo.tsx
    pricing-table-one-minimal-demo.tsx
    pricing-table-three-demo.tsx
    pricing-table-two-demo.tsx
    pricing-table-two-minimal-demo.tsx
    search.tsx
    subscription-management-demo.tsx
    update-plan-card-demo.tsx
    update-plan-dialog-demo.tsx
    usage-meter-circle-demo.tsx
    usage-meter-linear-demo.tsx
  contexts/
    theme-context.tsx
  lib/
    billingsdk-config.ts
    get-llm-text.ts
    inkeep-qa-schema.ts
    source.ts
    themes.ts
    utils.ts
  registry/
    billingsdk/
      demo/
        banner-demo.tsx
        cancel-subscription-card-demo.tsx
        cancel-subscription-dialog-demo.tsx
        payment-method-manager-demo.tsx
        pricing-table-one-demo.tsx
        pricing-table-three-demo.tsx
        pricing-table-two-demo.tsx
        subscription-management-demo.tsx
        update-plan-card-demo.tsx
        update-plan-dialog-demo.tsx
        usage-meter-circle-demo.tsx
        usage-meter-linear-demo.tsx
      banner.tsx
      cancel-subscription-card.tsx
      cancel-subscription-dialog.tsx
      hello-world.tsx
      payment-method-manager.tsx
      pricing-table-one.tsx
      pricing-table-three.tsx
      pricing-table-two.tsx
      subscription-management.tsx
      update-plan-card.tsx
      update-plan-dialog.tsx
      usage-meter.tsx
    lib/
      billingsdk-config.ts
  mdx-components.tsx
.gitignore
cli.json
components.json
CONTRIBUTING.md
eslint.config.cjs
LICENSE
next.config.mjs
package.json
postcss.config.mjs
README.md
registry.json
source.config.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/r/hello-world.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hello-world",
  "type": "registry:block",
  "title": "Hello World Component",
  "description": "A simple hello world component",
  "files": [
    {
      "path": "src/registry/billingsdk/hello-world.tsx",
      "content": "export default function HelloWorld() {\n    return (\n        <div className=\"flex flex-col\">\n            <h1 className=\"text-2xl font-bold dark:text-white\">Hello World</h1>\n            <p className=\"text-sm text-gray-500 dark:text-gray-400\">This is a test</p>\n        </div>\n    )\n}",
      "type": "registry:component",
      "target": "components/billingsdk/hello-world.tsx"
    }
  ]
}
</file>

<file path="src/app/api/chat/route.ts">
import { ProvideLinksToolSchema } from '../../../lib/inkeep-qa-schema';
import { createOpenAICompatible } from '@ai-sdk/openai-compatible';
import { convertToModelMessages, streamText } from 'ai';

export const runtime = 'edge';

const openai = createOpenAICompatible({
  name: 'inkeep',
  apiKey: process.env.INKEEP_API_KEY,
  baseURL: 'https://api.inkeep.com/v1',
});

export async function POST(req: Request) {
  const reqJson = await req.json();

  const result = streamText({
    model: openai('inkeep-qa-sonnet-4'),
    tools: {
      provideLinks: {
        inputSchema: ProvideLinksToolSchema,
      },
    },
    messages: convertToModelMessages(reqJson.messages, {
      ignoreIncompleteToolCalls: true,
    }),
    toolChoice: 'auto',
  });

  return result.toUIMessageStreamResponse();
}
</file>

<file path="src/app/api/search/route.ts">
import { source } from '@/lib/source';
import { createFromSource } from 'fumadocs-core/search/server';

export const { GET } = createFromSource(source, {
  // https://docs.orama.com/open-source/supported-languages
  language: 'english',
});
</file>

<file path="src/app/llms.mdx/[[...slug]]/route.ts">
import { type NextRequest, NextResponse } from 'next/server';
import { getLLMText } from '@/lib/get-llm-text';
import { source } from '@/lib/source';
import { notFound } from 'next/navigation';

export const revalidate = false;

export async function GET(
  _req: NextRequest,
  { params }: { params: Promise<{ slug?: string[] }> },
) {
  const { slug } = await params;
  const page = source.getPage(slug);
  if (!page) notFound();

  return new NextResponse(await getLLMText(page));
}

export function generateStaticParams() {
  return source.generateParams();
}
</file>

<file path="src/components/ui/badge.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}
</file>

<file path="src/components/ui/dialog.tsx">
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content> & {
  showCloseButton?: boolean
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}
</file>

<file path="src/components/ui/form.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState } = useFormContext()
  const formState = useFormState({ name: fieldContext.name })
  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("grid gap-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  )
}

function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField()

  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
}

function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
}

function FormDescription({ className, ...props }: React.ComponentProps<"p">) {
  const { formDescriptionId } = useFormField()

  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function FormMessage({ className, ...props }: React.ComponentProps<"p">) {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : props.children

  if (!body) {
    return null
  }

  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive text-sm", className)}
      {...props}
    >
      {body}
    </p>
  )
}

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }
</file>

<file path="src/components/ui/label.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }
</file>

<file path="src/components/ui/radio-group.tsx">
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function RadioGroup({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {
  return (
    <RadioGroupPrimitive.Root
      data-slot="radio-group"
      className={cn("grid gap-3", className)}
      {...props}
    />
  )
}

function RadioGroupItem({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {
  return (
    <RadioGroupPrimitive.Item
      data-slot="radio-group-item"
      className={cn(
        "border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator
        data-slot="radio-group-indicator"
        className="relative flex items-center justify-center"
      >
        <CircleIcon className="fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
}

export { RadioGroup, RadioGroupItem }
</file>

<file path="src/components/ui/select.tsx">
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}
</file>

<file path="src/components/ui/separator.tsx">
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }
</file>

<file path="src/components/ui/switch.tsx">
"use client"

import * as React from "react"
import * as SwitchPrimitive from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0"
        )}
      />
    </SwitchPrimitive.Root>
  )
}

export { Switch }
</file>

<file path="src/components/ui/table.tsx">
"use client"

import * as React from "react"

import { cn } from "@/lib/utils"

function Table({ className, ...props }: React.ComponentProps<"table">) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props}
      />
    </div>
  )
}

function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props}
    />
  )
}

function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props}
    />
  )
}

function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
        className
      )}
      {...props}
    />
  )
}

function TableRow({ className, ...props }: React.ComponentProps<"tr">) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className
      )}
      {...props}
    />
  )
}

function TableHead({ className, ...props }: React.ComponentProps<"th">) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCell({ className, ...props }: React.ComponentProps<"td">) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCaption({
  className,
  ...props
}: React.ComponentProps<"caption">) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props}
    />
  )
}

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="src/components/ui/toggle.tsx">
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-2 min-w-9",
        sm: "h-8 px-1.5 min-w-8",
        lg: "h-10 px-2.5 min-w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Toggle({
  className,
  variant,
  size,
  ...props
}: React.ComponentProps<typeof TogglePrimitive.Root> &
  VariantProps<typeof toggleVariants>) {
  return (
    <TogglePrimitive.Root
      data-slot="toggle"
      className={cn(toggleVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Toggle, toggleVariants }
</file>

<file path="src/components/banner-demo-three.tsx">
"use client"

import { Banner } from "@/components/billingsdk/banner"
import { useState } from "react"
import { Button } from "./ui/button"

export default function FreeTrialBannerDemoThree() {
    const [showBanner, setShowBanner] = useState(false)
    return (
        <div className="w-full h-full flex flex-col gap-4 min-h-[500px] justify-center items-center border rounded-lg">
            {showBanner && (
                <Banner
                    title="🎉 Start your free trial today!"
                    description="Get 30 days free access to all premium features"
                    variant="popup" // default, minimal, popup
                />
            )}
            <div className="w-full h-full justify-center items-center flex flex-row gap-4">
                <Button onClick={() => setShowBanner(true)}>Show Banner</Button>
            </div>
        </div>

    )
}
</file>

<file path="src/components/banner-demo-two.tsx">
import { Banner } from "@/components/billingsdk/banner"

export default function FreeTrialBannerDemo() {
    return (
        <div className="w-full h-full flex flex-col gap-6 min-h-[500px] border rounded-lg overflow-hidden bg-background-secondary border-2">
            <Banner
                title="🎉 Explore your next destination today!"
                description="Discover the best places to visit in the world"
                variant="minimal" // default, minimal, popup
            />

            {/* minimal hero example */}
            <section className="flex flex-col items-center justify-center text-center gap-4 py-16">
                <h1 className="text-3xl font-bold tracking-tight text-foreground-secondary">
                    Discover the best places to visit in the world
                </h1>
                <div className="flex flex-col gap-2">

                    <p className="text-muted-foreground max-w-md">
                        Explore the best places to visit in the world
                    </p>
                    <a
                        className="underline underline-offset-4 hover:text-primary transition"
                    >
                        Get Started →
                    </a>
                </div>
            </section>
        </div>
    )
}
</file>

<file path="src/components/index.tsx">
'use client';
import { type ButtonHTMLAttributes, useState } from 'react';
import dynamic from 'next/dynamic';

// lazy load the dialog
const SearchAI = dynamic(() => import('./search'), { ssr: false });

/**
 * The trigger component for AI search dialog.
 *
 * Use it like a normal button component.
 */
export function AISearchTrigger(
  props: ButtonHTMLAttributes<HTMLButtonElement>,
) {
  const [open, setOpen] = useState<boolean>();

  return (
    <>
      {open !== undefined ? (
        <SearchAI open={open} onOpenChange={setOpen} />
      ) : null}
      <button {...props} onClick={() => setOpen(true)} />
    </>
  );
}
</file>

<file path="src/components/markdown.tsx">
import { remark } from 'remark';
import remarkGfm from 'remark-gfm';
import remarkRehype from 'remark-rehype';
import { toJsxRuntime } from 'hast-util-to-jsx-runtime';
import {
  Children,
  type ComponentProps,
  type ReactElement,
  type ReactNode,
  Suspense,
  use,
  useDeferredValue,
} from 'react';
import { Fragment, jsx, jsxs } from 'react/jsx-runtime';
import { DynamicCodeBlock } from 'fumadocs-ui/components/dynamic-codeblock';
import defaultMdxComponents from 'fumadocs-ui/mdx';

export interface Processor {
  process: (content: string) => Promise<ReactNode>;
}

function createProcessor(): Processor {
  const processor = remark().use(remarkGfm).use(remarkRehype);

  return {
    async process(content) {
      const nodes = processor.parse({ value: content });
      const hast = await processor.run(nodes);

      return toJsxRuntime(hast, {
        development: false,
        jsx,
        jsxs,
        Fragment,
        components: {
          ...defaultMdxComponents,
          pre: Pre,
          img: undefined, // use JSX
        },
      });
    },
  };
}

function Pre(props: ComponentProps<'pre'>) {
  const code = Children.only(props.children) as ReactElement;
  const codeProps = code.props as ComponentProps<'code'>;

  let lang =
    codeProps.className
      ?.split(' ')
      .find((v) => v.startsWith('language-'))
      ?.slice('language-'.length) ?? 'text';

  if (lang === 'mdx') lang = 'md';

  return (
    <DynamicCodeBlock lang={lang} code={(codeProps.children ?? '') as string} />
  );
}

const processor = createProcessor();

export function Markdown({ text }: { text: string }) {
  const deferredText = useDeferredValue(text);

  return (
    <Suspense fallback={text}>
      <Renderer text={deferredText} />
    </Suspense>
  );
}

const cache = new Map<string, Promise<ReactNode>>();

function Renderer({ text }: { text: string }) {
  const result = cache.get(text) ?? processor.process(text);
  cache.set(text, result);

  return use(result);
}
</file>

<file path="src/components/usage-meter-linear-demo.tsx">
'use client'

import { UsageMeter } from "@/components/billingsdk/usage-meter";

export default function UsageMeterLinearDemo() {

  return (
    <div className="flex flex-col gap-4 mx-auto w-full">
      <UsageMeter
        usage={[{
          name: "Claude Sonnet 4",
          usage: 75,
          limit: 100
        }, {
          name: "ChatGPT 5",
          usage: 12,
          limit: 100
        }, {
          name: "Grok 3",
          usage: 57,
          limit: 100
        }, {
          name: "Gemini 2.5",
          usage: 95,
          limit: 100
        }]}
        title="LLM Usage"
        description="Your usage of the LLM models"
        variant="linear"
        size="md"
        className="mx-auto" />
    </div>

  );
}
</file>

<file path="src/contexts/theme-context.tsx">
"use client"

import React, { createContext, useContext, useState, useEffect } from 'react';
import { themes, Theme } from '@/lib/themes';

interface ThemeContextType {
  currentTheme: Theme;
  setTheme: (theme: Theme) => void;
  themes: Theme[];
  previewDarkMode: boolean;
  setPreviewDarkMode: (isDark: boolean) => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export function ThemeProvider({ children }: { children: React.ReactNode }) {
  const [currentTheme, setCurrentTheme] = useState<Theme>(themes[0]); // Default theme
  const [previewDarkMode, setPreviewDarkMode] = useState<boolean>(false); // Preview-specific dark mode

  const setTheme = (theme: Theme) => {
    setCurrentTheme(theme);
    
    // Store theme preference in localStorage
    if (typeof window !== 'undefined') {
      localStorage.setItem('selected-theme', theme.name);
    }
  };

  const handleSetPreviewDarkMode = (isDark: boolean) => {
    setPreviewDarkMode(isDark);
    
    // Store preview dark mode preference in localStorage
    if (typeof window !== 'undefined') {
      localStorage.setItem('preview-dark-mode', isDark.toString());
    }
  };

  // Load preferences from localStorage on mount
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const savedTheme = localStorage.getItem('selected-theme');
      if (savedTheme) {
        const theme = themes.find(t => t.name === savedTheme);
        if (theme) {
          setCurrentTheme(theme);
        }
      }
      
      const savedDarkMode = localStorage.getItem('preview-dark-mode');
      if (savedDarkMode) {
        // If user has previously set a preference, use it
        setPreviewDarkMode(savedDarkMode === 'true');
      } else {
        // If no preference saved, sync with global Fumadocs theme on first render
        const isGlobalDark = document.documentElement.classList.contains('dark');
        setPreviewDarkMode(isGlobalDark);
      }
    }
  }, []);

  return (
    <ThemeContext.Provider value={{ 
      currentTheme, 
      setTheme, 
      themes, 
      previewDarkMode, 
      setPreviewDarkMode: handleSetPreviewDarkMode 
    }}>
      {children}
    </ThemeContext.Provider>
  );
}

export function useTheme() {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
}
</file>

<file path="src/lib/get-llm-text.ts">
import { remark } from 'remark';
import remarkGfm from 'remark-gfm';
import remarkMdx from 'remark-mdx';
import { remarkInclude } from 'fumadocs-mdx/config';
import { source } from '@/lib/source';
import type { InferPageType } from 'fumadocs-core/source';

const processor = remark()
  .use(remarkMdx)
  // needed for Fumadocs MDX
  .use(remarkInclude)
  .use(remarkGfm);

export async function getLLMText(page: InferPageType<typeof source>) {
  const processed = await processor.process({
    path: page.data._file.absolutePath,
    value: page.data.content,
  });

  return `# ${page.data.title}
URL: ${page.url}

${page.data.description}

${processed.value}`;
}
</file>

<file path="src/lib/inkeep-qa-schema.ts">
import { z } from 'zod';

const InkeepRecordTypes = z.enum([
  'documentation',
  'site',
  'discourse_post',
  'github_issue',
  'github_discussion',
  'stackoverflow_question',
  'discord_forum_post',
  'discord_message',
  'custom_question_answer',
]);

const LinkType = z.union([
  InkeepRecordTypes,
  z.string(), // catch all
]);

const LinkSchema = z.looseObject({
  label: z.string().nullish(), // the value of the footnote, e.g. `1`
  url: z.string(),
  title: z.string().nullish(),
  type: LinkType.nullish(),
  breadcrumbs: z.array(z.string()).nullish(),
});

const LinksSchema = z.array(LinkSchema).nullish();

export const ProvideLinksToolSchema = z.object({
  links: LinksSchema,
});

const KnownAnswerConfidence = z.enum([
  'very_confident',
  'somewhat_confident',
  'not_confident',
  'no_sources',
  'other',
]);

const AnswerConfidence = z.union([KnownAnswerConfidence, z.string()]); // evolvable

const AIAnnotationsToolSchema = z.looseObject({
  answerConfidence: AnswerConfidence,
});

export const ProvideAIAnnotationsToolSchema = z.object({
  aiAnnotations: AIAnnotationsToolSchema,
});
</file>

<file path="src/lib/source.ts">
import { docs } from '@/.source';
import { loader } from 'fumadocs-core/source';
import { icons } from 'lucide-react';
import { createElement } from 'react';

// See https://fumadocs.vercel.app/docs/headless/source-api for more info
export const source = loader({
  // it assigns a URL to your pages
  baseUrl: '/docs',
  source: docs.toFumadocsSource(),
  icon(icon) {
    if (!icon) {
      return;
    }
    if (icon in icons) {
      return createElement(icons[icon as keyof typeof icons]);
    }
    console.warn(`Icon "${icon}" not found in lucide-react`);
  },
});
</file>

<file path="src/lib/themes.ts">
export interface Theme {
  name: string;
  label: string;
  cssVars: {
    light: Record<string, string>;
    dark: Record<string, string>;
  };
  fonts?: {
    primary?: string;
    secondary?: string;
    mono?: string;
    fontUrl?: string;
  };
}

export const themes: Theme[] = [
  {
    name: "default",
    label: "Default",
    cssVars: {
      light: {
        "--background": "oklch(1 0 0)",
        "--foreground": "oklch(0.145 0 0)",
        "--card": "oklch(1 0 0)",
        "--card-foreground": "oklch(0.145 0 0)",
        "--popover": "oklch(1 0 0)",
        "--popover-foreground": "oklch(0.145 0 0)",
        "--primary": "oklch(0.205 0 0)",
        "--primary-foreground": "oklch(0.985 0 0)",
        "--secondary": "oklch(0.97 0 0)",
        "--secondary-foreground": "oklch(0.205 0 0)",
        "--muted": "oklch(0.97 0 0)",
        "--muted-foreground": "oklch(0.556 0 0)",
        "--accent": "oklch(0.97 0 0)",
        "--accent-foreground": "oklch(0.205 0 0)",
        "--destructive": "oklch(0.577 0.245 27.325)",
        "--border": "oklch(0.922 0 0)",
        "--input": "oklch(0.922 0 0)",
        "--ring": "oklch(0.708 0 0)",
        "--radius": "0.625rem"
      },
      dark: {
        "--background": "oklch(0.145 0 0)",
        "--foreground": "oklch(0.985 0 0)",
        "--card": "oklch(0.205 0 0)",
        "--card-foreground": "oklch(0.985 0 0)",
        "--popover": "oklch(0.205 0 0)",
        "--popover-foreground": "oklch(0.985 0 0)",
        "--primary": "oklch(0.922 0 0)",
        "--primary-foreground": "oklch(0.205 0 0)",
        "--secondary": "oklch(0.269 0 0)",
        "--secondary-foreground": "oklch(0.985 0 0)",
        "--muted": "oklch(0.269 0 0)",
        "--muted-foreground": "oklch(0.708 0 0)",
        "--accent": "oklch(0.269 0 0)",
        "--accent-foreground": "oklch(0.985 0 0)",
        "--destructive": "oklch(0.704 0.191 22.216)",
        "--border": "oklch(1 0 0 / 10%)",
        "--input": "oklch(1 0 0 / 15%)",
        "--ring": "oklch(0.556 0 0)"
      }
    }
  },
  {
    name: "blue",
    label: "Blue",
    cssVars: {
      light: {
        "--background": "oklch(1 0 0)",
        "--foreground": "oklch(0.145 0 0)",
        "--card": "oklch(1 0 0)",
        "--card-foreground": "oklch(0.145 0 0)",
        "--popover": "oklch(1 0 0)",
        "--popover-foreground": "oklch(0.145 0 0)",
        "--primary": "oklch(0.6 0.25 253)",
        "--primary-foreground": "oklch(0.985 0 0)",
        "--secondary": "oklch(0.97 0.01 253)",
        "--secondary-foreground": "oklch(0.205 0 0)",
        "--muted": "oklch(0.97 0.01 253)",
        "--muted-foreground": "oklch(0.556 0.01 253)",
        "--accent": "oklch(0.94 0.05 253)",
        "--accent-foreground": "oklch(0.205 0 0)",
        "--destructive": "oklch(0.577 0.245 27.325)",
        "--border": "oklch(0.922 0.01 253)",
        "--input": "oklch(0.922 0.01 253)",
        "--ring": "oklch(0.6 0.25 253)",
        "--radius": "0.625rem"
      },
      dark: {
        "--background": "oklch(0.145 0.01 253)",
        "--foreground": "oklch(0.985 0 0)",
        "--card": "oklch(0.205 0.01 253)",
        "--card-foreground": "oklch(0.985 0 0)",
        "--popover": "oklch(0.205 0.01 253)",
        "--popover-foreground": "oklch(0.985 0 0)",
        "--primary": "oklch(0.7 0.2 253)",
        "--primary-foreground": "oklch(0.145 0.01 253)",
        "--secondary": "oklch(0.269 0.01 253)",
        "--secondary-foreground": "oklch(0.985 0 0)",
        "--muted": "oklch(0.269 0.01 253)",
        "--muted-foreground": "oklch(0.708 0.01 253)",
        "--accent": "oklch(0.35 0.05 253)",
        "--accent-foreground": "oklch(0.985 0 0)",
        "--destructive": "oklch(0.704 0.191 22.216)",
        "--border": "oklch(1 0 0 / 10%)",
        "--input": "oklch(1 0 0 / 15%)",
        "--ring": "oklch(0.7 0.2 253)"
      }
    }
  },
  {
    name: "green",
    label: "Green",
    cssVars: {
      light: {
        "--background": "oklch(1 0 0)",
        "--foreground": "oklch(0.145 0 0)",
        "--card": "oklch(1 0 0)",
        "--card-foreground": "oklch(0.145 0 0)",
        "--popover": "oklch(1 0 0)",
        "--popover-foreground": "oklch(0.145 0 0)",
        "--primary": "oklch(0.5 0.2 142)",
        "--primary-foreground": "oklch(0.985 0 0)",
        "--secondary": "oklch(0.97 0.01 142)",
        "--secondary-foreground": "oklch(0.205 0 0)",
        "--muted": "oklch(0.97 0.01 142)",
        "--muted-foreground": "oklch(0.556 0.01 142)",
        "--accent": "oklch(0.94 0.05 142)",
        "--accent-foreground": "oklch(0.205 0 0)",
        "--destructive": "oklch(0.577 0.245 27.325)",
        "--border": "oklch(0.922 0.01 142)",
        "--input": "oklch(0.922 0.01 142)",
        "--ring": "oklch(0.5 0.2 142)",
        "--radius": "0.625rem"
      },
      dark: {
        "--background": "oklch(0.145 0.01 142)",
        "--foreground": "oklch(0.985 0 0)",
        "--card": "oklch(0.205 0.01 142)",
        "--card-foreground": "oklch(0.985 0 0)",
        "--popover": "oklch(0.205 0.01 142)",
        "--popover-foreground": "oklch(0.985 0 0)",
        "--primary": "oklch(0.65 0.15 142)",
        "--primary-foreground": "oklch(0.145 0.01 142)",
        "--secondary": "oklch(0.269 0.01 142)",
        "--secondary-foreground": "oklch(0.985 0 0)",
        "--muted": "oklch(0.269 0.01 142)",
        "--muted-foreground": "oklch(0.708 0.01 142)",
        "--accent": "oklch(0.35 0.05 142)",
        "--accent-foreground": "oklch(0.985 0 0)",
        "--destructive": "oklch(0.704 0.191 22.216)",
        "--border": "oklch(1 0 0 / 10%)",
        "--input": "oklch(1 0 0 / 15%)",
        "--ring": "oklch(0.65 0.15 142)"
      }
    }
  },
  {
    name: "orange",
    label: "Orange",
    cssVars: {
      light: {
        "--background": "oklch(1 0 0)",
        "--foreground": "oklch(0.145 0 0)",
        "--card": "oklch(1 0 0)",
        "--card-foreground": "oklch(0.145 0 0)",
        "--popover": "oklch(1 0 0)",
        "--popover-foreground": "oklch(0.145 0 0)",
        "--primary": "oklch(0.6 0.2 42)",
        "--primary-foreground": "oklch(0.985 0 0)",
        "--secondary": "oklch(0.97 0.01 42)",
        "--secondary-foreground": "oklch(0.205 0 0)",
        "--muted": "oklch(0.97 0.01 42)",
        "--muted-foreground": "oklch(0.556 0.01 42)",
        "--accent": "oklch(0.94 0.05 42)",
        "--accent-foreground": "oklch(0.205 0 0)",
        "--destructive": "oklch(0.577 0.245 27.325)",
        "--border": "oklch(0.922 0.01 42)",
        "--input": "oklch(0.922 0.01 42)",
        "--ring": "oklch(0.6 0.2 42)",
        "--radius": "0.625rem"
      },
      dark: {
        "--background": "oklch(0.145 0.01 42)",
        "--foreground": "oklch(0.985 0 0)",
        "--card": "oklch(0.205 0.01 42)",
        "--card-foreground": "oklch(0.985 0 0)",
        "--popover": "oklch(0.205 0.01 42)",
        "--popover-foreground": "oklch(0.985 0 0)",
        "--primary": "oklch(0.7 0.15 42)",
        "--primary-foreground": "oklch(0.145 0.01 42)",
        "--secondary": "oklch(0.269 0.01 42)",
        "--secondary-foreground": "oklch(0.985 0 0)",
        "--muted": "oklch(0.269 0.01 42)",
        "--muted-foreground": "oklch(0.708 0.01 42)",
        "--accent": "oklch(0.35 0.05 42)",
        "--accent-foreground": "oklch(0.985 0 0)",
        "--destructive": "oklch(0.704 0.191 22.216)",
        "--border": "oklch(1 0 0 / 10%)",
        "--input": "oklch(1 0 0 / 15%)",
        "--ring": "oklch(0.7 0.15 42)"
      }
    }
  },
  {
    name: "red",
    label: "Red",
    cssVars: {
      light: {
        "--background": "oklch(1 0 0)",
        "--foreground": "oklch(0.145 0 0)",
        "--card": "oklch(1 0 0)",
        "--card-foreground": "oklch(0.145 0 0)",
        "--popover": "oklch(1 0 0)",
        "--popover-foreground": "oklch(0.145 0 0)",
        "--primary": "oklch(0.55 0.25 12)",
        "--primary-foreground": "oklch(0.985 0 0)",
        "--secondary": "oklch(0.97 0.01 12)",
        "--secondary-foreground": "oklch(0.205 0 0)",
        "--muted": "oklch(0.97 0.01 12)",
        "--muted-foreground": "oklch(0.556 0.01 12)",
        "--accent": "oklch(0.94 0.05 12)",
        "--accent-foreground": "oklch(0.205 0 0)",
        "--destructive": "oklch(0.577 0.245 27.325)",
        "--border": "oklch(0.922 0.01 12)",
        "--input": "oklch(0.922 0.01 12)",
        "--ring": "oklch(0.55 0.25 12)",
        "--radius": "0.625rem"
      },
      dark: {
        "--background": "oklch(0.145 0.01 12)",
        "--foreground": "oklch(0.985 0 0)",
        "--card": "oklch(0.205 0.01 12)",
        "--card-foreground": "oklch(0.985 0 0)",
        "--popover": "oklch(0.205 0.01 12)",
        "--popover-foreground": "oklch(0.985 0 0)",
        "--primary": "oklch(0.7 0.2 12)",
        "--primary-foreground": "oklch(0.145 0.01 12)",
        "--secondary": "oklch(0.269 0.01 12)",
        "--secondary-foreground": "oklch(0.985 0 0)",
        "--muted": "oklch(0.269 0.01 12)",
        "--muted-foreground": "oklch(0.708 0.01 12)",
        "--accent": "oklch(0.35 0.05 12)",
        "--accent-foreground": "oklch(0.985 0 0)",
        "--destructive": "oklch(0.704 0.191 22.216)",
        "--border": "oklch(1 0 0 / 10%)",
        "--input": "oklch(1 0 0 / 15%)",
        "--ring": "oklch(0.7 0.2 12)"
      }
    }
  },
  {
    "name": "cyberpunk",
    "label": "Cyberpunk",
    "fonts": {
      "primary": "'Orbitron', monospace",
      "secondary": "'JetBrains Mono', monospace",
      "mono": "'JetBrains Mono', monospace",
      "fontUrl": "https://fonts.googleapis.com/css2?family=Orbitron:wght@400;600;900&family=JetBrains+Mono:ital,wght@0,400;0,600;1,400&display=swap"
    },
    "cssVars": {
      "light": {
        /* Core surface colours — high-key, almost white */
        "--background": "oklch(0.96 0.01 260)",
        "--foreground": "oklch(0.22 0.03 280)",
  
        /* Cards & popovers — subtle glass-morph tint */
        "--card": "oklch(0.98 0.02 260 / 0.8)",
        "--card-foreground": "oklch(0.25 0.04 280)",
        "--popover": "oklch(0.98 0.02 260 / 0.9)",
        "--popover-foreground": "oklch(0.25 0.04 280)",
  
        /* Neon magentas & cyans */
        "--primary": "oklch(0.75 0.32 325)",
        "--primary-foreground": "oklch(0.98 0.01 260)",
        "--secondary": "oklch(0.92 0.1 190)",
        "--secondary-foreground": "oklch(0.2 0.05 260)",
  
        /* Muted greys with a cool hue */
        "--muted": "oklch(0.9 0.02 260)",
        "--muted-foreground": "oklch(0.55 0.03 260)",
  
        /* Accent — electric cyan */
        "--accent": "oklch(0.7 0.28 190)",
        "--accent-foreground": "oklch(0.98 0.01 260)",
  
        /* Destructive — hot red */
        "--destructive": "oklch(0.7 0.3 25)",
        "--border": "oklch(0.85 0.05 260)",
        "--input": "oklch(0.94 0.02 260)",
        "--ring": "oklch(0.75 0.32 325)",
        "--radius": "0.25rem"
      },
      "dark": {
        /* unchanged – already solid */
        "--background": "oklch(0.02 0.01 270)",
        "--foreground": "oklch(0.95 0.2 320)",
        "--card": "oklch(0.05 0.02 270)",
        "--card-foreground": "oklch(0.9 0.15 320)",
        "--popover": "oklch(0.05 0.02 270)",
        "--popover-foreground": "oklch(0.9 0.15 320)",
        "--primary": "oklch(0.8 0.35 320)",
        "--primary-foreground": "oklch(0.02 0.01 270)",
        "--secondary": "oklch(0.1 0.03 270)",
        "--secondary-foreground": "oklch(0.85 0.2 180)",
        "--muted": "oklch(0.08 0.02 270)",
        "--muted-foreground": "oklch(0.65 0.1 270)",
        "--accent": "oklch(0.7 0.3 180)",
        "--accent-foreground": "oklch(0.02 0.01 270)",
        "--destructive": "oklch(0.7 0.35 15)",
        "--border": "oklch(0.15 0.04 270)",
        "--input": "oklch(0.1 0.03 270)",
        "--ring": "oklch(0.8 0.35 320)"
      }
    }
  },
  {
    name: "elegant",
    label: "Elegant",
    fonts: {
      primary: "'Playfair Display', serif",
      secondary: "'Crimson Text', serif",
      mono: "'JetBrains Mono', monospace",
      fontUrl: "https://fonts.googleapis.com/css2?family=Playfair+Display:ital,wght@0,400;0,500;0,600;0,700;0,800;0,900;1,400;1,500;1,600;1,700;1,800;1,900&family=Crimson+Text:ital,wght@0,400;0,600;1,400;1,600&family=JetBrains+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800&display=swap"
    },
    cssVars: {
      light: {
        "--background": "oklch(0.98 0.005 60)",
        "--foreground": "oklch(0.15 0.02 30)",
        "--card": "oklch(0.99 0.003 60)",
        "--card-foreground": "oklch(0.15 0.02 30)",
        "--popover": "oklch(0.99 0.003 60)",
        "--popover-foreground": "oklch(0.15 0.02 30)",
        "--primary": "oklch(0.3 0.08 30)",
        "--primary-foreground": "oklch(0.98 0.005 60)",
        "--secondary": "oklch(0.92 0.01 60)",
        "--secondary-foreground": "oklch(0.25 0.05 30)",
        "--muted": "oklch(0.94 0.008 60)",
        "--muted-foreground": "oklch(0.45 0.03 30)",
        "--accent": "oklch(0.88 0.02 45)",
        "--accent-foreground": "oklch(0.2 0.04 30)",
        "--destructive": "oklch(0.5 0.15 15)",
        "--border": "oklch(0.88 0.015 60)",
        "--input": "oklch(0.9 0.012 60)",
        "--ring": "oklch(0.35 0.1 30)",
        "--radius": "0.75rem"
      },
      dark: {
        "--background": "oklch(0.08 0.01 30)",
        "--foreground": "oklch(0.95 0.008 60)",
        "--card": "oklch(0.12 0.015 30)",
        "--card-foreground": "oklch(0.92 0.006 60)",
        "--popover": "oklch(0.12 0.015 30)",
        "--popover-foreground": "oklch(0.92 0.006 60)",
        "--primary": "oklch(0.85 0.02 60)",
        "--primary-foreground": "oklch(0.1 0.012 30)",
        "--secondary": "oklch(0.18 0.02 30)",
        "--secondary-foreground": "oklch(0.88 0.008 60)",
        "--muted": "oklch(0.15 0.018 30)",
        "--muted-foreground": "oklch(0.65 0.005 60)",
        "--accent": "oklch(0.25 0.03 45)",
        "--accent-foreground": "oklch(0.9 0.006 60)",
        "--destructive": "oklch(0.65 0.18 15)",
        "--border": "oklch(0.2 0.025 30)",
        "--input": "oklch(0.16 0.02 30)",
        "--ring": "oklch(0.8 0.015 60)"
      }
    }
  },
  {
    name: "retro",
    label: "Retro",
    fonts: {
      primary: "'Fredoka', cursive",
      secondary: "'Space Grotesk', sans-serif",
      mono: "'JetBrains Mono', monospace",
      fontUrl: "https://fonts.googleapis.com/css2?family=Fredoka:wght@300;400;500;600;700&family=Space+Grotesk:wght@300;400;500;600;700&family=JetBrains+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800&display=swap"
    },
    cssVars: {
      light: {
        "--background": "oklch(0.96 0.02 50)",
        "--foreground": "oklch(0.2 0.05 20)",
        "--card": "oklch(0.98 0.015 50)",
        "--card-foreground": "oklch(0.2 0.05 20)",
        "--popover": "oklch(0.98 0.015 50)",
        "--popover-foreground": "oklch(0.2 0.05 20)",
        "--primary": "oklch(0.6 0.2 25)",
        "--primary-foreground": "oklch(0.98 0.015 50)",
        "--secondary": "oklch(0.85 0.08 40)",
        "--secondary-foreground": "oklch(0.25 0.06 20)",
        "--muted": "oklch(0.9 0.04 45)",
        "--muted-foreground": "oklch(0.5 0.04 25)",
        "--accent": "oklch(0.75 0.15 60)",
        "--accent-foreground": "oklch(0.2 0.05 20)",
        "--destructive": "oklch(0.55 0.18 15)",
        "--border": "oklch(0.82 0.06 45)",
        "--input": "oklch(0.85 0.05 45)",
        "--ring": "oklch(0.6 0.2 25)",
        "--radius": "1rem"
      },
      dark: {
        "--background": "oklch(0.12 0.03 20)",
        "--foreground": "oklch(0.92 0.02 50)",
        "--card": "oklch(0.16 0.04 20)",
        "--card-foreground": "oklch(0.9 0.02 50)",
        "--popover": "oklch(0.16 0.04 20)",
        "--popover-foreground": "oklch(0.9 0.02 50)",
        "--primary": "oklch(0.7 0.22 25)",
        "--primary-foreground": "oklch(0.12 0.03 20)",
        "--secondary": "oklch(0.22 0.05 20)",
        "--secondary-foreground": "oklch(0.85 0.06 40)",
        "--muted": "oklch(0.18 0.04 20)",
        "--muted-foreground": "oklch(0.65 0.03 40)",
        "--accent": "oklch(0.35 0.1 60)",
        "--accent-foreground": "oklch(0.9 0.02 50)",
        "--destructive": "oklch(0.65 0.2 15)",
        "--border": "oklch(0.25 0.05 20)",
        "--input": "oklch(0.2 0.04 20)",
        "--ring": "oklch(0.7 0.22 25)"
      }
    }
  },
  {
    name: "minimal",
    label: "Minimal",
    fonts: {
      primary: "system-ui, -apple-system, sans-serif",
      secondary: "ui-monospace, monospace",
      mono: "ui-monospace, monospace"
    },
    cssVars: {
      light: {
        "--background": "oklch(1 0 0)",
        "--foreground": "oklch(0 0 0)",
        "--card": "oklch(0.99 0 0)",
        "--card-foreground": "oklch(0 0 0)",
        "--popover": "oklch(1 0 0)",
        "--popover-foreground": "oklch(0 0 0)",
        "--primary": "oklch(0 0 0)",
        "--primary-foreground": "oklch(1 0 0)",
        "--secondary": "oklch(0.95 0 0)",
        "--secondary-foreground": "oklch(0 0 0)",
        "--muted": "oklch(0.96 0 0)",
        "--muted-foreground": "oklch(0.4 0 0)",
        "--accent": "oklch(0.92 0 0)",
        "--accent-foreground": "oklch(0 0 0)",
        "--destructive": "oklch(0 0 0)",
        "--border": "oklch(0.9 0 0)",
        "--input": "oklch(0.95 0 0)",
        "--ring": "oklch(0 0 0)",
        "--radius": "0rem"
      },
      dark: {
        "--background": "oklch(0 0 0)",
        "--foreground": "oklch(1 0 0)",
        "--card": "oklch(0.03 0 0)",
        "--card-foreground": "oklch(1 0 0)",
        "--popover": "oklch(0 0 0)",
        "--popover-foreground": "oklch(1 0 0)",
        "--primary": "oklch(1 0 0)",
        "--primary-foreground": "oklch(0 0 0)",
        "--secondary": "oklch(0.1 0 0)",
        "--secondary-foreground": "oklch(1 0 0)",
        "--muted": "oklch(0.08 0 0)",
        "--muted-foreground": "oklch(0.7 0 0)",
        "--accent": "oklch(0.15 0 0)",
        "--accent-foreground": "oklch(1 0 0)",
        "--destructive": "oklch(0.8 0 0)",
        "--border": "oklch(0.2 0 0)",
        "--input": "oklch(0.1 0 0)",
        "--ring": "oklch(1 0 0)"
      }
    }
  },
  {
    name: "neon",
    label: "Neon",
    fonts: {
      primary: "'Space Grotesk', sans-serif",
      secondary: "'JetBrains Mono', monospace",
      mono: "'JetBrains Mono', monospace",
      fontUrl: "https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;500;600;700&family=JetBrains+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800&display=swap"
    },
    cssVars: {
      light: {
        "--background": "oklch(0.08 0.01 270)",
        "--foreground": "oklch(0.95 0.15 300)",
        "--card": "oklch(0.12 0.02 270)",
        "--card-foreground": "oklch(0.9 0.12 300)",
        "--popover": "oklch(0.12 0.02 270)",
        "--popover-foreground": "oklch(0.9 0.12 300)",
        "--primary": "oklch(0.75 0.35 300)",
        "--primary-foreground": "oklch(0.08 0.01 270)",
        "--secondary": "oklch(0.18 0.03 180)",
        "--secondary-foreground": "oklch(0.85 0.2 180)",
        "--muted": "oklch(0.15 0.02 270)",
        "--muted-foreground": "oklch(0.65 0.08 300)",
        "--accent": "oklch(0.7 0.3 180)",
        "--accent-foreground": "oklch(0.08 0.01 270)",
        "--destructive": "oklch(0.7 0.35 15)",
        "--border": "oklch(0.25 0.05 270)",
        "--input": "oklch(0.2 0.03 270)",
        "--ring": "oklch(0.75 0.35 300)",
        "--radius": "0.5rem"
      },
      dark: {
        "--background": "oklch(0.04 0.005 270)",
        "--foreground": "oklch(0.98 0.2 300)",
        "--card": "oklch(0.08 0.01 270)",
        "--card-foreground": "oklch(0.95 0.15 300)",
        "--popover": "oklch(0.08 0.01 270)",
        "--popover-foreground": "oklch(0.95 0.15 300)",
        "--primary": "oklch(0.8 0.4 300)",
        "--primary-foreground": "oklch(0.04 0.005 270)",
        "--secondary": "oklch(0.12 0.02 180)",
        "--secondary-foreground": "oklch(0.9 0.25 180)",
        "--muted": "oklch(0.1 0.01 270)",
        "--muted-foreground": "oklch(0.7 0.1 300)",
        "--accent": "oklch(0.75 0.35 180)",
        "--accent-foreground": "oklch(0.04 0.005 270)",
        "--destructive": "oklch(0.75 0.4 15)",
        "--border": "oklch(0.2 0.03 270)",
        "--input": "oklch(0.15 0.02 270)",
        "--ring": "oklch(0.8 0.4 300)"
      }
    }
  },
  {
    name: "sunset",
    label: "Sunset",
    fonts: {
      primary: "'Inter', sans-serif",
      secondary: "'Fira Code', monospace",
      mono: "'Fira Code', monospace",
      fontUrl: "https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Fira+Code:wght@300;400;500;600;700&display=swap"
    },
    cssVars: {
      light: {
        "--background": "oklch(0.97 0.02 35)",
        "--foreground": "oklch(0.2 0.05 15)",
        "--card": "oklch(0.99 0.01 35)",
        "--card-foreground": "oklch(0.2 0.05 15)",
        "--popover": "oklch(0.99 0.01 35)",
        "--popover-foreground": "oklch(0.2 0.05 15)",
        "--primary": "oklch(0.65 0.25 25)",
        "--primary-foreground": "oklch(0.99 0.01 35)",
        "--secondary": "oklch(0.85 0.08 45)",
        "--secondary-foreground": "oklch(0.25 0.06 15)",
        "--muted": "oklch(0.92 0.03 40)",
        "--muted-foreground": "oklch(0.5 0.04 20)",
        "--accent": "oklch(0.7 0.2 50)",
        "--accent-foreground": "oklch(0.2 0.05 15)",
        "--destructive": "oklch(0.6 0.2 15)",
        "--border": "oklch(0.88 0.05 40)",
        "--input": "oklch(0.9 0.04 40)",
        "--ring": "oklch(0.65 0.25 25)",
        "--radius": "0.75rem"
      },
      dark: {
        "--background": "oklch(0.15 0.03 15)",
        "--foreground": "oklch(0.92 0.02 35)",
        "--card": "oklch(0.18 0.04 15)",
        "--card-foreground": "oklch(0.9 0.02 35)",
        "--popover": "oklch(0.18 0.04 15)",
        "--popover-foreground": "oklch(0.9 0.02 35)",
        "--primary": "oklch(0.75 0.3 25)",
        "--primary-foreground": "oklch(0.15 0.03 15)",
        "--secondary": "oklch(0.25 0.05 15)",
        "--secondary-foreground": "oklch(0.8 0.06 45)",
        "--muted": "oklch(0.2 0.04 15)",
        "--muted-foreground": "oklch(0.65 0.03 35)",
        "--accent": "oklch(0.4 0.15 50)",
        "--accent-foreground": "oklch(0.9 0.02 35)",
        "--destructive": "oklch(0.7 0.25 15)",
        "--border": "oklch(0.3 0.06 15)",
        "--input": "oklch(0.22 0.04 15)",
        "--ring": "oklch(0.75 0.3 25)"
      }
    }
  },
  {
    name: "ocean",
    label: "Ocean",
    fonts: {
      primary: "'Poppins', sans-serif",
      secondary: "'Source Code Pro', monospace",
      mono: "'Source Code Pro', monospace",
      fontUrl: "https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&family=Source+Code+Pro:wght@300;400;500;600;700&display=swap"
    },
    cssVars: {
      light: {
        "--background": "oklch(0.98 0.01 220)",
        "--foreground": "oklch(0.18 0.02 200)",
        "--card": "oklch(0.99 0.005 220)",
        "--card-foreground": "oklch(0.18 0.02 200)",
        "--popover": "oklch(0.99 0.005 220)",
        "--popover-foreground": "oklch(0.18 0.02 200)",
        "--primary": "oklch(0.55 0.2 210)",
        "--primary-foreground": "oklch(0.99 0.005 220)",
        "--secondary": "oklch(0.92 0.02 220)",
        "--secondary-foreground": "oklch(0.25 0.03 200)",
        "--muted": "oklch(0.94 0.015 220)",
        "--muted-foreground": "oklch(0.45 0.02 200)",
        "--accent": "oklch(0.85 0.05 190)",
        "--accent-foreground": "oklch(0.2 0.02 200)",
        "--destructive": "oklch(0.55 0.18 15)",
        "--border": "oklch(0.88 0.02 220)",
        "--input": "oklch(0.9 0.015 220)",
        "--ring": "oklch(0.55 0.2 210)",
        "--radius": "0.5rem"
      },
      dark: {
        "--background": "oklch(0.1 0.02 200)",
        "--foreground": "oklch(0.95 0.01 220)",
        "--card": "oklch(0.14 0.025 200)",
        "--card-foreground": "oklch(0.92 0.01 220)",
        "--popover": "oklch(0.14 0.025 200)",
        "--popover-foreground": "oklch(0.92 0.01 220)",
        "--primary": "oklch(0.7 0.25 210)",
        "--primary-foreground": "oklch(0.1 0.02 200)",
        "--secondary": "oklch(0.2 0.03 200)",
        "--secondary-foreground": "oklch(0.85 0.02 220)",
        "--muted": "oklch(0.16 0.025 200)",
        "--muted-foreground": "oklch(0.65 0.01 220)",
        "--accent": "oklch(0.3 0.08 190)",
        "--accent-foreground": "oklch(0.9 0.01 220)",
        "--destructive": "oklch(0.65 0.2 15)",
        "--border": "oklch(0.25 0.04 200)",
        "--input": "oklch(0.18 0.03 200)",
        "--ring": "oklch(0.7 0.25 210)"
      }
    }
  },
  {
    name: "forest",
    label: "Forest",
    fonts: {
      primary: "'Merriweather', serif",
      secondary: "'Roboto Mono', monospace",
      mono: "'Roboto Mono', monospace",
      fontUrl: "https://fonts.googleapis.com/css2?family=Merriweather:wght@300;400;700;900&family=Roboto+Mono:wght@300;400;500;600;700&display=swap"
    },
    cssVars: {
      light: {
        "--background": "oklch(0.97 0.01 120)",
        "--foreground": "oklch(0.2 0.03 90)",
        "--card": "oklch(0.98 0.008 120)",
        "--card-foreground": "oklch(0.2 0.03 90)",
        "--popover": "oklch(0.98 0.008 120)",
        "--popover-foreground": "oklch(0.2 0.03 90)",
        "--primary": "oklch(0.4 0.15 130)",
        "--primary-foreground": "oklch(0.98 0.008 120)",
        "--secondary": "oklch(0.9 0.02 110)",
        "--secondary-foreground": "oklch(0.25 0.04 90)",
        "--muted": "oklch(0.93 0.015 120)",
        "--muted-foreground": "oklch(0.5 0.02 100)",
        "--accent": "oklch(0.82 0.06 140)",
        "--accent-foreground": "oklch(0.2 0.03 90)",
        "--destructive": "oklch(0.55 0.18 15)",
        "--border": "oklch(0.85 0.03 120)",
        "--input": "oklch(0.88 0.025 120)",
        "--ring": "oklch(0.4 0.15 130)",
        "--radius": "0.625rem"
      },
      dark: {
        "--background": "oklch(0.12 0.02 90)",
        "--foreground": "oklch(0.92 0.01 120)",
        "--card": "oklch(0.16 0.025 90)",
        "--card-foreground": "oklch(0.9 0.01 120)",
        "--popover": "oklch(0.16 0.025 90)",
        "--popover-foreground": "oklch(0.9 0.01 120)",
        "--primary": "oklch(0.65 0.2 130)",
        "--primary-foreground": "oklch(0.12 0.02 90)",
        "--secondary": "oklch(0.22 0.03 90)",
        "--secondary-foreground": "oklch(0.85 0.02 110)",
        "--muted": "oklch(0.18 0.025 90)",
        "--muted-foreground": "oklch(0.65 0.01 120)",
        "--accent": "oklch(0.35 0.1 140)",
        "--accent-foreground": "oklch(0.9 0.01 120)",
        "--destructive": "oklch(0.65 0.2 15)",
        "--border": "oklch(0.28 0.04 90)",
        "--input": "oklch(0.2 0.03 90)",
        "--ring": "oklch(0.65 0.2 130)"
      }
    }
  },
  {
    name: "lavender",
    label: "Lavender",
    fonts: {
      primary: "'Nunito', sans-serif",
      secondary: "'Cascadia Code', monospace",
      mono: "'Cascadia Code', monospace",
      fontUrl: "https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;500;600;700;800&display=swap"
    },
    cssVars: {
      light: {
        "--background": "oklch(0.98 0.01 280)",
        "--foreground": "oklch(0.2 0.02 260)",
        "--card": "oklch(0.99 0.008 280)",
        "--card-foreground": "oklch(0.2 0.02 260)",
        "--popover": "oklch(0.99 0.008 280)",
        "--popover-foreground": "oklch(0.2 0.02 260)",
        "--primary": "oklch(0.6 0.18 280)",
        "--primary-foreground": "oklch(0.99 0.008 280)",
        "--secondary": "oklch(0.92 0.02 290)",
        "--secondary-foreground": "oklch(0.25 0.03 260)",
        "--muted": "oklch(0.94 0.015 280)",
        "--muted-foreground": "oklch(0.5 0.02 270)",
        "--accent": "oklch(0.85 0.05 300)",
        "--accent-foreground": "oklch(0.2 0.02 260)",
        "--destructive": "oklch(0.55 0.18 15)",
        "--border": "oklch(0.88 0.02 280)",
        "--input": "oklch(0.9 0.015 280)",
        "--ring": "oklch(0.6 0.18 280)",
        "--radius": "0.875rem"
      },
      dark: {
        "--background": "oklch(0.1 0.015 260)",
        "--foreground": "oklch(0.95 0.01 280)",
        "--card": "oklch(0.14 0.02 260)",
        "--card-foreground": "oklch(0.92 0.01 280)",
        "--popover": "oklch(0.14 0.02 260)",
        "--popover-foreground": "oklch(0.92 0.01 280)",
        "--primary": "oklch(0.75 0.22 280)",
        "--primary-foreground": "oklch(0.1 0.015 260)",
        "--secondary": "oklch(0.2 0.025 260)",
        "--secondary-foreground": "oklch(0.85 0.02 290)",
        "--muted": "oklch(0.16 0.02 260)",
        "--muted-foreground": "oklch(0.65 0.01 280)",
        "--accent": "oklch(0.3 0.08 300)",
        "--accent-foreground": "oklch(0.9 0.01 280)",
        "--destructive": "oklch(0.65 0.2 15)",
        "--border": "oklch(0.25 0.03 260)",
        "--input": "oklch(0.18 0.025 260)",
        "--ring": "oklch(0.75 0.22 280)"
      }
    }
  },
  {
    name: "midnight",
    label: "Midnight",
    fonts: {
      primary: "'IBM Plex Sans', sans-serif",
      secondary: "'IBM Plex Mono', monospace",
      mono: "'IBM Plex Mono', monospace",
      fontUrl: "https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:wght@300;400;500;600;700&family=IBM+Plex+Mono:wght@300;400;500;600;700&display=swap"
    },
    cssVars: {
      light: {
        "--background": "oklch(0.95 0.005 240)",
        "--foreground": "oklch(0.15 0.01 220)",
        "--card": "oklch(0.97 0.003 240)",
        "--card-foreground": "oklch(0.15 0.01 220)",
        "--popover": "oklch(0.97 0.003 240)",
        "--popover-foreground": "oklch(0.15 0.01 220)",
        "--primary": "oklch(0.25 0.05 240)",
        "--primary-foreground": "oklch(0.97 0.003 240)",
        "--secondary": "oklch(0.88 0.01 240)",
        "--secondary-foreground": "oklch(0.2 0.015 220)",
        "--muted": "oklch(0.9 0.008 240)",
        "--muted-foreground": "oklch(0.45 0.008 230)",
        "--accent": "oklch(0.82 0.02 250)",
        "--accent-foreground": "oklch(0.15 0.01 220)",
        "--destructive": "oklch(0.5 0.15 15)",
        "--border": "oklch(0.85 0.01 240)",
        "--input": "oklch(0.87 0.008 240)",
        "--ring": "oklch(0.25 0.05 240)",
        "--radius": "0.375rem"
      },
      dark: {
        "--background": "oklch(0.08 0.008 220)",
        "--foreground": "oklch(0.95 0.005 240)",
        "--card": "oklch(0.12 0.01 220)",
        "--card-foreground": "oklch(0.92 0.005 240)",
        "--popover": "oklch(0.12 0.01 220)",
        "--popover-foreground": "oklch(0.92 0.005 240)",
        "--primary": "oklch(0.8 0.08 240)",
        "--primary-foreground": "oklch(0.08 0.008 220)",
        "--secondary": "oklch(0.18 0.015 220)",
        "--secondary-foreground": "oklch(0.85 0.01 240)",
        "--muted": "oklch(0.15 0.012 220)",
        "--muted-foreground": "oklch(0.65 0.005 240)",
        "--accent": "oklch(0.25 0.03 250)",
        "--accent-foreground": "oklch(0.9 0.005 240)",
        "--destructive": "oklch(0.65 0.18 15)",
        "--border": "oklch(0.22 0.02 220)",
        "--input": "oklch(0.16 0.012 220)",
        "--ring": "oklch(0.8 0.08 240)"
      }
    }
  }
];

export function applyScopedTheme(element: HTMLElement, theme: Theme, isDark: boolean) {
  const vars = isDark ? theme.cssVars.dark : theme.cssVars.light;
  
  Object.entries(vars).forEach(([key, value]) => {
    element.style.setProperty(key, value);
  });

  // Apply font families if defined
  if (theme.fonts) {
    // Load font if URL is provided
    if (theme.fonts.fontUrl) {
      loadFont(theme.fonts.fontUrl);
    }
    
    if (theme.fonts.primary) {
      element.style.setProperty('--font-family', theme.fonts.primary);
      element.style.fontFamily = theme.fonts.primary;
    }
    if (theme.fonts.mono) {
      element.style.setProperty('--font-mono', theme.fonts.mono);
    }
  }
}

function loadFont(url: string) {
  // Check if font link already exists
  const existingLink = document.querySelector(`link[href="${url}"]`);
  if (existingLink) return;

  // Create and append font link
  const link = document.createElement('link');
  link.rel = 'stylesheet';
  link.href = url;
  document.head.appendChild(link);
}

export function getThemeStyles(theme: Theme, isDark: boolean): React.CSSProperties {
  const vars = isDark ? theme.cssVars.dark : theme.cssVars.light;
  
  const styles: Record<string, string> = {};
  Object.entries(vars).forEach(([key, value]) => {
    styles[key] = value;
  });

  // Add font families if defined
  if (theme.fonts) {
    // Load font if URL is provided (client-side only)
    if (typeof window !== 'undefined' && theme.fonts.fontUrl) {
      loadFont(theme.fonts.fontUrl);
    }
    
    if (theme.fonts.primary) {
      styles['--font-family'] = theme.fonts.primary;
      styles.fontFamily = theme.fonts.primary;
    }
    if (theme.fonts.mono) {
      styles['--font-mono'] = theme.fonts.mono;
    }
  }
  
  return styles as React.CSSProperties;
}
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/registry/billingsdk/hello-world.tsx">
export default function HelloWorld() {
    return (
        <div className="flex flex-col">
            <h1 className="text-2xl font-bold dark:text-white">Hello World</h1>
            <p className="text-sm text-gray-500 dark:text-gray-400">This is a test</p>
        </div>
    )
}
</file>

<file path=".gitignore">
# deps
/node_modules

# generated content
.contentlayer
.content-collections
.source

# test & build
/coverage
/.next/
/out/
/build
*.tsbuildinfo

# misc
.DS_Store
*.pem
/.pnp
.pnp.js
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# others
.env*.local
.vercel
next-env.d.ts
</file>

<file path="cli.json">
{
  "aliases": {
    "uiDir": "./components/ui",
    "componentsDir": "./components",
    "blockDir": "./components",
    "cssDir": "./styles",
    "libDir": "./lib"
  },
  "baseDir": "src",
  "commands": {}
}
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/global.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="next.config.mjs">
import { createMDX } from 'fumadocs-mdx/next';

const withMDX = createMDX();

/** @type {import('next').NextConfig} */
const config = {
  reactStrictMode: true,
  async rewrites() {
    return [
      {
        source: '/docs/:path*.mdx',
        destination: '/llms.mdx/:path*',
      },
    ];
  },
};

export default withMDX(config);
</file>

<file path="postcss.config.mjs">
export default {
  plugins: {
    '@tailwindcss/postcss': {},
  },
};
</file>

<file path="source.config.ts">
import {
  defineConfig,
  defineDocs,
  frontmatterSchema,
  metaSchema,
} from 'fumadocs-mdx/config';

// You can customise Zod schemas for frontmatter and `meta.json` here
// see https://fumadocs.vercel.app/docs/mdx/collections#define-docs
export const docs = defineDocs({
  docs: {
    schema: frontmatterSchema,
  },
  meta: {
    schema: metaSchema,
  },
});

export default defineConfig({
  mdxOptions: {
    // MDX options
  },
});
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "baseUrl": ".",
    "target": "ESNext",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/.source": [
        "./.source/index.ts"
      ],
      "@/*": [
        "./src/*"
      ]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}
</file>

<file path=".github/ISSUE_TEMPLATE/bug_report.md">
---
name: Bug report
about: Create a report to help us improve
labels: bug
---

### Describe the bug
A clear and concise description of what the bug is.

### To Reproduce
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '...'
3. See error

### Expected behavior
What you expected to happen.

### Screenshots or recordings
If applicable, add screenshots or a short screen recording.

### Environment
- OS: [e.g. macOS 14]
- Node: [e.g. 20.x]
- Browser: [e.g. Chrome 130]

### Additional context
Add any other context about the problem here.
</file>

<file path=".github/ISSUE_TEMPLATE/feature_request.md">
---
name: Feature request
about: Suggest an idea for this project
labels: enhancement
---

### Problem
What problem are you trying to solve?

### Proposed solution
Describe the solution you'd like.

### Alternatives considered
Describe any alternative solutions or features you've considered.

### Additional context
Add any other context or screenshots about the feature request here.
</file>

<file path=".github/pull_request_template.md">
### Summary
Describe the purpose of this PR.

### Changes
- Key changes in this PR

### Screenshots/Recordings (if UI)
Add before/after or short clip if relevant.

### How to Test
Steps to validate locally:
1. npm ci
2. npm run typecheck
3. npm run build

### Checklist
- [ ] Title is clear and descriptive
- [ ] Related issue linked (if any)
- [ ] Tests or manual verification steps included
- [ ] CI passes (typecheck & build)
- [ ] Docs updated (if needed)
</file>

<file path=".github/SECURITY.md">
## Security Policy

We take the security of our users and their data seriously. Thank you for responsibly disclosing any vulnerabilities you may find.

### Reporting a Vulnerability

Please report security issues through GitHub's private advisory workflow:

- Open a private report: https://github.com/dodopayments/billingsdk/security/advisories/new

Do not create a public issue for security reports. Using the private advisory keeps details confidential until a fix is available.

### What to Include

Provide enough information to help us reproduce and triage the issue:

- Affected version or commit SHA
- Environment details (OS, Node.js/PNPM/NPM versions, browser if applicable)
- Minimal reproducible steps or proof-of-concept
- Impact assessment and potential severity
- Any suggested mitigations

You may optionally include your preferred contact and whether you would like public credit after remediation.

### Our Commitment and SLAs

We aim to:

- Acknowledge your report within 48 hours
- Provide a triage update within 5 business days
- Work on a fix and coordinated disclosure as quickly as possible, typically within 90 days depending on severity and complexity

We will keep you informed of progress and proposed disclosure timelines via the advisory thread.

### Coordinated Disclosure

Once a fix or mitigation is available, we will:

- Publish an advisory with CVSS-based severity
- Release patched versions and upgrade guidance
- Credit reporters who wish to be acknowledged

If you discover that details have become public before a fix is available, please notify us immediately via the advisory so we can expedite mitigation.

### Supported Versions

We generally provide security fixes for:

- The latest stable release
- The current `main` branch

When feasible, we may backport critical fixes to recent minor versions, but we encourage all users to stay up to date.

### Scope

This policy covers vulnerabilities in this repository's source code and release artifacts. Vulnerabilities in third-party dependencies should be reported upstream; however, if a dependency issue critically impacts this project, you may still open an advisory here and we will coordinate as needed.

### Safe Harbor

We will not pursue or support legal action against researchers who:

- Make a good-faith effort to comply with this policy
- Avoid privacy violations, data destruction, and service degradation
- Do not access or modify data without authorization
- Give us reasonable time to remediate before public disclosure

Thank you for helping keep the ecosystem secure.
</file>

<file path="content/docs/components/payment-method-manager/index.mdx">
---
title: Payment Method Manager
description: The Payment Method Manager component provides a complete UI for managing billing payment methods, including credit cards and ACH accounts with full CRUD operations and validation.
---

import { PaymentMethodManagerDemo } from '@/registry/billingsdk/demo/payment-method-manager-demo';

<Tabs items={['Preview', 'Code']} className="bg-transparent border-none">
  <Tab value="Preview" className="border-none bg-transparent p-0 mt-3">
    <PreviewComponents registryName="payment-method-manager">
      <PaymentMethodManagerDemo />
    </PreviewComponents>
  </Tab>

  <Tab value="Code" className="mt-3">
    ```tsx title="src/registry/billingsdk/demo/payment-method-manager-demo.tsx"
    'use client'

    import { useState } from 'react';
    import { PaymentMethodManager, type PaymentMethod } from '@/registry/billingsdk/payment-method-manager';

    export function PaymentMethodManagerDemo() {
        const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([
            {
                id: 'pm_1',
                type: 'credit',
                last4: '4242',
                expiry: '12/25',
                isDefault: true,
            },
            {
                id: 'pm_2',
                type: 'ach',
                last4: '1234',
                isDefault: false,
                routing: '021000021',
            },
        ]);

        const handleAddPaymentMethod = (method: PaymentMethod) => {
            setPaymentMethods([...paymentMethods, method]);
        };

        const handleEditPaymentMethod = (method: PaymentMethod) => {
            setPaymentMethods(paymentMethods.map(pm => pm.id === method.id ? method : pm));
        };

        const handleRemovePaymentMethod = (id: string) => {
            setPaymentMethods(paymentMethods.filter(pm => pm.id !== id));
        };

        const handleSetDefaultPaymentMethod = (id: string) => {
            setPaymentMethods(paymentMethods.map(pm => ({ ...pm, isDefault: pm.id === id })));
        };

        return (
            <div className="flex flex-1 flex-col justify-center text-center">
                <PaymentMethodManager
                    className="max-w-4xl mx-auto"
                    paymentMethods={paymentMethods}
                    onAdd={handleAddPaymentMethod}
                    onEdit={handleEditPaymentMethod}
                    onRemove={handleRemovePaymentMethod}
                    onSetDefault={handleSetDefaultPaymentMethod}
                />
            </div>
        );
    }
    ```
  </Tab>
</Tabs>

## Installation

<Tabs items={['npx', 'pnpm', 'yarn']} defaultValue="npx" groupId="installation-tabs">
  <Tab value="npx">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/payment-method-manager.json
    ```
  </Tab>

  <Tab value="pnpm">
    ```bash
    pnpm dlx shadcn@latest add https://billingsdk.com/r/payment-method-manager.json
    ```
  </Tab>

  <Tab value="yarn">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/payment-method-manager.json
    ```
  </Tab>
</Tabs>

## Usage

```tsx
import { PaymentMethodManager, type PaymentMethod } from "@/registry/billingsdk/payment-method-manager";
```

```tsx
const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([
  {
    id: 'pm_1',
    type: 'credit',
    last4: '4242',
    expiry: '12/25',
    isDefault: true,
  },
  {
    id: 'pm_2',
    type: 'ach',
    last4: '1234',
    isDefault: false,
    routing: '021000021',
  },
]);
```

```tsx
<PaymentMethodManager
  className="max-w-4xl mx-auto"
  paymentMethods={paymentMethods}
  onAdd={(method) => setPaymentMethods([...paymentMethods, method])}
  onEdit={(method) => setPaymentMethods(paymentMethods.map(pm => pm.id === method.id ? method : pm))}
  onRemove={(id) => setPaymentMethods(paymentMethods.filter(pm => pm.id !== id))}
  onSetDefault={(id) => setPaymentMethods(paymentMethods.map(pm => ({ ...pm, isDefault: pm.id === id })))}
/>
```

## Props

| Prop             | Type                             | Required | Description                                        |
| ---------------- | -------------------------------- | -------- | -------------------------------------------------- |
| `className`      | `string`                         | ❌        | Additional CSS classes for styling                 |
| `paymentMethods` | `PaymentMethod[]`                | ✅        | Array of payment methods to display                |
| `onAdd`          | `(method: PaymentMethod) => void`| ✅        | Callback when a new payment method is added       |
| `onEdit`         | `(method: PaymentMethod) => void`| ✅        | Callback when a payment method is edited          |
| `onRemove`       | `(id: string) => void`           | ✅        | Callback when a payment method is removed         |
| `onSetDefault`   | `(id: string) => void`           | ✅        | Callback to set a payment method as default       |

## PaymentMethod Interface

```tsx
interface PaymentMethod {
  id: string;
  type: 'credit' | 'ach';
  last4: string;
  expiry?: string; // Required for credit cards (MM/YY format)
  isDefault: boolean;
  routing?: string; // Required for ACH accounts
}
```

## Theming

The Payment Method Manager component is styled using the `shadcn/ui` library. You can customize the colors and fonts by overriding the CSS variables. You can also get the theme from the [Theming](/docs/theming) page.

## Example

```tsx title="src/registry/billingsdk/demo/payment-method-manager-demo.tsx"
'use client'

import { useState } from 'react';
import { PaymentMethodManager, type PaymentMethod } from '@/registry/billingsdk/payment-method-manager';

export function PaymentMethodManagerDemo() {
    const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([
        {
            id: 'pm_1',
            type: 'credit',
            last4: '4242',
            expiry: '12/25',
            isDefault: true,
        },
        {
            id: 'pm_2',
            type: 'ach',
            last4: '1234',
            isDefault: false,
            routing: '021000021',
        },
    ]);

    const handleAddPaymentMethod = (method: PaymentMethod) => {
        setPaymentMethods([...paymentMethods, method]);
    };

    const handleEditPaymentMethod = (method: PaymentMethod) => {
        setPaymentMethods(paymentMethods.map(pm => pm.id === method.id ? method : pm));
    };

    const handleRemovePaymentMethod = (id: string) => {
        setPaymentMethods(paymentMethods.filter(pm => pm.id !== id));
    };

    const handleSetDefaultPaymentMethod = (id: string) => {
        setPaymentMethods(paymentMethods.map(pm => ({ ...pm, isDefault: pm.id === id })));
    };

    return (
        <div className="flex flex-1 flex-col justify-center text-center">
            <PaymentMethodManager
                className="max-w-4xl mx-auto"
                paymentMethods={paymentMethods}
                onAdd={handleAddPaymentMethod}
                onEdit={handleEditPaymentMethod}
                onRemove={handleRemovePaymentMethod}
                onSetDefault={handleSetDefaultPaymentMethod}
            />
        </div>
    );
}
</file>

<file path="content/docs/components/index.mdx">
---
title: Components
description: Comprehensive collection of billing and subscription management components with production-ready features.

---

### Pricing Components

Professional pricing table components designed for conversion optimization and clear feature presentation.

| Component | Description |
|-----------|-------------|
| **[Pricing Table One](/docs/components/pricing-table/pricing-table-one)** | Essential pricing table with classic and minimal theme variants |
| **[Pricing Table Two](/docs/components/pricing-table/pricing-table-two)** | Advanced pricing table with enhanced layouts and feature comparison |
| **[Pricing Table Three](/docs/components/pricing-table/pricing-table-three)** | Enterprise-grade pricing table with custom styling and advanced features |

### Subscription Management

Comprehensive subscription management interfaces for billing dashboards and user account management.

| Component | Description |
|-----------|-------------|
| **[Manage Subscription](/docs/components/manage-subscription)** | Complete subscription dashboard with billing history and account details |
| **[Update Plan Card](/docs/components/update-plan/update-plan-card)** | Inline plan upgrade interface with feature comparison and pricing |
| **[Update Plan Dialog](/docs/components/update-plan/update-plan-dialog)** | Modal dialog for seamless plan changes with confirmation flow |

### Cancellation Management

Thoughtfully designed cancellation flows with retention strategies and user feedback collection.

| Component | Description |
|-----------|-------------|
| **[Cancel Subscription Dialog](/docs/components/cancel-subscription/cancel-subscription-dialog)** | Comprehensive cancellation flow with feedback collection and retention offers |
| **[Cancel Subscription Card](/docs/components/cancel-subscription/cancel-subscription-card)** | Compact cancellation interface for quick subscription termination |

### Usage Analytics

Visual usage meters and analytics components for displaying quotas, limits, and consumption data.

| Component | Description |
|-----------|-------------|
| **[Usage Meter Linear](/docs/components/usage-meter/usage-meter-linear)** | Horizontal progress bar for displaying usage percentages and limits |
| **[Usage Meter Circle](/docs/components/usage-meter/usage-meter-circle)** | Circular progress indicator for API limits and storage consumption |

### Marketing & Promotion

Engagement components for announcements, promotions, and user onboarding experiences.

| Component | Description |
|-----------|-------------|
| **[Top Banner](/docs/components/banner)** | Promotional banner with multiple variants for announcements and CTAs |

## Technical Specifications

### Core Features

- **Full TypeScript Support** - Complete type safety with IntelliSense
- **Theme Integration** - Automatic light/dark mode with CSS variables
- **Responsive Design** - Mobile-first approach with breakpoint optimization
- **Accessibility Compliance** - WCAG 2.1 AA standards with screen reader support
- **Customizable Styling** - CSS variables and prop-based theming system
- **Comprehensive Documentation** - Usage examples, API reference, and best practices

### Integration & Compatibility

- **React 18+** with hooks support
- **Next.js 13+** App Router compatibility
- **shadcn/ui** design system integration
- **Tailwind CSS** utility-first styling
- **npm/pnpm/yarn** package manager support

## Resources

- **[Quick Start Guide](/docs/quick-start)** - Installation and initial setup
- **[API Reference](/docs/interfaces)** - TypeScript interfaces and data structures
- **[Theming Guide](/docs/theming)** - Customization and brand integration
- **[Contributing Guide](/docs/contribution-open-source)** - Development and contribution guidelines
</file>

<file path="content/docs/theming.mdx">
---
title: Theming
description: Customize your components by modifying CSS variables in global.css
---

## How to Change Themes

To change the theme of your components, simply modify the CSS variables in your `global.css` file. The current theme uses these variables:

```css title="src/app/global.css"
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
}
```

## Available Themes

### Blue Theme

```css title="src/app/global.css"
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.6 0.25 253);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0.01 253);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0.01 253);
  --muted-foreground: oklch(0.556 0.01 253);
  --accent: oklch(0.94 0.05 253);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0.01 253);
  --input: oklch(0.922 0.01 253);
  --ring: oklch(0.6 0.25 253);
}

.dark {
  --background: oklch(0.145 0.01 253);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0.01 253);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0.01 253);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.7 0.2 253);
  --primary-foreground: oklch(0.145 0.01 253);
  --secondary: oklch(0.269 0.01 253);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0.01 253);
  --muted-foreground: oklch(0.708 0.01 253);
  --accent: oklch(0.35 0.05 253);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.7 0.2 253);
}
```

### Green Theme

```css title="src/app/global.css"
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.5 0.2 142);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0.01 142);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0.01 142);
  --muted-foreground: oklch(0.556 0.01 142);
  --accent: oklch(0.94 0.05 142);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0.01 142);
  --input: oklch(0.922 0.01 142);
  --ring: oklch(0.5 0.2 142);
}

.dark {
  --background: oklch(0.145 0.01 142);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0.01 142);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0.01 142);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.65 0.15 142);
  --primary-foreground: oklch(0.145 0.01 142);
  --secondary: oklch(0.269 0.01 142);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0.01 142);
  --muted-foreground: oklch(0.708 0.01 142);
  --accent: oklch(0.35 0.05 142);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.65 0.15 142);
}
```

### Orange Theme

```css title="src/app/global.css"
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.6 0.2 42);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0.01 42);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0.01 42);
  --muted-foreground: oklch(0.556 0.01 42);
  --accent: oklch(0.94 0.05 42);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0.01 42);
  --input: oklch(0.922 0.01 42);
  --ring: oklch(0.6 0.2 42);
}

.dark {
  --background: oklch(0.145 0.01 42);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0.01 42);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0.01 42);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.7 0.15 42);
  --primary-foreground: oklch(0.145 0.01 42);
  --secondary: oklch(0.269 0.01 42);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0.01 42);
  --muted-foreground: oklch(0.708 0.01 42);
  --accent: oklch(0.35 0.05 42);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.7 0.15 42);
}
```

### Red Theme

```css title="src/app/global.css"
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.55 0.25 12);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0.01 12);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0.01 12);
  --muted-foreground: oklch(0.556 0.01 12);
  --accent: oklch(0.94 0.05 12);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0.01 12);
  --input: oklch(0.922 0.01 12);
  --ring: oklch(0.55 0.25 12);
}

.dark {
  --background: oklch(0.145 0.01 12);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0.01 12);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0.01 12);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.7 0.2 12);
  --primary-foreground: oklch(0.145 0.01 12);
  --secondary: oklch(0.269 0.01 12);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0.01 12);
  --muted-foreground: oklch(0.708 0.01 12);
  --accent: oklch(0.35 0.05 12);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.7 0.2 12);
}
```

### Cyberpunk Theme

**Fonts**: Orbitron (futuristic sci-fi style) + JetBrains Mono  
**Style**: Dark neon colors with sharp edges and minimal radius

```css title="src/app/global.css"
/* Import fonts */
@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;600;700;800;900&family=JetBrains+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800&display=swap');

/* Apply fonts */
body {
  font-family: 'Orbitron', monospace;
}

code, pre {
  font-family: 'JetBrains Mono', monospace;
}

:root {
  --radius: 0.125rem;
  --background: oklch(0.05 0.02 270);
  --foreground: oklch(0.9 0.15 320);
  --card: oklch(0.08 0.03 270);
  --card-foreground: oklch(0.85 0.12 320);
  --popover: oklch(0.08 0.03 270);
  --popover-foreground: oklch(0.85 0.12 320);
  --primary: oklch(0.7 0.3 320);
  --primary-foreground: oklch(0.05 0.02 270);
  --secondary: oklch(0.15 0.05 270);
  --secondary-foreground: oklch(0.8 0.15 180);
  --muted: oklch(0.12 0.04 270);
  --muted-foreground: oklch(0.6 0.08 270);
  --accent: oklch(0.6 0.25 180);
  --accent-foreground: oklch(0.05 0.02 270);
  --destructive: oklch(0.65 0.3 15);
  --border: oklch(0.2 0.06 270);
  --input: oklch(0.15 0.05 270);
  --ring: oklch(0.7 0.3 320);
}

.dark {
  --background: oklch(0.02 0.01 270);
  --foreground: oklch(0.95 0.2 320);
  --card: oklch(0.05 0.02 270);
  --card-foreground: oklch(0.9 0.15 320);
  --popover: oklch(0.05 0.02 270);
  --popover-foreground: oklch(0.9 0.15 320);
  --primary: oklch(0.8 0.35 320);
  --primary-foreground: oklch(0.02 0.01 270);
  --secondary: oklch(0.1 0.03 270);
  --secondary-foreground: oklch(0.85 0.2 180);
  --muted: oklch(0.08 0.02 270);
  --muted-foreground: oklch(0.65 0.1 270);
  --accent: oklch(0.7 0.3 180);
  --accent-foreground: oklch(0.02 0.01 270);
  --destructive: oklch(0.7 0.35 15);
  --border: oklch(0.15 0.04 270);
  --input: oklch(0.1 0.03 270);
  --ring: oklch(0.8 0.35 320);
}
```

### Elegant Theme

**Fonts**: Playfair Display (sophisticated serif) + Crimson Text + JetBrains Mono  
**Style**: Warm refined tones with elegant typography and rounded corners

```css title="src/app/global.css"
/* Import fonts */
@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:ital,wght@0,400;0,500;0,600;0,700;0,800;0,900;1,400;1,500;1,600;1,700;1,800;1,900&family=Crimson+Text:ital,wght@0,400;0,600;1,400;1,600&family=JetBrains+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800&display=swap');

/* Apply fonts */
body {
  font-family: 'Playfair Display', serif;
}

h1, h2, h3, h4, h5, h6 {
  font-family: 'Playfair Display', serif;
}

p, span {
  font-family: 'Crimson Text', serif;
}

code, pre {
  font-family: 'JetBrains Mono', monospace;
}

:root {
  --radius: 0.75rem;
  --background: oklch(0.98 0.005 60);
  --foreground: oklch(0.15 0.02 30);
  --card: oklch(0.99 0.003 60);
  --card-foreground: oklch(0.15 0.02 30);
  --popover: oklch(0.99 0.003 60);
  --popover-foreground: oklch(0.15 0.02 30);
  --primary: oklch(0.3 0.08 30);
  --primary-foreground: oklch(0.98 0.005 60);
  --secondary: oklch(0.92 0.01 60);
  --secondary-foreground: oklch(0.25 0.05 30);
  --muted: oklch(0.94 0.008 60);
  --muted-foreground: oklch(0.45 0.03 30);
  --accent: oklch(0.88 0.02 45);
  --accent-foreground: oklch(0.2 0.04 30);
  --destructive: oklch(0.5 0.15 15);
  --border: oklch(0.88 0.015 60);
  --input: oklch(0.9 0.012 60);
  --ring: oklch(0.35 0.1 30);
}

.dark {
  --background: oklch(0.08 0.01 30);
  --foreground: oklch(0.95 0.008 60);
  --card: oklch(0.12 0.015 30);
  --card-foreground: oklch(0.92 0.006 60);
  --popover: oklch(0.12 0.015 30);
  --popover-foreground: oklch(0.92 0.006 60);
  --primary: oklch(0.85 0.02 60);
  --primary-foreground: oklch(0.1 0.012 30);
  --secondary: oklch(0.18 0.02 30);
  --secondary-foreground: oklch(0.88 0.008 60);
  --muted: oklch(0.15 0.018 30);
  --muted-foreground: oklch(0.65 0.005 60);
  --accent: oklch(0.25 0.03 45);
  --accent-foreground: oklch(0.9 0.006 60);
  --destructive: oklch(0.65 0.18 15);
  --border: oklch(0.2 0.025 30);
  --input: oklch(0.16 0.02 30);
  --ring: oklch(0.8 0.015 60);
}
```

### Retro Theme

**Fonts**: Fredoka (playful rounded) + Space Grotesk + JetBrains Mono  
**Style**: Warm vintage colors with fun typography and large rounded corners

```css title="src/app/global.css"
/* Import fonts */
@import url('https://fonts.googleapis.com/css2?family=Fredoka:wght@300;400;500;600;700&family=Space+Grotesk:wght@300;400;500;600;700&family=JetBrains+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800&display=swap');

/* Apply fonts */
body {
  font-family: 'Fredoka', cursive;
}

h1, h2, h3, h4, h5, h6 {
  font-family: 'Fredoka', cursive;
}

p, span {
  font-family: 'Space Grotesk', sans-serif;
}

code, pre {
  font-family: 'JetBrains Mono', monospace;
}

:root {
  --radius: 1rem;
  --background: oklch(0.96 0.02 50);
  --foreground: oklch(0.2 0.05 20);
  --card: oklch(0.98 0.015 50);
  --card-foreground: oklch(0.2 0.05 20);
  --popover: oklch(0.98 0.015 50);
  --popover-foreground: oklch(0.2 0.05 20);
  --primary: oklch(0.6 0.2 25);
  --primary-foreground: oklch(0.98 0.015 50);
  --secondary: oklch(0.85 0.08 40);
  --secondary-foreground: oklch(0.25 0.06 20);
  --muted: oklch(0.9 0.04 45);
  --muted-foreground: oklch(0.5 0.04 25);
  --accent: oklch(0.75 0.15 60);
  --accent-foreground: oklch(0.2 0.05 20);
  --destructive: oklch(0.55 0.18 15);
  --border: oklch(0.82 0.06 45);
  --input: oklch(0.85 0.05 45);
  --ring: oklch(0.6 0.2 25);
}

.dark {
  --background: oklch(0.12 0.03 20);
  --foreground: oklch(0.92 0.02 50);
  --card: oklch(0.16 0.04 20);
  --card-foreground: oklch(0.9 0.02 50);
  --popover: oklch(0.16 0.04 20);
  --popover-foreground: oklch(0.9 0.02 50);
  --primary: oklch(0.7 0.22 25);
  --primary-foreground: oklch(0.12 0.03 20);
  --secondary: oklch(0.22 0.05 20);
  --secondary-foreground: oklch(0.85 0.06 40);
  --muted: oklch(0.18 0.04 20);
  --muted-foreground: oklch(0.65 0.03 40);
  --accent: oklch(0.35 0.1 60);
  --accent-foreground: oklch(0.9 0.02 50);
  --destructive: oklch(0.65 0.2 15);
  --border: oklch(0.25 0.05 20);
  --input: oklch(0.2 0.04 20);
  --ring: oklch(0.7 0.22 25);
}
```

### Minimal Theme

**Fonts**: System fonts (native OS fonts for ultimate performance)  
**Style**: Pure black and white with no rounded corners - brutalist design

```css title="src/app/global.css"
/* No font imports needed - uses system fonts */

/* Apply fonts */
body {
  font-family: system-ui, -apple-system, sans-serif;
}

code, pre {
  font-family: ui-monospace, monospace;
}

:root {
  --radius: 0rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0 0 0);
  --card: oklch(0.99 0 0);
  --card-foreground: oklch(0 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0 0 0);
  --primary: oklch(0 0 0);
  --primary-foreground: oklch(1 0 0);
  --secondary: oklch(0.95 0 0);
  --secondary-foreground: oklch(0 0 0);
  --muted: oklch(0.96 0 0);
  --muted-foreground: oklch(0.4 0 0);
  --accent: oklch(0.92 0 0);
  --accent-foreground: oklch(0 0 0);
  --destructive: oklch(0 0 0);
  --border: oklch(0.9 0 0);
  --input: oklch(0.95 0 0);
  --ring: oklch(0 0 0);
}

.dark {
  --background: oklch(0 0 0);
  --foreground: oklch(1 0 0);
  --card: oklch(0.03 0 0);
  --card-foreground: oklch(1 0 0);
  --popover: oklch(0 0 0);
  --popover-foreground: oklch(1 0 0);
  --primary: oklch(1 0 0);
  --primary-foreground: oklch(0 0 0);
  --secondary: oklch(0.1 0 0);
  --secondary-foreground: oklch(1 0 0);
  --muted: oklch(0.08 0 0);
  --muted-foreground: oklch(0.7 0 0);
  --accent: oklch(0.15 0 0);
  --accent-foreground: oklch(1 0 0);
  --destructive: oklch(0.8 0 0);
  --border: oklch(0.2 0 0);
  --input: oklch(0.1 0 0);
  --ring: oklch(1 0 0);
}
```

### Neon Theme

**Fonts**: Space Grotesk (modern geometric) + JetBrains Mono  
**Style**: Vibrant neon colors with electric purple/cyan accents

```css title="src/app/global.css"
/* Import fonts */
@import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;500;600;700&family=JetBrains+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800&display=swap');

/* Apply fonts */
body {
  font-family: 'Space Grotesk', sans-serif;
}

code, pre {
  font-family: 'JetBrains Mono', monospace;
}

:root {
  --radius: 0.5rem;
  --background: oklch(0.08 0.01 270);
  --foreground: oklch(0.95 0.15 300);
  --card: oklch(0.12 0.02 270);
  --card-foreground: oklch(0.9 0.12 300);
  --popover: oklch(0.12 0.02 270);
  --popover-foreground: oklch(0.9 0.12 300);
  --primary: oklch(0.75 0.35 300);
  --primary-foreground: oklch(0.08 0.01 270);
  --secondary: oklch(0.18 0.03 180);
  --secondary-foreground: oklch(0.85 0.2 180);
  --muted: oklch(0.15 0.02 270);
  --muted-foreground: oklch(0.65 0.08 300);
  --accent: oklch(0.7 0.3 180);
  --accent-foreground: oklch(0.08 0.01 270);
  --destructive: oklch(0.7 0.35 15);
  --border: oklch(0.25 0.05 270);
  --input: oklch(0.2 0.03 270);
  --ring: oklch(0.75 0.35 300);
}

.dark {
  --background: oklch(0.04 0.005 270);
  --foreground: oklch(0.98 0.2 300);
  --card: oklch(0.08 0.01 270);
  --card-foreground: oklch(0.95 0.15 300);
  --popover: oklch(0.08 0.01 270);
  --popover-foreground: oklch(0.95 0.15 300);
  --primary: oklch(0.8 0.4 300);
  --primary-foreground: oklch(0.04 0.005 270);
  --secondary: oklch(0.12 0.02 180);
  --secondary-foreground: oklch(0.9 0.25 180);
  --muted: oklch(0.1 0.01 270);
  --muted-foreground: oklch(0.7 0.1 300);
  --accent: oklch(0.75 0.35 180);
  --accent-foreground: oklch(0.04 0.005 270);
  --destructive: oklch(0.75 0.4 15);
  --border: oklch(0.2 0.03 270);
  --input: oklch(0.15 0.02 270);
  --ring: oklch(0.8 0.4 300);
}
```

### Sunset Theme

**Fonts**: Inter + Fira Code (clean and professional)  
**Style**: Warm orange/red gradients like a sunset

```css title="src/app/global.css"
/* Import fonts */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Fira+Code:wght@300;400;500;600;700&display=swap');

/* Apply fonts */
body {
  font-family: 'Inter', sans-serif;
}

code, pre {
  font-family: 'Fira Code', monospace;
}

:root {
  --radius: 0.75rem;
  --background: oklch(0.97 0.02 35);
  --foreground: oklch(0.2 0.05 15);
  --card: oklch(0.99 0.01 35);
  --card-foreground: oklch(0.2 0.05 15);
  --popover: oklch(0.99 0.01 35);
  --popover-foreground: oklch(0.2 0.05 15);
  --primary: oklch(0.65 0.25 25);
  --primary-foreground: oklch(0.99 0.01 35);
  --secondary: oklch(0.85 0.08 45);
  --secondary-foreground: oklch(0.25 0.06 15);
  --muted: oklch(0.92 0.03 40);
  --muted-foreground: oklch(0.5 0.04 20);
  --accent: oklch(0.7 0.2 50);
  --accent-foreground: oklch(0.2 0.05 15);
  --destructive: oklch(0.6 0.2 15);
  --border: oklch(0.88 0.05 40);
  --input: oklch(0.9 0.04 40);
  --ring: oklch(0.65 0.25 25);
}

.dark {
  --background: oklch(0.15 0.03 15);
  --foreground: oklch(0.92 0.02 35);
  --card: oklch(0.18 0.04 15);
  --card-foreground: oklch(0.9 0.02 35);
  --popover: oklch(0.18 0.04 15);
  --popover-foreground: oklch(0.9 0.02 35);
  --primary: oklch(0.75 0.3 25);
  --primary-foreground: oklch(0.15 0.03 15);
  --secondary: oklch(0.25 0.05 15);
  --secondary-foreground: oklch(0.8 0.06 45);
  --muted: oklch(0.2 0.04 15);
  --muted-foreground: oklch(0.65 0.03 35);
  --accent: oklch(0.4 0.15 50);
  --accent-foreground: oklch(0.9 0.02 35);
  --destructive: oklch(0.7 0.25 15);
  --border: oklch(0.3 0.06 15);
  --input: oklch(0.22 0.04 15);
  --ring: oklch(0.75 0.3 25);
}
```

### Ocean Theme

**Fonts**: Poppins + Source Code Pro (friendly and readable)  
**Style**: Deep blue tones with aquatic feel

```css title="src/app/global.css"
/* Import fonts */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&family=Source+Code+Pro:wght@300;400;500;600;700&display=swap');

/* Apply fonts */
body {
  font-family: 'Poppins', sans-serif;
}

code, pre {
  font-family: 'Source Code Pro', monospace;
}

:root {
  --radius: 0.5rem;
  --background: oklch(0.98 0.01 220);
  --foreground: oklch(0.18 0.02 200);
  --card: oklch(0.99 0.005 220);
  --card-foreground: oklch(0.18 0.02 200);
  --popover: oklch(0.99 0.005 220);
  --popover-foreground: oklch(0.18 0.02 200);
  --primary: oklch(0.55 0.2 210);
  --primary-foreground: oklch(0.99 0.005 220);
  --secondary: oklch(0.92 0.02 220);
  --secondary-foreground: oklch(0.25 0.03 200);
  --muted: oklch(0.94 0.015 220);
  --muted-foreground: oklch(0.45 0.02 200);
  --accent: oklch(0.85 0.05 190);
  --accent-foreground: oklch(0.2 0.02 200);
  --destructive: oklch(0.55 0.18 15);
  --border: oklch(0.88 0.02 220);
  --input: oklch(0.9 0.015 220);
  --ring: oklch(0.55 0.2 210);
}

.dark {
  --background: oklch(0.1 0.02 200);
  --foreground: oklch(0.95 0.01 220);
  --card: oklch(0.14 0.025 200);
  --card-foreground: oklch(0.92 0.01 220);
  --popover: oklch(0.14 0.025 200);
  --popover-foreground: oklch(0.92 0.01 220);
  --primary: oklch(0.7 0.25 210);
  --primary-foreground: oklch(0.1 0.02 200);
  --secondary: oklch(0.2 0.03 200);
  --secondary-foreground: oklch(0.85 0.02 220);
  --muted: oklch(0.16 0.025 200);
  --muted-foreground: oklch(0.65 0.01 220);
  --accent: oklch(0.3 0.08 190);
  --accent-foreground: oklch(0.9 0.01 220);
  --destructive: oklch(0.65 0.2 15);
  --border: oklch(0.25 0.04 200);
  --input: oklch(0.18 0.03 200);
  --ring: oklch(0.7 0.25 210);
}
```

### Forest Theme

**Fonts**: Merriweather (classic serif) + Roboto Mono  
**Style**: Natural green tones with earthy feel

```css title="src/app/global.css"
/* Import fonts */
@import url('https://fonts.googleapis.com/css2?family=Merriweather:wght@300;400;700;900&family=Roboto+Mono:wght@300;400;500;600;700&display=swap');

/* Apply fonts */
body {
  font-family: 'Merriweather', serif;
}

code, pre {
  font-family: 'Roboto Mono', monospace;
}

:root {
  --radius: 0.625rem;
  --background: oklch(0.97 0.01 120);
  --foreground: oklch(0.2 0.03 90);
  --card: oklch(0.98 0.008 120);
  --card-foreground: oklch(0.2 0.03 90);
  --popover: oklch(0.98 0.008 120);
  --popover-foreground: oklch(0.2 0.03 90);
  --primary: oklch(0.4 0.15 130);
  --primary-foreground: oklch(0.98 0.008 120);
  --secondary: oklch(0.9 0.02 110);
  --secondary-foreground: oklch(0.25 0.04 90);
  --muted: oklch(0.93 0.015 120);
  --muted-foreground: oklch(0.5 0.02 100);
  --accent: oklch(0.82 0.06 140);
  --accent-foreground: oklch(0.2 0.03 90);
  --destructive: oklch(0.55 0.18 15);
  --border: oklch(0.85 0.03 120);
  --input: oklch(0.88 0.025 120);
  --ring: oklch(0.4 0.15 130);
}

.dark {
  --background: oklch(0.12 0.02 90);
  --foreground: oklch(0.92 0.01 120);
  --card: oklch(0.16 0.025 90);
  --card-foreground: oklch(0.9 0.01 120);
  --popover: oklch(0.16 0.025 90);
  --popover-foreground: oklch(0.9 0.01 120);
  --primary: oklch(0.65 0.2 130);
  --primary-foreground: oklch(0.12 0.02 90);
  --secondary: oklch(0.22 0.03 90);
  --secondary-foreground: oklch(0.85 0.02 110);
  --muted: oklch(0.18 0.025 90);
  --muted-foreground: oklch(0.65 0.01 120);
  --accent: oklch(0.35 0.1 140);
  --accent-foreground: oklch(0.9 0.01 120);
  --destructive: oklch(0.65 0.2 15);
  --border: oklch(0.28 0.04 90);
  --input: oklch(0.2 0.03 90);
  --ring: oklch(0.65 0.2 130);
}
```

### Lavender Theme

**Fonts**: Nunito (soft and rounded) + Cascadia Code  
**Style**: Soft purple/pink with gentle gradients

```css title="src/app/global.css"
/* Import fonts */
@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;500;600;700;800&display=swap');

/* Apply fonts */
body {
  font-family: 'Nunito', sans-serif;
}

code, pre {
  font-family: 'Cascadia Code', monospace;
}

:root {
  --radius: 0.875rem;
  --background: oklch(0.98 0.01 280);
  --foreground: oklch(0.2 0.02 260);
  --card: oklch(0.99 0.008 280);
  --card-foreground: oklch(0.2 0.02 260);
  --popover: oklch(0.99 0.008 280);
  --popover-foreground: oklch(0.2 0.02 260);
  --primary: oklch(0.6 0.18 280);
  --primary-foreground: oklch(0.99 0.008 280);
  --secondary: oklch(0.92 0.02 290);
  --secondary-foreground: oklch(0.25 0.03 260);
  --muted: oklch(0.94 0.015 280);
  --muted-foreground: oklch(0.5 0.02 270);
  --accent: oklch(0.85 0.05 300);
  --accent-foreground: oklch(0.2 0.02 260);
  --destructive: oklch(0.55 0.18 15);
  --border: oklch(0.88 0.02 280);
  --input: oklch(0.9 0.015 280);
  --ring: oklch(0.6 0.18 280);
}

.dark {
  --background: oklch(0.1 0.015 260);
  --foreground: oklch(0.95 0.01 280);
  --card: oklch(0.14 0.02 260);
  --card-foreground: oklch(0.92 0.01 280);
  --popover: oklch(0.14 0.02 260);
  --popover-foreground: oklch(0.92 0.01 280);
  --primary: oklch(0.75 0.22 280);
  --primary-foreground: oklch(0.1 0.015 260);
  --secondary: oklch(0.2 0.025 260);
  --secondary-foreground: oklch(0.85 0.02 290);
  --muted: oklch(0.16 0.02 260);
  --muted-foreground: oklch(0.65 0.01 280);
  --accent: oklch(0.3 0.08 300);
  --accent-foreground: oklch(0.9 0.01 280);
  --destructive: oklch(0.65 0.2 15);
  --border: oklch(0.25 0.03 260);
  --input: oklch(0.18 0.025 260);
  --ring: oklch(0.75 0.22 280);
}
```

### Midnight Theme

**Fonts**: IBM Plex Sans/Mono (technical and clean)  
**Style**: Deep navy with subtle blue accents

```css title="src/app/global.css"
/* Import fonts */
@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:wght@300;400;500;600;700&family=IBM+Plex+Mono:wght@300;400;500;600;700&display=swap');

/* Apply fonts */
body {
  font-family: 'IBM Plex Sans', sans-serif;
}

code, pre {
  font-family: 'IBM Plex Mono', monospace;
}

:root {
  --radius: 0.375rem;
  --background: oklch(0.95 0.005 240);
  --foreground: oklch(0.15 0.01 220);
  --card: oklch(0.97 0.003 240);
  --card-foreground: oklch(0.15 0.01 220);
  --popover: oklch(0.97 0.003 240);
  --popover-foreground: oklch(0.15 0.01 220);
  --primary: oklch(0.25 0.05 240);
  --primary-foreground: oklch(0.97 0.003 240);
  --secondary: oklch(0.88 0.01 240);
  --secondary-foreground: oklch(0.2 0.015 220);
  --muted: oklch(0.9 0.008 240);
  --muted-foreground: oklch(0.45 0.008 230);
  --accent: oklch(0.82 0.02 250);
  --accent-foreground: oklch(0.15 0.01 220);
  --destructive: oklch(0.5 0.15 15);
  --border: oklch(0.85 0.01 240);
  --input: oklch(0.87 0.008 240);
  --ring: oklch(0.25 0.05 240);
}

.dark {
  --background: oklch(0.08 0.008 220);
  --foreground: oklch(0.95 0.005 240);
  --card: oklch(0.12 0.01 220);
  --card-foreground: oklch(0.92 0.005 240);
  --popover: oklch(0.12 0.01 220);
  --popover-foreground: oklch(0.92 0.005 240);
  --primary: oklch(0.8 0.08 240);
  --primary-foreground: oklch(0.08 0.008 220);
  --secondary: oklch(0.18 0.015 220);
  --secondary-foreground: oklch(0.85 0.01 240);
  --muted: oklch(0.15 0.012 220);
  --muted-foreground: oklch(0.65 0.005 240);
  --accent: oklch(0.25 0.03 250);
  --accent-foreground: oklch(0.9 0.005 240);
  --destructive: oklch(0.65 0.18 15);
  --border: oklch(0.22 0.02 220);
  --input: oklch(0.16 0.012 220);
  --ring: oklch(0.8 0.08 240);
}
```


## Common Issues & Troubleshooting Section

### 1. CSS Import Order Error

**Error:** `@import rules must precede all rules aside from @charset and @layer statements`

**Problem:** Font imports placed after other CSS rules.

**Solution:** Always place ALL `@import` statements at the very beginning of your CSS file:

```css
/* ✅ CORRECT - All imports at the top */
@import 'tailwindcss';
@import 'fumadocs-ui/css/vitepress.css';
@import 'fumadocs-ui/css/preset.css';
@import "tw-animate-css";
@import url('https://fonts.googleapis.com/css2?family=...');

/* Then your other CSS rules */
@custom-variant dark (&:is(.dark *));
@theme inline { /* ... */ }
```

```css
/* ❌ WRONG - Import after other rules */
@theme inline { /* ... */ }
@import url('https://fonts.googleapis.com/css2?family=...'); /* This will fail */
```

### 2. Unknown Utility Class Errors

**Error:** `Cannot apply unknown utility class 'border-border'`

**Problem:** Using custom utilities without proper Tailwind configuration.

**Solutions:**

**Option A: Remove problematic utilities (Quick Fix)**
```css
@layer base {
  * {
    @apply outline-ring/50; /* Remove border-border */
  }
  body {
    @apply bg-background text-foreground;
  }
}
```

**Option B: Configure Tailwind for custom utilities**
Add to your `tailwind.config.js`:
```js
module.exports = {
  theme: {
    extend: {
      colors: {
        border: "hsl(var(--border))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        // Add other custom colors as needed
      }
    }
  }
}
```

## Additional Resources
- [ShadCN Theming](https://ui.shadcn.com/docs/theming)
- [CSS @import MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/@import)
- [Tailwind CSS Custom Colors](https://tailwindcss.com/docs/customizing-colors)
</file>

<file path="public/logo/logo-dodo.svg">
<svg width="43" height="42" viewBox="0 0 43 42" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path
        d="M21.0101 -0.00671387C9.40515 -0.00671387 -0.00317383 9.39863 -0.00317383 20.9998C-0.00317383 32.6011 9.40515 42.0064 21.0101 42.0064C32.615 42.0064 42.0233 32.6011 42.0233 20.9998C42.0233 9.39863 32.615 -0.00671387 21.0101 -0.00671387Z"
        fill="#C6FE1E" />
    <mask id="mask0_433_167756" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="6" y="9"
        width="32" height="27">
        <path d="M37.8206 9.44624H6.30078V35.7044H37.8206V9.44624Z" fill="white" />
    </mask>
    <g mask="url(#mask0_433_167756)">
        <path
            d="M18.5025 15.5044H18.4885C17.62 15.2551 16.701 15.7537 16.4068 16.5771C16.0818 17.4622 16.5973 18.4761 17.5079 18.7562C19.7381 19.3892 20.6963 16.1934 18.5025 15.5044Z"
            fill="#0D0D0D" />
        <path
            d="M37.5098 20.0222C34.6379 13.7342 25.4762 16.3362 24.63 14.6893C22.1505 10.7989 17.522 8.61421 12.518 9.74016C11.7475 9.43207 9.09427 9.34804 7.37959 10.4264L8.41344 10.8829C8.49189 10.9165 8.46948 10.9081 8.58435 10.9501C9.05224 11.1266 8.97099 11.0762 8.63478 11.261C7.86429 11.712 6.90329 12.2357 6.30371 13.0228C6.32893 13.0592 7.62334 13.3701 7.62334 13.3701C7.64576 13.3757 7.88671 13.4009 7.83347 13.5073C3.60001 20.1902 10.7389 30.2762 14.2047 35.7043H24.2378C22.6884 32.9314 20.9177 29.1474 21.5229 26.579C21.6322 26.1141 21.7722 25.5231 22.3438 25.4447C23.7251 25.2234 25.5742 25.243 26.8911 25.0946C26.8911 25.0946 26.8976 25.0946 26.9107 25.0946C27.1909 25.0806 34.0496 24.2095 35.6914 28.4836C35.8315 28.8757 36.1537 28.6209 36.2826 28.3632C37.507 25.9292 38.2971 22.0976 37.5154 20.025L37.5098 20.0222ZM26.4372 17.9579C25.9553 18.8178 25.6275 19.9353 25.5434 20.9101C25.4986 21.529 25.563 22.1396 25.6247 22.7586C25.6583 23.1003 25.6611 23.5317 25.3865 23.7557C25.1484 23.9574 24.7533 23.977 24.3555 24.005C22.4026 23.9966 17.6396 24.005 15.8045 22.7558L15.7933 22.7474C13.1232 21.1201 11.6943 17.4454 13.2801 14.5913C13.7928 13.6222 14.737 12.992 15.8129 12.7539C17.197 12.4374 18.7211 12.6727 19.9567 13.3197C20.461 13.5746 21.0634 13.9107 21.5229 14.2972C22.4335 15.0926 23.2124 15.9189 24.4059 16.1738C24.9551 16.3306 25.5266 16.3082 26.0758 16.4202C27.104 16.6667 26.8462 17.2521 26.4344 17.9523L26.4372 17.9579Z"
            fill="#0D0D0D" />
    </g>
</svg>
</file>

<file path="public/logo/Logo.svg">
<svg width="240" height="44" viewBox="0 0 240 44" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M26.5419 33.649C23.0419 32.349 19.4419 32.149 16.1419 33.049C13.8419 33.649 11.6419 34.849 9.64188 36.349L8.24185 37.549L7.84186 37.949L8.74185 38.749C8.84185 38.749 8.84186 38.849 8.94186 38.949C9.14186 39.149 9.34188 39.249 9.64188 39.449L10.2419 39.849L10.8419 39.349C10.9419 39.249 11.1419 39.049 11.3419 38.949C13.1419 37.449 15.1419 36.449 17.2419 35.949C19.9419 35.249 22.8419 35.349 25.7419 36.449C28.1419 37.349 33.0419 38.449 38.9419 35.949L39.1419 35.849L39.4419 35.549C39.4419 35.449 39.5419 35.449 39.6419 35.349C40.1419 34.749 40.6419 34.149 41.0419 33.449L43.0419 30.349L39.8419 32.149C35.1419 34.749 30.8419 35.249 26.5419 33.649Z" fill="white"/>
<path d="M12.8419 22.849C15.5419 22.149 18.4419 22.249 21.3419 23.349C24.5419 24.549 32.7419 26.249 41.9419 17.949L43.4419 16.449L43.5419 16.349L43.9419 15.949L43.7419 15.449C43.6419 15.049 43.4419 14.549 43.2419 14.049L42.7419 12.649L41.7419 13.649C41.6419 13.849 41.4419 13.949 41.2419 14.149C36.8419 18.649 30.0419 23.249 22.2419 20.449C18.7419 19.149 15.1419 18.949 11.8419 19.849C8.64186 20.749 5.84185 22.449 3.24185 24.849V24.749L1.74185 26.349C1.74185 26.449 1.64187 26.449 1.54187 26.549L1.24185 26.849L1.34186 27.249C1.44186 27.749 1.64185 28.249 1.74185 28.749L2.34186 30.349L3.34186 29.049C3.44186 28.849 3.64185 28.749 3.74185 28.549C5.84185 26.649 8.74186 23.949 12.8419 22.849Z" fill="white"/>
<path d="M3.14188 21.049C5.44188 18.649 8.04186 17.149 10.8419 16.349C13.5419 15.649 16.4419 15.749 19.3419 16.849C28.3419 20.149 36.1419 14.749 39.5419 11.849L40.8419 10.549L41.3419 10.149L40.9419 9.54901C40.6419 9.24901 40.4419 8.84901 40.1419 8.44901L39.5419 7.64899L38.8419 8.349C38.7419 8.449 38.5419 8.64899 38.4419 8.74899C34.2419 12.749 27.7419 16.849 20.3419 14.049C16.8419 12.749 13.2419 12.549 9.94186 13.449C7.84186 14.049 5.84186 15.049 3.84186 16.349L1.74185 18.049C1.54185 18.249 1.44185 18.349 1.24185 18.549L1.04187 18.749V19.049C0.94187 19.749 0.941858 20.449 0.841858 21.049L0.741852 23.549L2.44186 21.749C2.64186 21.549 2.84188 21.249 3.14188 21.049Z" fill="white"/>
<path d="M29.4419 40.449L29.2419 41.049L29.4419 40.449C29.1419 40.349 28.9419 40.249 28.6419 40.149C25.1419 38.849 21.5419 38.649 18.2419 39.549C17.5419 39.749 16.8419 39.949 16.1419 40.249L13.7419 41.349L13.1419 41.649L15.1419 42.349C15.7419 42.549 16.3419 42.749 16.9419 42.949L17.2419 43.049L17.5419 42.949C17.8419 42.849 18.1419 42.649 18.4419 42.649C18.6419 42.649 18.8419 42.549 19.0419 42.449C21.4419 41.849 24.0419 41.849 26.8419 42.749C27.1419 42.849 27.3419 42.949 27.6419 43.049L28.1419 43.249L28.4419 43.149C29.1419 42.949 29.9419 42.749 30.5419 42.449L33.3419 41.449L30.4419 40.749C30.1419 40.649 29.7419 40.549 29.4419 40.449Z" fill="white"/>
<path d="M44.7419 19.749L43.2419 21.249C43.0419 21.449 42.8419 21.649 42.6419 21.849C38.5419 25.749 31.9419 29.949 24.5419 27.149C21.0419 25.849 17.4419 25.649 14.1419 26.549C11.0419 27.449 8.24185 29.049 5.74185 31.449L4.44186 32.849L4.04187 33.349L4.44186 33.949C4.74186 34.349 4.94188 34.649 5.14188 35.049L5.74185 35.949L6.44186 35.049C6.54186 34.949 6.74186 34.749 6.84186 34.649C9.24186 32.049 11.8419 30.449 14.8419 29.649C17.5419 28.949 20.4419 29.049 23.3419 30.149C25.8419 31.049 28.4419 31.349 31.0419 31.049C35.6419 30.549 40.2419 27.949 43.6419 25.049C43.8419 24.849 44.0419 24.749 44.2419 24.549L44.5419 24.249V23.949C44.5419 23.349 44.6419 22.649 44.6419 22.049L44.7419 19.749Z" fill="white"/>
<path d="M6.74185 10.549L6.44186 9.94901L6.74185 10.549C7.34185 10.249 8.04188 10.049 8.64188 9.849C11.3419 9.149 14.2419 9.249 17.1419 10.349C19.0419 11.049 20.9419 11.349 23.0419 11.349C27.2419 11.349 31.4419 9.84901 35.3419 6.94901L36.8419 5.74899L37.3419 5.349L36.4419 4.64899C36.1419 4.34899 35.7419 4.049 35.3419 3.849L34.7419 3.44901L34.2419 3.849C34.0419 3.949 33.9419 4.14899 33.7419 4.24899C28.4419 8.24899 23.1419 9.34901 18.1419 7.44901C14.5419 6.14901 10.9419 5.84901 7.34186 6.94901C7.04186 7.04901 6.74186 7.14899 6.34186 7.24899L6.14188 7.349L5.84186 7.64899C5.84186 7.74899 5.74188 7.749 5.64188 7.849C5.24188 8.449 4.74186 8.94901 4.34186 9.54901L2.44186 12.449L5.54187 10.849C6.04187 10.849 6.44185 10.649 6.74185 10.549Z" fill="white"/>
<path d="M14.9419 3.74899L15.2419 3.849C16.5419 4.349 18.5419 4.849 21.0419 4.849C23.6419 4.849 26.1419 4.24899 28.6419 3.24899L31.7419 1.74899L29.6419 1.04901C29.0419 0.849011 28.4419 0.649011 27.7419 0.549011H27.4419L27.1419 0.648987C26.8419 0.748987 26.5419 0.949011 26.2419 1.04901C23.2419 2.14901 20.2419 2.34901 17.3419 1.54901C17.0419 1.44901 16.7419 1.34899 16.4419 1.24899L16.1419 1.14899L15.8419 1.24899C15.2419 1.44899 14.6419 1.64901 14.0419 1.94901L11.7419 2.94901L14.1419 3.64899C14.3419 3.54899 14.6419 3.64899 14.9419 3.74899Z" fill="white"/>
<path d="M64.2359 33.899V9.69H73.3949C74.1689 9.69 74.9859 9.733 75.8459 9.819C76.7059 9.87633 77.5372 10.0197 78.3399 10.249C79.1712 10.4783 79.9165 10.8367 80.5759 11.324C81.2352 11.7827 81.7512 12.399 82.1239 13.173C82.5252 13.947 82.7259 14.9217 82.7259 16.097C82.7259 17.0143 82.5395 17.8743 82.1669 18.677C81.8229 19.451 81.1779 20.0817 80.2319 20.569C79.3145 21.0563 77.9672 21.3287 76.1899 21.386V21.558C78.2252 21.5867 79.7875 21.8733 80.8769 22.418C81.9949 22.9627 82.7689 23.6793 83.1989 24.568C83.6289 25.428 83.8439 26.3883 83.8439 27.449C83.8439 28.653 83.6289 29.6563 83.1989 30.459C82.7689 31.233 82.1955 31.8493 81.4789 32.308C80.7622 32.7667 79.9595 33.1107 79.0709 33.34C78.1822 33.5693 77.2649 33.727 76.3189 33.813C75.4015 33.8703 74.5415 33.899 73.7389 33.899H64.2359ZM67.7619 30.975H73.4379C74.6705 30.975 75.7885 30.9033 76.7919 30.76C77.7952 30.588 78.5979 30.2153 79.1999 29.642C79.8305 29.0687 80.1459 28.1943 80.1459 27.019C80.1459 25.7577 79.8162 24.8403 79.1569 24.267C78.5262 23.665 77.6805 23.278 76.6199 23.106C75.5592 22.9053 74.3839 22.805 73.0939 22.805H67.7619V30.975ZM67.7619 20.01H72.9649C74.1402 20.01 75.1865 19.9383 76.1039 19.795C77.0499 19.6517 77.7952 19.3363 78.3399 18.849C78.8845 18.333 79.1569 17.5303 79.1569 16.441C79.1569 15.237 78.8702 14.377 78.2969 13.861C77.7235 13.3163 76.9639 12.9867 76.0179 12.872C75.1005 12.7287 74.0972 12.657 73.0079 12.657H67.7619V20.01ZM87.5345 33.899V16.312H91.1035V33.899H87.5345ZM89.3405 13.861C88.5091 13.861 87.9358 13.646 87.6205 13.216C87.3338 12.786 87.1905 12.2843 87.1905 11.711C87.1905 11.1663 87.3338 10.6933 87.6205 10.292C87.9358 9.862 88.5091 9.647 89.3405 9.647C90.1718 9.647 90.7165 9.862 90.9745 10.292C91.2611 10.6933 91.4045 11.1663 91.4045 11.711C91.4045 12.2843 91.2611 12.786 90.9745 13.216C90.7165 13.646 90.1718 13.861 89.3405 13.861ZM95.386 33.899V9.69H98.912V33.899H95.386ZM103.197 33.899V9.69H106.723V33.899H103.197ZM111.05 33.899V16.312H114.619V33.899H111.05ZM112.856 13.861C112.025 13.861 111.451 13.646 111.136 13.216C110.849 12.786 110.706 12.2843 110.706 11.711C110.706 11.1663 110.849 10.6933 111.136 10.292C111.451 9.862 112.025 9.647 112.856 9.647C113.687 9.647 114.232 9.862 114.49 10.292C114.777 10.6933 114.92 11.1663 114.92 11.711C114.92 12.2843 114.777 12.786 114.49 13.216C114.232 13.646 113.687 13.861 112.856 13.861ZM118.386 33.899V16.312H121.439L122.041 20.397H122.127C122.155 20.2823 122.27 20.01 122.471 19.58C122.671 19.15 123.001 18.6913 123.46 18.204C123.918 17.688 124.535 17.2437 125.309 16.871C126.083 16.4983 127.057 16.312 128.233 16.312C129.465 16.312 130.469 16.5127 131.243 16.914C132.045 17.2867 132.676 17.8027 133.135 18.462C133.622 19.0927 133.966 19.8093 134.167 20.612C134.367 21.386 134.496 22.1887 134.554 23.02C134.611 23.8227 134.64 24.5823 134.64 25.299V33.899H131.157V25.256C131.157 24.1667 131.042 23.192 130.813 22.332C130.583 21.4433 130.168 20.7553 129.566 20.268C128.964 19.752 128.061 19.494 126.857 19.494C125.653 19.494 124.692 19.7807 123.976 20.354C123.288 20.9273 122.786 21.6727 122.471 22.59C122.184 23.4787 122.041 24.4533 122.041 25.514V33.899H118.386ZM142.597 41.424V38.07H150.853V30.373H150.767C150.71 30.4877 150.566 30.76 150.337 31.19C150.108 31.5913 149.749 32.0357 149.262 32.523C148.803 33.0103 148.187 33.4403 147.413 33.813C146.668 34.157 145.736 34.329 144.618 34.329C142.927 34.329 141.522 33.942 140.404 33.168C139.286 32.394 138.455 31.3333 137.91 29.986C137.394 28.6387 137.136 27.0907 137.136 25.342C137.136 23.536 137.408 21.9593 137.953 20.612C138.498 19.236 139.329 18.1753 140.447 17.43C141.565 16.6847 142.97 16.312 144.661 16.312C145.808 16.312 146.768 16.4983 147.542 16.871C148.316 17.2437 148.918 17.688 149.348 18.204C149.807 18.72 150.136 19.193 150.337 19.623C150.566 20.053 150.695 20.3253 150.724 20.44H150.81V16.312H154.508V36.135C154.508 37.3963 154.35 38.414 154.035 39.188C153.72 39.962 153.218 40.521 152.53 40.865C151.871 41.2377 150.982 41.424 149.864 41.424H142.597ZM145.607 31.233C146.725 31.233 147.671 30.9893 148.445 30.502C149.219 30.0147 149.792 29.3267 150.165 28.438C150.566 27.5493 150.767 26.5173 150.767 25.342C150.767 24.1953 150.581 23.1777 150.208 22.289C149.835 21.4003 149.276 20.7267 148.531 20.268C147.814 19.7807 146.897 19.537 145.779 19.537C144.518 19.537 143.5 19.8093 142.726 20.354C141.981 20.8987 141.436 21.6153 141.092 22.504C140.777 23.3927 140.619 24.3387 140.619 25.342C140.619 26.3453 140.762 27.3057 141.049 28.223C141.364 29.1117 141.88 29.8427 142.597 30.416C143.342 30.9607 144.346 31.233 145.607 31.233ZM177.873 34.415C176.555 34.415 175.279 34.2573 174.046 33.942C172.814 33.6267 171.696 33.1393 170.692 32.48C169.689 31.8207 168.886 30.975 168.284 29.943C167.682 28.8823 167.367 27.621 167.338 26.159H170.95C170.95 26.245 170.979 26.4743 171.036 26.847C171.094 27.2197 171.237 27.6497 171.466 28.137C171.724 28.6243 172.097 29.0973 172.584 29.556C173.1 30.0147 173.803 30.4017 174.691 30.717C175.609 31.0037 176.755 31.147 178.131 31.147C179.192 31.147 180.081 31.0323 180.797 30.803C181.514 30.5737 182.087 30.2727 182.517 29.9C182.947 29.5273 183.248 29.1403 183.42 28.739C183.621 28.3377 183.721 27.9793 183.721 27.664C183.721 26.7753 183.435 26.0587 182.861 25.514C182.317 24.9693 181.571 24.5393 180.625 24.224C179.679 23.88 178.633 23.579 177.486 23.321C176.368 23.0343 175.25 22.7333 174.132 22.418C173.014 22.074 171.982 21.6297 171.036 21.085C170.119 20.5403 169.402 19.838 168.886 18.978C168.37 18.0893 168.141 16.957 168.198 15.581C168.284 14.2623 168.743 13.13 169.574 12.184C170.406 11.238 171.538 10.5213 172.971 10.034C174.433 9.518 176.096 9.26 177.959 9.26C179.651 9.26 181.199 9.561 182.603 10.163C184.037 10.765 185.183 11.668 186.043 12.872C186.932 14.0473 187.362 15.5523 187.333 17.387H183.85C183.879 16.3837 183.678 15.581 183.248 14.979C182.818 14.3483 182.259 13.861 181.571 13.517C180.912 13.173 180.224 12.9437 179.507 12.829C178.791 12.6857 178.146 12.614 177.572 12.614C175.967 12.614 174.634 12.915 173.573 13.517C172.541 14.0903 172.011 14.9073 171.982 15.968C171.954 16.8853 172.226 17.6163 172.799 18.161C173.373 18.7057 174.132 19.1357 175.078 19.451C176.024 19.7663 177.071 20.053 178.217 20.311C179.364 20.569 180.496 20.8557 181.614 21.171C182.732 21.4863 183.75 21.9163 184.667 22.461C185.613 22.977 186.344 23.6793 186.86 24.568C187.405 25.4567 187.649 26.6033 187.591 28.008C187.534 29.3553 187.075 30.502 186.215 31.448C185.355 32.394 184.209 33.125 182.775 33.641C181.342 34.157 179.708 34.415 177.873 34.415ZM195.72 30.889C196.838 30.889 197.698 30.889 198.3 30.889C198.902 30.889 199.346 30.889 199.633 30.889C201.181 30.889 202.571 30.7743 203.804 30.545C205.037 30.287 206.097 29.8283 206.986 29.169C207.875 28.481 208.548 27.5493 209.007 26.374C209.494 25.17 209.738 23.622 209.738 21.73C209.738 19.7233 209.322 18.0607 208.491 16.742C207.66 15.4233 206.484 14.4343 204.965 13.775C203.474 13.1157 201.697 12.786 199.633 12.786H195.72V30.889ZM213.522 21.773C213.522 24.955 212.906 27.4347 211.673 29.212C210.469 30.9607 208.749 32.179 206.513 32.867C204.306 33.555 201.697 33.899 198.687 33.899C198.228 33.899 197.497 33.899 196.494 33.899C195.491 33.899 194.043 33.899 192.151 33.899V9.69C194.158 9.69 195.648 9.69 196.623 9.69C197.598 9.69 198.286 9.69 198.687 9.69C201.697 9.69 204.306 10.1487 206.513 11.066C208.749 11.9547 210.469 13.2877 211.673 15.065C212.906 16.8423 213.522 19.0783 213.522 21.773ZM221.334 25.987V21.902L233.245 9.69H237.889V10.163L221.334 25.987ZM217.937 33.899V9.69H221.506V33.899H217.937ZM234.277 33.899L224.645 21.214L227.225 18.677L238.405 33.426V33.899H234.277Z" fill="white"/>
</svg>
</file>

<file path="public/r/all.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "all",
  "type": "registry:block",
  "title": "All Components",
  "description": "All components in the BillingSDK",
  "registryDependencies": [
    "https://billingsdk.com/r/pricing-table-one.json",
    "https://billingsdk.com/r/pricing-table-two.json",
    "https://billingsdk.com/r/pricing-table-three.json",
    "https://billingsdk.com/r/cancel-subscription-dialog.json",
    "https://billingsdk.com/r/cancel-subscription-card.json",
    "https://billingsdk.com/r/update-plan-dialog.json",
    "https://billingsdk.com/r/update-plan-card.json",
    "https://billingsdk.com/r/subscription-management.json",
    "https://billingsdk.com/r/usage-meter-linear.json",
    "https://billingsdk.com/r/usage-meter-circle.json",
    "https://billingsdk.com/r/banner.json"
  ],
  "files": []
}
</file>

<file path="public/r/payment-method-manager.json">
{
  "name": "payment-method-manager",
  "type": "registry:block",
  "files": [
    "src/registry/billingsdk/payment-method-manager.tsx",
    "src/registry/billingsdk/demo/payment-method-manager-demo.tsx"
  ]
}
</file>

<file path="src/app/docs/[[...slug]]/page.tsx">
import { source } from '@/lib/source';
import {
  DocsPage,
  DocsBody,
  DocsDescription,
  DocsTitle,
} from 'fumadocs-ui/page';
import { notFound } from 'next/navigation';
import { createRelativeLink } from 'fumadocs-ui/mdx';
import { getMDXComponents } from '@/mdx-components';
import { CombinedAIButton } from '@/components/page-actions';

export default async function Page(props: {
  params: Promise<{ slug?: string[] }>;
}) {
  const params = await props.params;
  const page = source.getPage(params.slug);
  if (!page) notFound();

  const MDXContent = page.data.body;

  return (
    <DocsPage
      full={page.data.full}
      breadcrumb={{
        includePage: true,
        includeSeparator: true,
      }}
    >
      <DocsTitle className="mt-2 flex flex-row justify-between">
        {page.data.title}
        <div className="hidden md:block">
          <CombinedAIButton
            markdownUrl={`${page.url}.mdx`}
            githubUrl={`https://github.com/dodopayments/billingsdk/tree/main/content/docs/${page.path}`}
          />
        </div>
      </DocsTitle>
      <DocsDescription className="mb-5">{page.data.description}</DocsDescription>
      <div className="flex flex-row gap-2 items-center border-b pb-6 mb-5 md:hidden">
        <CombinedAIButton
          markdownUrl={`${page.url}.mdx`}
          githubUrl={`https://github.com/dodopayments/billingsdk/tree/main/content/docs/${page.path}`}
        />
      </div>
      <DocsBody>
        <MDXContent
          components={getMDXComponents({
            a: createRelativeLink(source, page),
          })}
        />
      </DocsBody>
    </DocsPage>
  );
}

export async function generateStaticParams() {
  return source.generateParams();
}

export async function generateMetadata(props: {
  params: Promise<{ slug?: string[] }>;
}) {
  const params = await props.params;
  const page = source.getPage(params.slug);
  if (!page) notFound();

  return {
    title: page.data.title,
    description: page.data.description,
  };
}
</file>

<file path="src/app/llms-full.txt/route.ts">
import { source } from '@/lib/source';
import { getLLMText } from '@/lib/get-llm-text';

// cached forever
export const revalidate = false;

export async function GET() {
  const scan = source.getPages().map(getLLMText);
  const scanned = await Promise.all(scan);

  return new Response(scanned.join('\n\n'));
}
</file>

<file path="src/components/billingsdk/usage-meter.tsx">
"use client"

import { cn } from "@/lib/utils"
import {
    Card,
    CardContent,
    CardDescription,
    CardHeader,
    CardTitle,
} from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { motion, useSpring, useMotionValue, useTransform } from "motion/react"
import { useEffect } from "react"

export interface Usage {
    name: string
    usage: number
    limit: number
}

interface UsageMeterProps {
    usage: Usage[]
    className?: string
    variant?: "linear" | "circle"
    size?: "sm" | "md" | "lg"
    title?: string
    description?: string
    progressColor?: "default" | "usage"
}

export function UsageMeter({
    usage,
    className,
    variant = "linear",
    size = "md",
    title,
    description,
    progressColor = "default",
}: UsageMeterProps) {
    if (!usage?.length) return null

    const getStatus = (percentage: number) => {
        if (percentage >= 90) return <Badge variant="destructive">Critical</Badge>
        if (percentage >= 75) return <Badge variant="secondary">High</Badge>
        return null
    }
    const getUsageClasses = (percentage: number, variant: "circle" | "linear"): string[] => {
        const thresholds = [
            { min: 90, circle: "text-red-500", linear: ["from-red-500", "to-red-400"] },
            { min: 75, circle: "text-yellow-500", linear: ["from-yellow-500", "to-yellow-400"] },
            { min: 50, circle: "text-emerald-500", linear: ["from-emerald-500", "to-emerald-400"] },
            { min: 25, circle: "text-blue-500", linear: ["from-blue-500", "to-blue-400"] },
            { min: 0, circle: "text-gray-500", linear: ["from-gray-500", "to-gray-400"] },
        ];
        const match = thresholds.find(t => percentage >= t.min);

        if (match) {
            return variant === "circle" ? [match.circle] : match.linear;
        }

        return variant === "circle" ? ["text-gray-500"] : ["from-gray-500", "to-gray-400"];
    }

    if (variant === "circle") {
        const sizeConfig = {
            sm: { circle: 100, stroke: 6, text: "text-lg", label: "text-xs" },
            md: { circle: 140, stroke: 10, text: "text-xl", label: "text-sm" },
            lg: { circle: 180, stroke: 12, text: "text-2xl", label: "text-base" },
        }

        const config = sizeConfig[size]
        const radius = (config.circle - config.stroke) / 2
        const circumference = radius * 2 * Math.PI

        return (
            <Card className={cn("w-auto", className)}>
                {(title || description) && (
                    <CardHeader className="space-y-1">
                        {title && (
                            <CardTitle className="text-base font-medium leading-tight truncate">
                                {title}
                            </CardTitle>
                        )}
                        {description && (
                            <CardDescription className="text-sm text-muted-foreground">
                                {description}
                            </CardDescription>
                        )}
                    </CardHeader>

                )}
                <CardContent
                    className={"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"}
                >
                    {usage.map((item, i) => {
                        const percentage = Math.min((item.usage / item.limit) * 100, 100)
                        const remaining = Math.max(item.limit - item.usage, 0)

                        const motionValue = useMotionValue(0)
                        const springValue = useSpring(motionValue, { stiffness: 100, damping: 20 })
                        const display = useTransform(springValue, (latest) => `${Math.round(latest)}%`)

                        useEffect(() => {
                            motionValue.set(percentage)
                        }, [percentage, motionValue])

                        return (
                            <div
                                key={item.name || i}
                                className="space-y-3 p-4 bg-muted/20 rounded-xl flex flex-col items-center text-center"
                            >
                                <span className="text-sm font-medium truncate w-full">{item.name}</span>
                                <div className="relative">
                                    <svg width={config.circle} height={config.circle} className="-rotate-90">
                                        <circle
                                            cx={config.circle / 2}
                                            cy={config.circle / 2}
                                            r={radius}
                                            strokeWidth={config.stroke}
                                            className="text-muted stroke-current"
                                            fill="transparent"
                                        />
                                        <motion.circle
                                            cx={config.circle / 2}
                                            cy={config.circle / 2}
                                            r={radius}
                                            strokeWidth={config.stroke}
                                            fill="transparent"
                                            strokeDasharray={circumference}
                                            strokeLinecap="round"
                                            className={cn("stroke-current", progressColor === "usage" ? getUsageClasses(percentage, "circle") : "text-primary")}
                                            initial={{ strokeDashoffset: circumference }}
                                            animate={{ strokeDashoffset: circumference - (percentage / 100) * circumference }}
                                            transition={{ duration: 0.5, ease: "easeOut" }}
                                        />
                                    </svg>
                                    <div className="absolute inset-0 flex flex-col items-center justify-center">
                                        <motion.span className={cn("font-semibold", config.text)}>{display}</motion.span>
                                        <span className={cn("text-muted-foreground", config.label)}>used</span>
                                    </div>
                                </div>
                                <span className="text-xs text-muted-foreground">
                                    {remaining.toLocaleString()} / {item.limit.toLocaleString()} left
                                </span>
                                {getStatus(percentage)}
                            </div>
                        )
                    })}
                </CardContent>
            </Card>
        )
    }

    // Linear variant
    const sizeConfig = {
        sm: { bar: "h-2", text: "text-xs" },
        md: { bar: "h-3", text: "text-sm" },
        lg: { bar: "h-4", text: "text-base" },
    }

    const config = sizeConfig[size]

    return (
        <Card className={cn("w-full max-w-md", className)}>
            {(title || description) && (
                <CardHeader className="space-y-1">
                    {title && (
                        <CardTitle className="text-base font-medium leading-tight truncate">
                            {title}
                        </CardTitle>
                    )}
                    {description && (
                        <CardDescription className="text-sm text-muted-foreground">
                            {description}
                        </CardDescription>
                    )}
                </CardHeader>

            )}
            <CardContent
                className={"grid grid-cols-1 gap-4"}
            >
                {usage.map((item, i) => {
                    const percentage = Math.min((item.usage / item.limit) * 100, 100)
                    const remaining = Math.max(item.limit - item.usage, 0)

                    const motionValue = useMotionValue(0)
                    const springValue = useSpring(motionValue, { stiffness: 100, damping: 20 })
                    const display = useTransform(springValue, (latest) => `${Math.round(latest)}%`)

                    useEffect(() => {
                        motionValue.set(percentage)
                    }, [percentage, motionValue])

                    return (
                        <div key={item.name || i} className="space-y-2 p-4 bg-muted/20 rounded-xl">
                            <div className="flex items-center justify-between">
                                <span className="text-sm font-medium truncate">{item.name}</span>
                                <motion.span className="text-xs text-muted-foreground">{display}</motion.span>
                            </div>
                            <div className={cn("w-full bg-muted rounded-full overflow-hidden", config.bar)}>
                                <motion.div
                                    className={cn("bg-gradient-to-r rounded-full", config.bar, progressColor === "usage" ? getUsageClasses(percentage, "linear") : "from-primary to-primary/70")}
                                    initial={{ width: 0 }}
                                    animate={{ width: `${percentage}%` }}
                                    transition={{ duration: 0.5, ease: "easeOut" }}
                                />
                            </div>
                            <div className="flex items-center justify-between text-xs text-muted-foreground">
                                <span>
                                    {remaining.toLocaleString()} / {item.limit.toLocaleString()} left
                                </span>
                                {getStatus(percentage)}
                            </div>
                        </div>
                    )
                })}
            </CardContent>
        </Card>
    )
}
</file>

<file path="src/components/landing/Hero-old.tsx">
"use client";

import { useId } from "react";
import Link from "next/link";
import { Button } from "../ui/button";
import "./hero.css";

export default function Hero() {
  return (
    <section className="max-h-[30rem] bg-[radial-gradient(131.66%_109.77%_at_50%_97.75%,transparent_37.41%,rgba(74,0,224,0.44)_69.27%,rgba(0,234,255,0.5)_100%)] dark:bg-[radial-gradient(131.66%_109.77%_at_50%_97.75%,transparent_37.41%,#4a00e070_69.27%,#ff_100%)] border-dashed relative w-full flex md:items-center md:justify-center antialiased overflow-hidden md:min-h-[30rem]">
      <div className="overflow-hidden px-2 bg-transparent dark:-mb-32 dark:mt-[-4.75rem] dark:pb-32 dark:pt-[4.75rem] md:w-10/12 mx-auto">
        <div className="mx-auto grid lg:max-w-8xl xl:max-w-full grid-cols-1 items-center gap-x-8 gap-y-16 px-4 py-2 lg:grid-cols-2 lg:px-8 lg:py-4 xl:gap-x-16 xl:px-0">
          <div className="relative z-10 text-left mt-0 sm:mt-2 md:mt-8 lg:mt-0 md:text-center lg:text-left">
            <div className="relative">
              <p className="text-zinc-800 dark:text-zinc-300 mt-3 tracking-tight text-2xl md:text-3xl font-heading">
                Ready to use billing components and blocks for your next
                project.
              </p>
              <p className="text-sm pt-2 text-muted-foreground">
                Free Billing components and blocks built with React,
                Typescript, Tailwind CSS, and Motion. Perfect companion for
                shadcn/ui.
              </p>
              <div className="flex py-4 gap-2">
                <Button asChild className="bg-primary text-primary-foreground ring-primary before:from-primary-foreground/20 after:from-primary-foreground/10 relative isolate inline-flex items-center justify-center overflow-hidden rounded-md px-3 text-left text-sm font-medium ring-1 before:pointer-events-none before:absolute before:inset-0 before:-z-10 before:rounded-md before:bg-gradient-to-b before:opacity-80 before:transition-opacity before:duration-300 before:ease-[cubic-bezier(0.4,0.36,0,1)] after:pointer-events-none after:absolute after:inset-0 after:-z-10 after:rounded-md after:bg-gradient-to-b after:to-transparent after:mix-blend-overlay hover:cursor-pointer">
                  <Link href="/docs">Get Started</Link>
                </Button>
                <Button variant="secondary" asChild className="bg-secondary text-secondary-foreground ring-secondary before:from-secondary-foreground/20 after:from-secondary-foreground/10 relative isolate inline-flex items-center justify-center overflow-hidden rounded-md px-3 text-left text-sm font-medium ring-1 before:pointer-events-none before:absolute before:inset-0 before:-z-10 before:rounded-md before:bg-gradient-to-b before:opacity-80 before:transition-opacity before:duration-300 before:ease-[cubic-bezier(0.4,0.36,0,1)] after:pointer-events-none after:absolute after:inset-0 after:-z-10 after:rounded-md after:bg-gradient-to-b after:to-transparent after:mix-blend-overlay hover:cursor-pointer">
                  <Link href="/docs">Browse Components</Link>
                </Button>
              </div>
            </div>
          </div>

          <div className="w-full">
            <HeroCircles />
          </div>
        </div>
      </div>
    </section>
  );
}

const HeroCircles = () => {
  return (
    <div className="hero-visual relative flex items-center justify-center">
      <svg
        width="456"
        height="456"
        viewBox="0 0 456 456"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        className="ring-container animate-spin-slow"
      >
        {/* Ellipses with staggered animations */}
        <ellipse cx="228" cy="228" rx="185" ry="135" className="ellipse e-1" />
        <ellipse cx="228" cy="228" rx="185" ry="135" className="ellipse e-2" />
        <ellipse cx="228" cy="228" rx="185" ry="135" className="ellipse e-3" />
        <ellipse cx="228" cy="228" rx="185" ry="135" className="ellipse e-4" />
        <ellipse cx="228" cy="228" rx="185" ry="135" className="ellipse e-5" />
        <ellipse cx="228" cy="228" rx="185" ry="135" className="ellipse e-6" />
        <ellipse cx="228" cy="228" rx="185" ry="135" className="ellipse e-7" />
        <ellipse cx="228" cy="228" rx="185" ry="135" className="ellipse e-8" />
        <ellipse cx="228" cy="228" rx="185" ry="135" className="ellipse e-9" />
        <ellipse cx="228" cy="228" rx="185" ry="135" className="ellipse e-10" />
        <ellipse cx="228" cy="228" rx="185" ry="135" className="ellipse e-11" />
        <ellipse cx="228" cy="228" rx="185" ry="135" className="ellipse e-12" />
      </svg>

      {/* Center content */}
      <div className="hero__center absolute inset-0 flex items-center justify-center">
        <div className="flex items-center gap-3">
          <div className="text-foreground font-semibold text-lg animate-pulse-slow">
            billing sdk
          </div>

          <svg
            viewBox="0 0 14 14"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            className="hero__center__plus animate-bounce-slow w-4 h-4"
          >
            <path
              fillRule="evenodd"
              clipRule="evenodd"
              d="M7.5036 2.46533V6.49634L11.5346 6.49634V7.50409L7.5036 7.50409L7.5036 11.5351H6.49585L6.49585 7.50409H2.46484V6.49634H6.49585V2.46533H7.5036Z"
              className="fill-foreground dark:fill-white"
            />
          </svg>

          <div className="text-foreground font-semibold text-lg animate-pulse-slow">
            shadcn
          </div>
        </div>
      </div>
    </div>
  );
};

export function HeroBackground(props: React.ComponentPropsWithoutRef<"svg">) {
  const id = useId();
  return (
    <svg
      aria-hidden="true"
      viewBox="0 0 668 1069"
      width={668}
      height={1069}
      fill="none"
      {...props}
    >
      <defs>
        <clipPath id={`${id}-clip-path`}>
          <path
            fill="#fff"
            transform="rotate(-180 334 534.4)"
            d="M0 0h668v1068.8H0z"
          />
        </clipPath>
      </defs>
      <g opacity=".4" clipPath={`url(#${id}-clip-path)`} strokeWidth={4}>
        <path
          opacity=".3"
          d="M584.5 770.4v-474M484.5 770.4v-474M384.5 770.4v-474M283.5 769.4v-474M183.5 768.4v-474M83.5 767.4v-474"
          stroke="#334155"
        />
        <path
          d="M83.5 221.275v6.587a50.1 50.1 0 0 0 22.309 41.686l55.581 37.054a50.102 50.102 0 0 1 22.309 41.686v6.587M83.5 716.012v6.588a50.099 50.099 0 0 0 22.309 41.685l55.581 37.054a50.102 50.102 0 0 1 22.309 41.686v6.587M183.7 584.5v6.587a50.1 50.1 0 0 0 22.31 41.686l55.581 37.054a50.097 50.097 0 0 1 22.309 41.685v6.588M384.101 277.637v6.588a50.1 50.1 0 0 0 22.309 41.685l55.581 37.054a50.1 50.1 0 0 1 22.31 41.686v6.587M384.1 770.288v6.587a50.1 50.1 0 0 1-22.309 41.686l-55.581 37.054A50.099 50.099 0 0 0 283.9 897.3v6.588"
          stroke="#334155"
        />
        <path
          d="M384.1 770.288v6.587a50.1 50.1 0 0 1-22.309 41.686l-55.581 37.054A50.099 50.099 0 0 0 283.9 897.3v6.588M484.3 594.937v6.587a50.1 50.1 0 0 1-22.31 41.686l-55.581 37.054A50.1 50.1 0 0 0 384.1 721.95v6.587M484.3 872.575v6.587a50.1 50.1 0 0 1-22.31 41.686l-55.581 37.054a50.098 50.098 0 0 0-22.309 41.686v6.582M584.501 663.824v39.988a50.099 50.099 0 0 1-22.31 41.685l-55.581 37.054a50.102 50.102 0 0 0-22.309 41.686v6.587M283.899 945.637v6.588a50.1 50.1 0 0 1-22.309 41.685l-55.581 37.05a50.12 50.12 0 0 0-22.31 41.69v6.59M384.1 277.637c0 19.946 12.763 37.655 31.686 43.962l137.028 45.676c18.923 6.308 31.686 24.016 31.686 43.962M183.7 463.425v30.69c0 21.564 13.799 40.709 34.257 47.529l134.457 44.819c18.922 6.307 31.686 24.016 31.686 43.962M83.5 102.288c0 19.515 13.554 36.412 32.604 40.645l235.391 52.309c19.05 4.234 32.605 21.13 32.605 40.646M83.5 463.425v-58.45M183.699 542.75V396.625M283.9 1068.8V945.637M83.5 363.225v-141.95M83.5 179.524v-77.237M83.5 60.537V0M384.1 630.425V277.637M484.301 830.824V594.937M584.5 1068.8V663.825M484.301 555.275V452.988M584.5 622.075V452.988M384.1 728.537v-56.362M384.1 1068.8v-20.88M384.1 1006.17V770.287M283.9 903.888V759.85M183.699 1066.71V891.362M83.5 1068.8V716.012M83.5 674.263V505.175"
          stroke="#334155"
        />
        <circle
          cx="83.5"
          cy="384.1"
          r="10.438"
          transform="rotate(-180 83.5 384.1)"
          fill="#1E293B"
          stroke="#334155"
        />
        <circle
          cx="83.5"
          cy="200.399"
          r="10.438"
          transform="rotate(-180 83.5 200.399)"
          stroke="#334155"
        />
        <circle
          cx="83.5"
          cy="81.412"
          r="10.438"
          transform="rotate(-180 83.5 81.412)"
          stroke="#334155"
        />
        <circle
          cx="183.699"
          cy="375.75"
          r="10.438"
          transform="rotate(-180 183.699 375.75)"
          fill="#1E293B"
          stroke="#334155"
        />
        <circle
          cx="183.699"
          cy="563.625"
          r="10.438"
          transform="rotate(-180 183.699 563.625)"
          fill="#1E293B"
          stroke="#334155"
        />
        <circle
          cx="384.1"
          cy="651.3"
          r="10.438"
          transform="rotate(-180 384.1 651.3)"
          fill="#1E293B"
          stroke="#334155"
        />
        <circle
          cx="484.301"
          cy="574.062"
          r="10.438"
          transform="rotate(-180 484.301 574.062)"
          fill="#0EA5E9"
          fillOpacity=".42"
          stroke="#0EA5E9"
        />
        <circle
          cx="384.1"
          cy="749.412"
          r="10.438"
          transform="rotate(-180 384.1 749.412)"
          fill="#1E293B"
          stroke="#334155"
        />
        <circle
          cx="384.1"
          cy="1027.05"
          r="10.438"
          transform="rotate(-180 384.1 1027.05)"
          stroke="#334155"
        />
        <circle
          cx="283.9"
          cy="924.763"
          r="10.438"
          transform="rotate(-180 283.9 924.763)"
          stroke="#334155"
        />
        <circle
          cx="183.699"
          cy="870.487"
          r="10.438"
          transform="rotate(-180 183.699 870.487)"
          stroke="#334155"
        />
        <circle
          cx="283.9"
          cy="738.975"
          r="10.438"
          transform="rotate(-180 283.9 738.975)"
          fill="#1E293B"
          stroke="#334155"
        />
        <circle
          cx="83.5"
          cy="695.138"
          r="10.438"
          transform="rotate(-180 83.5 695.138)"
          fill="#1E293B"
          stroke="#334155"
        />
        <circle
          cx="83.5"
          cy="484.3"
          r="10.438"
          transform="rotate(-180 83.5 484.3)"
          fill="#0EA5E9"
          fillOpacity=".42"
          stroke="#0EA5E9"
        />
        <circle
          cx="484.301"
          cy="432.112"
          r="10.438"
          transform="rotate(-180 484.301 432.112)"
          fill="#1E293B"
          stroke="#334155"
        />
        <circle
          cx="584.5"
          cy="432.112"
          r="10.438"
          transform="rotate(-180 584.5 432.112)"
          fill="#1E293B"
          stroke="#334155"
        />
        <circle
          cx="584.5"
          cy="642.95"
          r="10.438"
          transform="rotate(-180 584.5 642.95)"
          fill="#1E293B"
          stroke="#334155"
        />
        <circle
          cx="484.301"
          cy="851.699"
          r="10.438"
          transform="rotate(-180 484.301 851.699)"
          stroke="#334155"
        />
        <circle
          cx="384.1"
          cy="256.763"
          r="10.438"
          transform="rotate(-180 384.1 256.763)"
          stroke="#334155"
        />
      </g>
    </svg>
  );
}
</file>

<file path="src/components/landing/hero.css">
/* Hero component styles */

/* Blue gradient glow in the center */
.hero-visual::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 200px;
  height: 200px;
  background: radial-gradient(circle, rgba(59, 130, 246, 0.4) 0%, rgba(59, 130, 246, 0.2) 30%, rgba(59, 130, 246, 0.1) 60%, transparent 100%);
  border-radius: 50%;
  filter: blur(20px);
  pointer-events: none;
  z-index: 1;
}

/* Ellipse base styles */
.ellipse {
  stroke: rgba(255, 255, 255, 0.1);
  stroke-width: 1;
  fill: none;
  transform-origin: 228px 228px;
}

/* Individual ellipse styles with different rotations and animations */
.e-1 {
  transform: rotate(0deg);
  stroke: rgba(59, 130, 246, 1);
  animation: ellipse-rotate 20s linear infinite;
}

.e-2 {
  transform: rotate(30deg);
  stroke: rgba(59, 130, 246, 0.9);
  animation: ellipse-rotate 18s linear infinite;
}

.e-3 {
  transform: rotate(60deg);
  stroke: rgba(59, 130, 246, 0.8);
  animation: ellipse-rotate 22s linear infinite;
}

.e-4 {
  transform: rotate(90deg);
  stroke: rgba(59, 130, 246, 0.7);
  animation: ellipse-rotate 16s linear infinite;
}

.e-5 {
  transform: rotate(120deg);
  stroke: rgba(59, 130, 246, 0.6);
  animation: ellipse-rotate 24s linear infinite;
}

.e-6 {
  transform: rotate(150deg);
  stroke: rgba(59, 130, 246, 0.5);
  animation: ellipse-rotate 14s linear infinite;
}

.e-7 {
  transform: rotate(180deg);
  stroke: rgba(59, 130, 246, 0.4);
  animation: ellipse-rotate 26s linear infinite;
}

.e-8 {
  transform: rotate(210deg);
  stroke: rgba(59, 130, 246, 0.35);
  animation: ellipse-rotate 12s linear infinite;
}

.e-9 {
  transform: rotate(240deg);
  stroke: rgba(59, 130, 246, 0.3);
  animation: ellipse-rotate 28s linear infinite;
}

.e-10 {
  transform: rotate(270deg);
  stroke: rgba(59, 130, 246, 0.25);
  animation: ellipse-rotate 10s linear infinite;
}

.e-11 {
  transform: rotate(300deg);
  stroke: rgba(59, 130, 246, 0.2);
  animation: ellipse-rotate 30s linear infinite;
}

.e-12 {
  transform: rotate(330deg);
  stroke: rgba(59, 130, 246, 0.15);
  animation: ellipse-rotate 8s linear infinite;
}

/* Center content positioning */
.hero__center {
  z-index: 2;
}

/* Animation keyframes */
@keyframes ellipse-rotate {
  from {
    transform: rotate(var(--start-rotation, 0deg));
  }
  to {
    transform: rotate(calc(var(--start-rotation, 0deg) + 360deg));
  }
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes pulse {
  0%,
  100% {
    opacity: 1;
    transform: scale(1);
  }
  50% {
    opacity: 0.7;
    transform: scale(1.05);
  }
}

@keyframes bounce {
  0%,
  100% {
    transform: translateY(0px) rotate(0deg);
  }
  50% {
    transform: translateY(-4px) rotate(180deg);
  }
}

/* Animation utility classes */
.animate-spin-slow {
  animation: spin 80s linear infinite;
}

.animate-pulse-slow {
  animation: pulse 3s ease-in-out infinite;
}

.animate-bounce-slow {
  animation: bounce 2s ease-in-out infinite;
}
</file>

<file path="src/components/landing/Icons.tsx">
import { cn } from "@/lib/utils";
import { SVGProps } from "react";

export const Icons = {
	nextJS: (props?: SVGProps<any>) => (
		<svg
			className={props?.className}
			xmlns="http://www.w3.org/2000/svg"
			width="1.2em"
			height="1.2em"
			viewBox="0 0 24 24"
		>
			<path
				fill="currentColor"
				d="M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10s-4.477 10-10 10m4-14h-1.35v4H16zM9.346 9.71l6.059 7.828l1.054-.809L9.683 8H8v7.997h1.346z"
			></path>
		</svg>
	),
	nuxt: (props?: SVGProps<any>) => (
		<svg
			className={props?.className}
			xmlns="http://www.w3.org/2000/svg"
			width="1.2em"
			height="1.2em"
			viewBox="0 0 24 24"
		>
			<path
				fill="currentColor"
				d="M13.2 18.666h7.4c.236 0 .462-.083.667-.2c.204-.117.415-.264.533-.466c.118-.203.2-.433.2-.667s-.082-.464-.2-.667l-5-8.6a1.2 1.2 0 0 0-.467-.466a1.6 1.6 0 0 0-.733-.2c-.236 0-.462.083-.667.2a1.2 1.2 0 0 0-.466.466l-1.267 2.2L10.667 6c-.118-.203-.262-.417-.467-.534s-.43-.133-.667-.133c-.236 0-.462.016-.666.133s-.416.33-.534.534l-6.2 10.666c-.118.203-.133.433-.133.667s.015.464.133.667c.118.202.33.35.534.466s.43.2.666.2H8c1.85 0 3.195-.83 4.133-2.4l2.267-3.933l1.2-2.067l3.667 6.267H14.4zm-5.267-2.133H4.667l4.866-8.4l2.467 4.2l-1.634 2.848c-.623 1.02-1.333 1.352-2.433 1.352"
			/>
		</svg>
	),
	svelteKit: (props?: SVGProps<any>) => (
		<svg
			className={props?.className}
			xmlns="http://www.w3.org/2000/svg"
			width="1.2em"
			height="1.2em"
			viewBox="0 0 426 512"
		>
			<path
				fill="currentColor"
				d="M403.508 229.23C491.235 87.7 315.378-58.105 190.392 23.555L71.528 99.337c-57.559 37.487-82.55 109.513-47.45 183.53c-87.761 133.132 83.005 289.03 213.116 205.762l118.864-75.782c64.673-42.583 79.512-116.018 47.45-183.616m-297.592-80.886l118.69-75.739c77.973-46.679 167.756 34.942 135.388 110.992c-19.225-15.274-40.65-24.665-56.923-28.894c6.186-24.57-22.335-42.796-42.174-30.106l-118.95 75.48c-29.411 20.328 1.946 62.138 31.014 44.596l45.33-28.895c101.725-57.403 198 80.425 103.38 147.975l-118.692 75.739C131.455 485.225 34.11 411.96 67.592 328.5c17.786 13.463 36.677 23.363 56.923 28.894c-4.47 28.222 24.006 41.943 42.476 30.365L285.64 312.02c29.28-21.955-2.149-61.692-30.97-44.595l-45.504 28.894c-100.56 58.77-199.076-80.42-103.25-147.975"
			></path>
		</svg>
	),
	solidStart: (props?: SVGProps<any>) => (
		<svg
			className={props?.className}
			xmlns="http://www.w3.org/2000/svg"
			width="1.2em"
			height="1.2em"
			viewBox="0 0 128 128"
		>
			<path
				fill="currentColor"
				d="M61.832 4.744c-3.205.058-6.37.395-9.45 1.07l-2.402.803c-4.806 1.603-8.813 4.005-11.216 7.21l-1.602 2.404l-12.017 20.828l.166.031c-4.785 5.823-5.007 14.07-.166 21.6c1.804 2.345 4.073 4.431 6.634 6.234l-15.445 4.982L.311 97.946s42.46 32.044 75.306 24.033l2.403-.801c5.322-1.565 9.292-4.48 11.683-8.068l.334.056l16.022-28.84c3.204-5.608 2.404-12.016-1.602-18.425a36 36 0 0 0-7.059-6.643l15.872-5.375l14.42-24.033S92.817 4.19 61.831 4.744z"
			></path>
		</svg>
	),
	react: (props?: SVGProps<any>) => (
		<svg
			className={props?.className}
			xmlns="http://www.w3.org/2000/svg"
			width="1.2em"
			height="1.2em"
			viewBox="0 0 15 15"
		>
			<path
				fill="currentColor"
				fillRule="evenodd"
				d="M5.315 1.837c-.4-.116-.695-.085-.91.032c-.216.116-.404.347-.526.745c-.122.401-.163.936-.104 1.582q.015.157.037.321a14 14 0 0 1 1.676-.311a13 13 0 0 1 1.275-1.54l-.066-.053c-.508-.402-.98-.66-1.382-.776m2.185.14q-.09-.076-.182-.148C6.746 1.377 6.16 1.04 5.594.876C5.024.711 4.441.711 3.928.99s-.833.767-1.005 1.334c-.172.564-.21 1.238-.144 1.965q.023.255.065.523q-.256.09-.49.192c-.671.287-1.246.642-1.66 1.062C.278 6.487 0 7 0 7.584S.278 8.68.694 9.103c.414.42.989.774 1.66 1.062q.235.1.49.192a9 9 0 0 0-.065.523c-.066.726-.028 1.4.144 1.965c.172.567.492 1.056 1.005 1.333c.513.278 1.097.279 1.666.114c.566-.165 1.152-.5 1.724-.953l.182-.149q.09.076.182.149c.572.452 1.158.788 1.724.953c.569.165 1.153.164 1.666-.114c.513-.277.833-.766 1.005-1.333c.172-.564.21-1.239.144-1.965a9 9 0 0 0-.065-.523q.255-.09.49-.192c.671-.288 1.246-.643 1.66-1.062c.416-.422.694-.936.694-1.52c0-.582-.278-1.096-.694-1.518c-.414-.42-.989-.775-1.66-1.062a9 9 0 0 0-.49-.192q.04-.268.065-.523c.066-.727.028-1.4-.144-1.965c-.172-.567-.492-1.056-1.005-1.334S9.975.711 9.406.876c-.566.164-1.152.5-1.724.953zm0 1.365q-.338.346-.672.755a17 17 0 0 1 1.344 0a11 11 0 0 0-.672-.755m2.012.864c-.41-.574-.84-1.092-1.275-1.54l.065-.053c.51-.402.98-.66 1.383-.776c.399-.116.695-.085.91.032c.216.116.404.347.525.745c.122.401.164.936.105 1.582q-.015.158-.037.32a14 14 0 0 0-1.676-.31m-.563.944a15.6 15.6 0 0 0-2.898 0A15.6 15.6 0 0 0 4.72 7.584a15.7 15.7 0 0 0 1.33 2.433a15.6 15.6 0 0 0 2.9 0a15.6 15.6 0 0 0 1.33-2.433A15.7 15.7 0 0 0 8.95 5.15m1.824 1.138a17 17 0 0 0-.527-.956q.39.075.752.168q-.094.385-.225.788m0 2.591a17 17 0 0 1-.527.957q.39-.075.752-.169a12 12 0 0 0-.225-.788m1.18.487a14 14 0 0 0-.588-1.782c.246-.61.443-1.209.588-1.782q.154.058.3.12c.596.256 1.047.547 1.341.845c.292.296.406.572.406.817s-.114.52-.406.816c-.294.299-.745.59-1.341.846a8 8 0 0 1-.3.12m-.765 1.285a14 14 0 0 1-1.676.311c-.41.574-.84 1.091-1.275 1.54l.066.052c.508.403.98.66 1.382.777c.399.116.695.085.91-.032s.404-.348.525-.746c.123-.4.164-.936.105-1.582a7 7 0 0 0-.037-.32M7.5 11.826q.338-.346.672-.755a17 17 0 0 1-1.344 0q.334.408.672.755m-2.746-1.99a17 17 0 0 1-.527-.957q-.13.404-.225.788q.361.094.752.169m-.942.815a14 14 0 0 0 1.676.311c.41.574.839 1.091 1.275 1.54l-.066.052c-.508.403-.98.66-1.382.777c-.4.116-.695.085-.911-.032s-.403-.348-.525-.746c-.122-.4-.163-.936-.104-1.582a8 8 0 0 1 .037-.32m-.765-1.285c.145-.574.341-1.172.588-1.782a14 14 0 0 1-.588-1.782q-.155.058-.3.12c-.596.256-1.047.547-1.341.845c-.292.296-.406.572-.406.817s.114.52.406.816c.294.299.745.59 1.341.846q.146.061.3.12m.955-3.865q.094.384.225.787a17 17 0 0 1 .527-.956q-.39.075-.752.169M6 7.584a1.5 1.5 0 1 1 3 0a1.5 1.5 0 0 1-3 0m1.5-.5a.5.5 0 1 0 0 1a.5.5 0 0 0 0-1"
				clipRule="evenodd"
			></path>
		</svg>
	),
	hono: (props?: SVGProps<any>) => (
		<svg
			className={cn(props?.className)}
			xmlns="http://www.w3.org/2000/svg"
			width="1.2em"
			height="1.2em"
			viewBox="0 0 256 330"
		>
			<path
				className="fill-foreground"
				d="M134.129.029q1.315-.17 2.319.662a1256 1256 0 0 1 69.573 93.427q24.141 36.346 41.082 76.862q27.055 72.162-28.16 125.564q-48.313 40.83-111.318 31.805q-75.312-15.355-102.373-87.133Q-1.796 217.85.614 193.51q4.014-41.896 19.878-80.838q6.61-15.888 17.228-29.154a382 382 0 0 1 16.565 21.203q3.66 3.825 7.62 7.289Q92.138 52.013 134.13.029"
				opacity=".993"
			></path>
			<path
				className="fill-muted-foreground"
				d="M129.49 53.7q36.47 42.3 65.93 90.114a187.3 187.3 0 0 1 15.24 33.13q12.507 49.206-26.836 81.169q-38.05 26.774-83.488 15.902q-48.999-15.205-56.653-65.929q-1.857-15.993 3.314-31.142a225.4 225.4 0 0 1 17.89-35.78l19.878-29.155a5510 5510 0 0 0 44.726-58.31"
			></path>
		</svg>
	),
	fastify: (props?: SVGProps<any>) => (
		<svg
			className={props?.className}
			xmlns="http://www.w3.org/2000/svg"
			width="1.2em"
			height="1.2em"
			viewBox="0 0 256 256"
		>
			<path
				fill="currentColor"
				d="M247.942 23.314L256 2.444l-.35-1.293-79.717 21.003c8.5-12.295 5.58-22.154 5.58-22.154s-25.457 16.257-44.709 15.832c-19.251-.426-25.457-5.564-54.977 3.853-29.52 9.41-37.86 38.295-46.419 44.5C26.85 70.392 0 90.603 0 90.603l.058.359 24.207-7.708s-6.64 6.256-20.745 25.265c0 0-.242-.225-.659-.609l.025.134s11.336 17.325 22.463 14.122c1.118-.325 2.377-.86 3.754-1.56 4.479 2.494 10.326 4.946 16.782 5.622c0 0-4.37-5.08-8.016-10.86a99.361 99.361 0 0 0 3.02-1.96l-.476.333 9.217 3.386-1.017-8.666.092-.059 9.058 3.328-1.126-7.882a108.375 108.375 0 0 0 1.437-1.693l9.442-35.717 39.045-26.633-3.103 7.807c-7.916 19.468-22.78 24.064-22.78 24.064l-6.206 2.352c-4.613 5.455-6.556 6.798-8.14 25.107 3.72-.934 7.273-1.16 10.493-.292 16.682 4.496 22.463 24.599 17.967 30.162-1.126 1.393-3.804 3.77-7.182 6.565h-6.773l-.092 5.488c-.233.184-.467.359-.692.542h-6.89l-.083 5.355c-.61.468-1.219.918-1.802 1.36-6.473.133-14.672-5.514-14.672-5.514 0 5.138 4.279 13.046 4.279 13.046l.759-.367c-.417.309-.65.476-.65.476s17.324 11.552 28.235 7.273c9.7-3.803 34.816-23.605 56.495-32.98l65.603-17.283 8.65-22.413-49.997 13.17v-20.127l58.664-15.456 8.65-22.413-67.297 17.734V43.324l75.947-20.01z"
			></path>
		</svg>
	),
	astro: (props?: SVGProps<any>) => (
		<svg
			xmlns="http://www.w3.org/2000/svg"
			{...props}
			width="1.2em"
			height="1.2em"
			viewBox="0 0 128 128"
		>
			<path
				className="fill-foreground"
				d="M81.504 9.465c.973 1.207 1.469 2.836 2.457 6.09l21.656 71.136a90 90 0 0 0-25.89-8.765L65.629 30.28a1.833 1.833 0 0 0-3.52.004L48.18 77.902a90.1 90.1 0 0 0-26.003 8.778l21.758-71.14c.996-3.25 1.492-4.876 2.464-6.083a8 8 0 0 1 3.243-2.398c1.433-.575 3.136-.575 6.535-.575H71.72c3.402 0 5.105 0 6.543.579a8 8 0 0 1 3.242 2.402Zm2.59 80.61c-3.57 3.054-10.696 5.136-18.903 5.136c-10.07 0-18.515-3.137-20.754-7.356c-.8 2.418-.98 5.184-.98 6.954c0 0-.527 8.675 5.508 14.71a5.67 5.67 0 0 1 5.672-5.671c5.37 0 5.367 4.683 5.363 8.488v.336c0 5.773 3.527 10.719 8.543 12.805a11.6 11.6 0 0 1-1.172-5.098c0-5.508 3.23-7.555 6.988-9.938c2.989-1.894 6.309-4 8.594-8.222a15.5 15.5 0 0 0 1.875-7.41a15.6 15.6 0 0 0-.734-4.735Zm0 0"
			></path>
		</svg>
	),
	vue: () => (
		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="1.2em"
			height="1.2em"
			viewBox="0 0 24 24"
		>
			<path
				className="fill-foreground"
				d="M1.001 3h4l7 12l7-12h4l-11 19zm8.667 0L12 7l2.333-4h4.035L12 14L5.633 3z"
			></path>
		</svg>
	),
	express: () => (
		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="1em"
			height="1em"
			viewBox="0 0 256 256"
		>
			<g fill="none">
				<rect
					width="256"
					height="256"
					className="fill-foreground"
					rx="60"
				></rect>
				<path
					className="fill-background"
					d="M228 182.937a12.73 12.73 0 0 1-15.791-6.005c-9.063-13.567-19.071-26.522-28.69-39.755l-4.171-5.56c-11.454 15.346-22.908 30.08-33.361 45.371a12.23 12.23 0 0 1-15.012 5.894l42.98-57.659l-39.978-52.1a13.29 13.29 0 0 1 15.847 5.56c9.285 13.568 19.572 26.523 29.802 40.257c10.287-13.623 20.462-26.634 29.97-40.09a11.95 11.95 0 0 1 14.901-5.56l-15.513 20.573c-6.95 9.174-13.789 18.404-21.017 27.356a5.56 5.56 0 0 0 0 8.285c13.289 17.626 26.466 35.307 40.033 53.433M28 124.5c1.168-5.56 1.89-11.621 3.503-17.292c9.619-34.195 48.818-48.43 75.785-27.245c15.791 12.4 19.739 29.97 18.961 49.764H37.286c-1.446 35.363 24.075 56.714 56.713 45.816a33.86 33.86 0 0 0 21.518-23.965c1.724-5.56 4.504-6.505 9.786-4.893a45.15 45.15 0 0 1-21.573 32.972a52.26 52.26 0 0 1-60.884-7.784a54.77 54.77 0 0 1-13.678-32.138c0-1.89-.723-3.781-1.112-5.56A861 861 0 0 1 28 124.5m9.397-2.391h80.456c-.501-25.632-16.681-43.814-38.254-43.98c-24.02-.334-41.201 17.458-42.258 43.869z"
				></path>
			</g>
		</svg>
	),
	nestJS: (props?: SVGProps<any>) => (
		<svg
			className={props?.className}
			viewBox="0 0 264.58333 255.58751"
			height="1.2em"
			width="1.2em"
			xmlns="http://www.w3.org/2000/svg"
		>
			<defs>
				<linearGradient id="grad" x1="0%" x2="100%" y1="0%" y2="0%">
					<stop offset="0%" stopColor="#ea2845" />
					<stop offset="100%" stopColor="#ea2868" />
				</linearGradient>
			</defs>
			<path
				d="m153.33845 45.652481c-1.80934 0-3.48944.387729-5.04032.904673 3.29558 2.19706 5.10493 5.104961 6.00963 8.400551.0648.45233.19386.775444.25856 1.227759.0648.387729.12916.775444.12916 1.163171.2586 5.686509-1.48628 6.397323-2.71403 9.757543-1.87398 4.329529-1.35704 8.982133.90466 12.730079.19387.452318.45234.969275.77546 1.421618-2.45558-16.348759 11.17919-18.804304 13.69932-23.90924.19386-4.458761-3.48944-7.431263-6.39731-9.499092-2.77864-1.680104-5.29884-2.197062-7.62513-2.197062zm20.54903 3.683318c-.25858 1.486247-.0647 1.09853-.12913 1.873973-.0647.516945-.0647 1.163157-.12914 1.680102-.12914.516959-.2586 1.033904-.45236 1.550886-.12913.516945-.32309 1.033903-.51694 1.550847-.2586.516983-.45234.969301-.71082 1.486258-.19385.258585-.32309.516945-.51695.775443-.12914.193857-.25858.387715-.38771.581572-.32309.452355-.64621.904673-.96929 1.292387-.38774.387729-.71083.840046-1.16319 1.163171v.0647c-.38771.3231-.77543.710815-1.22775 1.033903-1.35702 1.033902-2.90787 1.809344-4.32952 2.778644-.45231.323088-.90468.581587-1.29238.9693-.45233.323088-.84006.646176-1.22776 1.033903-.45236.387715-.77545.775442-1.16318 1.227784-.32309.387728-.7108.840048-.96927 1.292402-.32312.452317-.6462.904661-.9047 1.35699-.25857.516944-.45233.969299-.71081 1.486245-.19385.516944-.38773.969301-.51695 1.486244-.19386.581586-.3231 1.098544-.45234 1.615514-.0647.258583-.0647.58156-.12914.840045-.0648.258584-.0648.516945-.12913.775443 0 .516944-.0647 1.09853-.0647 1.615475 0 .387727 0 .775441.0647 1.163169 0 .516946.0647 1.033892.19385 1.615476.0647.516944.19384 1.033902.32312 1.550885.19386.516944.3231 1.033902.51694 1.550847.12916.323126.32309.646213.45236.904673l-14.86252-5.75114c-2.52018-.710815-4.9757-1.35699-7.49588-1.938576-1.357-.323087-2.714-.646198-4.07102-.969299-3.87719-.77543-7.81895-1.356991-11.76076-1.744705-.12913 0-.19385-.06471-.32309-.06471-3.8772-.387714-7.68973-.581572-11.5669-.581572-2.84328 0-5.68656.129131-8.465201.323088-3.941798.258584-7.883602.775442-11.825373 1.421617-.969302.129144-1.938602.323125-2.907905.516984-2.003199.387689-3.941771.840044-5.815742 1.292386-.9693.258584-1.938602.516958-2.907903.775419-.96927.387713-1.87394.84007-2.778642 1.227784-.710811.323088-1.421619.646187-2.132431.9693-.129139.06471-.25858.06471-.32309.129144-.64621.323087-1.22779.581547-1.809341.904671-.193861.06471-.323122.129132-.452351.193859-.71081.323089-1.421618.710803-2.003201 1.033902-.45235.193858-.90467.452343-1.292389.646213-.193862.129131-.452353.258572-.581582.323088-.581579.323088-1.16316.646174-1.680111.9693-.581581.323087-1.098532.646175-1.550882.969263-.452318.323125-.904667.581585-1.29239.904672-.06474.06471-.129139.06471-.193861.129145-.387719.258583-.840039.581571-1.227758.904696 0 0-.06473.0647-.12914.129142-.32309.258584-.646212.516947-.969301.775407-.129138.06471-.258581.193857-.38772.258583-.32309.258586-.64618.581586-.969271.84007-.06473.129143-.193859.193858-.258581.258585-.38772.387715-.775441.710802-1.163161 1.09853-.06473 0-.06473.06471-.129139.129131-.38772.3231-.775439.710816-1.163159 1.098543-.06473.06471-.06473.12913-.12914.12913-.32309.323089-.64618.646213-.969301 1.033902-.129137.129143-.32309.258586-.452319.387715-.32309.387728-.710811.775443-1.09853 1.163171-.06473.129132-.19386.193858-.258582.323087-.516952.516983-.969302 1.033928-1.486252 1.550885-.06473.06471-.129138.129128-.193859.193858-1.033931 1.098529-2.132463 2.197059-3.295594 3.166352-1.163159 1.0339-2.390922 2.0032-3.618711 2.84325-1.292392.9047-2.520152 1.68011-3.877173 2.45555-1.292392.71079-2.649412 1.35701-4.071032 1.9386-1.357022.58157-2.778641 1.09854-4.200264 1.55085-2.714041.58157-5.492684 1.68011-7.883605 1.87397-.51695 0-1.098531.12915-1.615482.19385-.581578.12914-1.098529.25859-1.615479.38774-.516951.19384-1.033931.38771-1.550883.58156-.516951.19386-1.033901.45235-1.550852.71083-.45235.32308-.969299.58157-1.421651.90466-.452322.32309-.904672.7108-1.292393 1.09853-.452319.32312-.904669.77545-1.29239 1.16315-.387721.45237-.77544.84008-1.0985304 1.29239-.3230901.51695-.7108108.96931-.9693016 1.48627-.32309.45235-.6461799.96929-.9046707 1.48622-.2585815.58161-.5169498 1.09855-.7108107 1.68014-.1938599.51695-.3877199 1.09852-.5815799 1.68011-.1291382.51694-.2585813 1.0339-.3230898 1.55083 0 .0648-.064719.12916-.064719.19387-.1291392.58161-.1291392 1.35706-.1938608 1.74479-.064719.45232-.1291373.84002-.1291373 1.29238 0 .25858 0 .58155.064719.84003.064719.45236.1291371.84007.2585814 1.22782.1291382.38766.2585815.77539.4523201 1.16312v.0647c.1938599.38775.4523506.77545.7108108 1.16317.2585814.38772.5169804.77544.8400704 1.16317.3230899.32309.7108109.71078 1.0985304 1.03389.3877209.38772.7754421.71081 1.2277611 1.0339 1.550881 1.35703 1.938601 1.80938 3.941806 2.84327.323087.19387.64621.32311 1.03393.51697.06473 0 .129139.0647.193859.0647 0 .12913 0 .19387.06473.32313.06472.51696.193859 1.03389.32309 1.55086.129138.58158.323121 1.09855.516981 1.55087.19386.38773.32309.77543.516951 1.16317.06472.12915.12914.25858.19386.32309.258581.51694.51695.96932.77541 1.42162.323121.45233.64621.90466.969299 1.35703.323092.3877.710813.84004 1.098532 1.22775.387721.38773.775442.71083 1.227793 1.09852 0 0 .06473.0648.129137.0648.387722.32312.77544.64622 1.163162.90466.45232.32311.90467.58157 1.421619.84007.452351.25858.969302.51695 1.486252.71082.387721.19386.84004.32311 1.292392.45234.06473.0648.129138.0648.258582.12916.258581.0648.581548.12912.840039.19384-.193859 3.48945-.258582 6.78504.258583 7.94822.58155 1.29238 3.424821-2.64941 6.268094-7.17277-.387719 4.45875-.646211 9.6929 0 11.24381.710809 1.61545 4.587982-3.42487 7.948203-8.98215 45.815262-10.59757 87.62418 21.066 92.01829 65.78273-.84006-6.97892-9.43446-10.85608-13.37623-9.88677-1.93861 4.78183-5.2342 10.92068-10.53299 14.73324.45233-4.2649.25856-8.65901-.64619-12.92392-1.42165 5.94501-4.2003 11.50232-8.01287 16.28415-6.138857.45232-12.277729-2.52019-15.50872-6.97891-.258582-.19388-.323091-.58159-.516951-.84006-.193862-.45238-.387719-.90467-.516951-1.35703-.193859-.45232-.323089-.90467-.387719-1.35699-.06473-.45236-.06473-.90469-.06473-1.42163 0-.32312 0-.6462 0-.96928.06473-.45238.19386-.90471.323091-1.35705.129138-.45232.25858-.90467.45235-1.35701.258582-.45231.45232-.90466.775441-1.35698 1.09853-3.10178 1.09853-5.62192-.90467-7.10816-.387721-.25858-.775441-.45236-1.227791-.64622-.258584-.0647-.581582-.19386-.84004-.25857-.193861-.0647-.32309-.12916-.516951-.19387-.452351-.12914-.904702-.25859-1.357022-.32309-.45235-.12913-.90467-.19386-1.35702-.19386-.452321-.0648-.969303-.12914-1.421622-.12914-.323089 0-.64621.0647-.969301.0647-.516949 0-.969299.0648-1.421621.19386-.45235.0648-.904669.12913-1.357019.25856-.452322.12915-.904673.25859-1.357023.45238-.452319.19385-.840041.38771-1.292389.58157-.38769.19387-.775412.45232-1.227761.64618-15.056371 9.82217-6.074235 32.82674 4.200264 39.48256-3.877175.71081-7.818947 1.5509-8.917479 2.39092-.06473.0647-.129138.12915-.129138.12915 2.778642 1.68009 5.686516 3.10173 8.723616 4.32949 4.135665 1.35702 8.529786 2.58479 10.468387 3.10176v.0647c5.363424 1.09854 10.79148 1.48626 16.284139 1.16317 28.62649-2.00321 52.0834-23.78003 56.3483-52.47111.12914.58159.25858 1.09852.38772 1.68012.19387 1.16312.45232 2.3909.58155 3.61867v.0648c.12914.58158.19386 1.16315.25858 1.6801v.25859c.0648.58157.12915 1.16316.12915 1.6801.0647.71082.12914 1.42162.12914 2.13247v1.0339c0 .32312.0647.7108.0647 1.03392 0 .38773-.0647.77542-.0647 1.16314v.90467c0 .45236-.0648.84006-.0648 1.2924 0 .25856 0 .51696-.0647.84006 0 .45236-.0647.90466-.0647 1.42162-.0648.19386-.0648.38772-.0648.58159-.0647.51696-.12914.9693-.19387 1.48626 0 .19387 0 .38771-.0647.58159-.0648.64617-.19385 1.22777-.25855 1.87394v.0648.0647c-.12914.58157-.2586 1.22776-.38775 1.80933v.19387c-.12912.58156-.25858 1.16316-.3877 1.74471 0 .0648-.0647.19387-.0647.25856-.12916.5816-.2586 1.16317-.45232 1.74478v.19384c-.19386.64617-.38773 1.22776-.51698 1.80934-.0647.0647-.0647.12914-.0647.12914-.19387.64621-.38771 1.29239-.58155 1.93858-.25858.64621-.45234 1.22778-.71081 1.87398-.25857.6462-.45236 1.2924-.71083 1.87396-.25859.64622-.51697 1.2278-.77543 1.87397h-.0648c-.2586.58157-.51699 1.22779-.8401 1.80938-.0647.19383-.12912.32309-.19384.4523-.0647.0648-.0647.12914-.12914.19388-4.20026 8.46514-10.40377 15.89639-18.15809 21.71217-.51695.32309-1.03392.71082-1.55086 1.09852-.12915.12915-.32312.19388-.45235.32309-.45235.3231-.90468.64618-1.42161.96931l.19385.38772h.0647c.90466-.12913 1.80934-.25858 2.71402-.38772h.0647c1.68012-.25858 3.36023-.58158 5.04035-.90467.45231-.0648.9693-.19385 1.42161-.32312.32309-.0648.58158-.12913.90467-.19386.45235-.0648.90468-.19386 1.35704-.25857.3877-.12914.77543-.19388 1.16314-.3231 6.46195-1.55089 12.73007-3.68335 18.73965-6.20349-10.27448 14.02243-24.03847 25.33087-40.12874 32.76212 7.43127-.51696 14.86251-1.74472 22.03528-3.81254 26.0417-7.68977 47.94772-25.20165 61.06549-48.7878-2.6494 14.92714-8.5944 29.14344-17.38265 41.55041 6.26809-4.13569 12.01923-8.91753 17.25342-14.34557 14.47478-15.12097 23.97388-34.31296 27.20483-54.92665 2.19708 10.2099 2.84328 20.74293 1.87398 31.14666 46.65534-65.07192 3.87717-132.53476-14.02244-150.305141-.0648-.129133-.12914-.193858-.12914-.323089-.0648.0647-.0648.0647-.0648.129144 0-.06471 0-.06471-.0647-.129144 0 .775442-.0647 1.550848-.12914 2.326291-.19387 1.48625-.38771 2.907879-.64621 4.329529-.32308 1.42162-.71081 2.84322-1.09854 4.26488-.45232 1.35699-.96925 2.77862-1.55085 4.13565-.58158 1.29237-1.22778 2.64939-1.93859 3.9418-.71082 1.22778-1.48625 2.52016-2.32629 3.6833-.84006 1.2278-1.74474 2.39093-2.64943 3.48944-.96931 1.16318-2.00319 2.1971-3.03712 3.23101-.64618.58158-1.22775 1.09853-1.87398 1.61546-.51694.45236-.96927.84009-1.48625 1.29239-1.16314.90468-2.32629 1.74474-3.61867 2.52019-1.22778.77542-2.52014 1.55086-3.81254 2.19707-1.35702.64619-2.71404 1.22776-4.07104 1.80935-1.35702.51693-2.77864.96928-4.20031 1.35701-1.42161.3877-2.90785.71081-4.32949.96928-1.48623.25858-2.97249.38771-4.39412.51697-1.03392.0647-2.06782.12915-3.10175.12915-1.48626 0-2.97248-.12915-4.39412-.25858-1.48624-.12914-2.97251-.32314-4.39413-.64623-1.48625-.25858-2.9079-.64621-4.32953-1.09851h-.0647c1.42163-.12914 2.84327-.2586 4.26492-.51697 1.48622-.25858 2.90785-.58156 4.3295-.96931 1.42162-.38771 2.84325-.84006 4.20026-1.357 1.42162-.51696 2.77865-1.16313 4.07105-1.80936 1.357-.64621 2.58478-1.357 3.87716-2.13244 1.22776-.84005 2.45554-1.68009 3.61869-2.58479 1.16316-.90466 2.26167-1.87394 3.29562-2.90786 1.09853-.96932 2.06781-2.06784 3.03711-3.16638.96927-1.16312 1.87396-2.32628 2.71402-3.48944.12915-.19387.25859-.45232.38774-.64619.64617-1.03392 1.29235-2.06783 1.87392-3.10176.71083-1.29239 1.35704-2.58479 1.9386-3.94177.58159-1.35702 1.09855-2.71405 1.55089-4.13566.45232-1.35703.77542-2.77864 1.09853-4.200258.25859-1.486258.51694-2.90791.64619-4.329528.12914-1.486244.25857-2.972503.25857-4.394119 0-1.033928-.0648-2.06783-.12912-3.101733-.12915-1.486246-.32311-2.9079-.51696-4.329519-.25859-1.486257-.58157-2.907873-.96931-4.329529-.45231-1.356991-.90467-2.778634-1.42161-4.135623-.51699-1.357028-1.16315-2.714042-1.80938-4.006443-.71081-1.292388-1.42161-2.584776-2.19704-3.812536-.84005-1.22776-1.68013-2.390917-2.5848-3.554087-.96927-1.098531-1.93857-2.19706-2.97251-3.29559-.51694-.516947-1.09853-1.098532-1.6801-1.615476-2.90787-2.2617-5.945-4.394159-8.9821-6.332732-.45233-.258574-.84005-.452342-1.2924-.646212-2.13246-1.356992-4.13566-2.067831-6.13885-2.714007z"
				fill="currentColor"
				transform="translate(0 -41.412487)"
			/>
		</svg>
	),
	javascript: () => (
		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="1.2em"
			height="1.2em"
			viewBox="0 0 512 512"
		>
			<path
				className="fill-foreground"
				d="M32 32v448h448V32Zm240 348c0 43.61-25.76 64.87-63.05 64.87c-33.68 0-53.23-17.44-63.15-38.49l34.28-20.75c6.61 11.73 11.63 21.65 26.06 21.65c12 0 21.86-5.41 21.86-26.46V240h44Zm99.35 63.87c-39.09 0-64.35-17.64-76.68-42L329 382c9 14.74 20.75 24.56 41.5 24.56c17.44 0 27.57-7.72 27.57-19.75c0-14.43-10.43-19.54-29.68-28l-10.52-4.52c-30.38-12.92-50.52-29.16-50.52-63.45c0-31.57 24.05-54.63 61.64-54.63c26.77 0 46 8.32 59.85 32.68L396 290c-7.22-12.93-15-18-27.06-18c-12.33 0-20.15 7.82-20.15 18c0 12.63 7.82 17.74 25.86 25.56l10.52 4.51c35.79 15.34 55.94 31 55.94 66.16c.01 37.9-29.76 57.64-69.76 57.64"
			></path>
		</svg>
	),
	node: () => (
		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="1.2em"
			height="1.2em"
			viewBox="0 0 15 15"
		>
			<path
				fill="currentColor"
				fillRule="evenodd"
				d="M14 4.213L7.5.42L1 4.213v6.574l1.006.587l2.057-.832A1.5 1.5 0 0 0 5 9.152V4h1v5.152a2.5 2.5 0 0 1-1.562 2.317l-1.34.542L7.5 14.58l6.5-3.792zM7 6a2 2 0 0 1 2-2h1.167C11.179 4 12 4.82 12 5.833V6h-1v-.167A.833.833 0 0 0 10.167 5H9a1 1 0 0 0 0 2h1a2 2 0 1 1 0 4H9a2 2 0 0 1-2-2h1a1 1 0 0 0 1 1h1a1 1 0 1 0 0-2H9a2 2 0 0 1-2-2"
				clipRule="evenodd"
			></path>
		</svg>
	),
	book: () => (
		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="1em"
			height="1em"
			viewBox="0 0 24 24"
		>
			<path
				fill="currentColor"
				d="M17.5 4.5c-1.95 0-4.05.4-5.5 1.5c-1.45-1.1-3.55-1.5-5.5-1.5c-1.45 0-2.99.22-4.28.79C1.49 5.62 1 6.33 1 7.14v11.28c0 1.3 1.22 2.26 2.48 1.94c.98-.25 2.02-.36 3.02-.36c1.56 0 3.22.26 4.56.92c.6.3 1.28.3 1.87 0c1.34-.67 3-.92 4.56-.92c1 0 2.04.11 3.02.36c1.26.33 2.48-.63 2.48-1.94V7.14c0-.81-.49-1.52-1.22-1.85c-1.28-.57-2.82-.79-4.27-.79M21 17.23c0 .63-.58 1.09-1.2.98c-.75-.14-1.53-.2-2.3-.2c-1.7 0-4.15.65-5.5 1.5V8c1.35-.85 3.8-1.5 5.5-1.5c.92 0 1.83.09 2.7.28c.46.1.8.51.8.98z"
			></path>
			<path
				fill="currentColor"
				d="M13.98 11.01c-.32 0-.61-.2-.71-.52c-.13-.39.09-.82.48-.94c1.54-.5 3.53-.66 5.36-.45c.41.05.71.42.66.83s-.42.71-.83.66c-1.62-.19-3.39-.04-4.73.39c-.08.01-.16.03-.23.03m0 2.66c-.32 0-.61-.2-.71-.52c-.13-.39.09-.82.48-.94c1.53-.5 3.53-.66 5.36-.45c.41.05.71.42.66.83s-.42.71-.83.66c-1.62-.19-3.39-.04-4.73.39a1 1 0 0 1-.23.03m0 2.66c-.32 0-.61-.2-.71-.52c-.13-.39.09-.82.48-.94c1.53-.5 3.53-.66 5.36-.45c.41.05.71.42.66.83s-.42.7-.83.66c-1.62-.19-3.39-.04-4.73.39a1 1 0 0 1-.23.03"
			></path>
		</svg>
	),
	remix: () => (
		<svg
			width="1.2em"
			height="1.2em"
			viewBox="0 0 412 474"
			fill="none"
			xmlns="http://www.w3.org/2000/svg"
		>
			<path
				fillRule="evenodd"
				clipRule="evenodd"
				d="M393.946 364.768C398.201 419.418 398.201 445.036 398.201 473H271.756C271.756 466.909 271.865 461.337 271.975 455.687C272.317 438.123 272.674 419.807 269.828 382.819C266.067 328.667 242.748 316.634 199.871 316.634H161.883H1V218.109H205.889C260.049 218.109 287.13 201.633 287.13 158.011C287.13 119.654 260.049 96.4098 205.889 96.4098H1V0H228.456C351.069 0 412 57.9117 412 150.42C412 219.613 369.123 264.739 311.201 272.26C360.096 282.037 388.681 309.865 393.946 364.768Z"
				fill="currentColor"
			/>
			<path
				d="M1 473V399.553H134.697C157.029 399.553 161.878 416.116 161.878 425.994V473H1Z"
				fill="currentColor"
			/>
			<path
				d="M1 399.053H0.5V399.553V473V473.5H1H161.878H162.378V473V425.994C162.378 420.988 161.152 414.26 157.063 408.77C152.955 403.255 146.004 399.053 134.697 399.053H1Z"
				stroke="currentColor"
				strokeOpacity="0.8"
			/>
		</svg>
	),
	elysia: () => (
		<svg
			width="1.2em"
			height="1.2em"
			viewBox="0 0 512 512"
			fill="none"
			xmlns="http://www.w3.org/2000/svg"
		>
			<path
				fillRule="evenodd"
				clipRule="evenodd"
				d="M424.404 470.816C478.089 423.889 512 354.905 512 278C512 136.615 397.385 22 256 22C114.615 22 0 136.615 0 278C0 352.658 31.9583 419.851 82.9409 466.646L83.1767 465L419.144 355L424.404 470.816Z"
				fill="currentColor"
			/>
			<path
				d="M189.915 52.7412L144.5 46L151.303 43.9069C155.402 42.6455 159.248 40.6719 162.662 38.0765L163.73 37.2654C167.845 34.1375 171.12 30.0364 173.259 25.3304C174.414 22.7883 175.224 20.1027 175.665 17.3454L176.173 14.1698C176.72 10.7473 176.692 7.25741 176.09 3.84416C175.834 2.39429 177.279 1.23239 178.64 1.79296L180.498 2.55815C182.829 3.51798 185.084 4.65434 187.242 5.95732L194.965 10.6205C205.229 16.8174 214.226 24.9023 221.48 34.4477L226.616 41.2051C228.529 43.7228 230.783 45.9625 233.313 47.8599C236.088 49.9411 239.164 51.5874 242.435 52.7418L246 54L227.274 54.749C214.785 55.2486 202.278 54.5764 189.915 52.7412Z"
				fill="currentColor"
			/>
			<path
				d="M178.321 93.006L191.79 68.3844C191.922 68.143 191.93 67.8528 191.812 67.6042L187.22 57.9361C184.337 51.8673 178.219 48 171.5 48L170.23 47.9562C161.437 47.653 152.704 46.3829 144.188 44.169L142.504 43.731C135.521 41.9153 128.746 39.3732 122.293 36.1463L119.446 34.723C115.159 32.5797 111.099 30.012 107.325 27.0584L103.55 24.1043C102.428 23.2265 100.803 23.4506 99.9606 24.5992C97.3651 28.1384 95.7379 32.2935 95.2395 36.6541L94.5535 42.6571C94.1854 45.8774 94.1446 49.1267 94.4316 52.3552L96.1031 71.1595C97.3467 85.1501 102.175 98.584 110.123 110.165L111.825 112.645C114.267 116.203 117.113 119.466 120.306 122.369C120.756 122.778 121.329 123.03 121.936 123.084C145.029 125.156 167.194 113.348 178.321 93.006Z"
				fill="currentColor"
			/>
			<path
				d="M127.378 123.538L143.376 116.613C150.438 113.557 152.588 104.577 147.676 98.6533C143.683 93.8378 136.58 93.0803 131.661 96.9453L127.867 99.9256C126.958 100.64 126.127 101.448 125.387 102.336L116.263 113.284C114.982 114.822 115.084 117.084 116.5 118.5L119.318 121.721C119.77 122.237 120.296 122.685 120.878 123.049C122.833 124.271 125.263 124.453 127.378 123.538Z"
				fill="#EDEDED"
			/>
			<path
				d="M147.988 44.8437L147.5 45L148.962 45.4651C155.294 47.4798 161.861 48.66 168.498 48.9761C168.83 48.9919 169.163 48.9534 169.483 48.8619L172.5 48L174 47.5L164.419 45.4172C163.158 45.1431 161.982 44.5687 160.991 43.7426C160.218 43.0981 160.223 41.9084 161.002 41.2708L162.423 40.1084C164.12 38.7197 165.493 36.976 166.444 35C160.934 39.3642 154.682 42.6988 147.988 44.8437Z"
				fill="#B2B2B2"
			/>
			<path
				d="M202.776 219.428L72.2905 452.693C71.643 453.851 70.0687 454.069 69.1308 453.131L66.5 450.5L55.5 438L48.4888 428.927C41.8407 420.323 35.9052 411.192 30.7414 401.624L29.7434 399.775C24.2581 389.611 19.6635 378.991 16.0112 368.034L12.5 357.5C7.22519 338.379 6.01447 318.365 8.94583 298.747L9.06961 297.919C10.354 289.323 12.4034 280.86 15.1935 272.629L21 255.5L25.3334 246.385C32.0537 232.249 41.3193 219.472 52.6669 208.691L58.1719 203.462C69.5529 192.65 83.3937 184.769 98.5 180.5C94.967 181.498 91.3608 182.216 87.7149 182.647L80.5 183.5L75 184L69 185L63 185.561L59 186L56.1186 186.18C55.1927 186.238 54.7576 185.057 55.4998 184.5L55.5002 184.5L59.5273 182.57C72.5066 176.351 83.1766 166.172 90 153.5L94.4475 146.562C99.7511 138.288 106.807 131.28 115.116 126.032L116.833 124.948C119.935 122.989 123.246 121.384 126.705 120.163L142.446 114.607C145.348 113.583 147.69 111.39 148.903 108.561L149.143 108C149.705 106.687 149.932 105.255 149.803 103.833C149.608 101.689 148.616 99.6966 147.023 98.2485L144.256 95.7328C144.086 95.5779 143.93 95.4073 143.792 95.2232L126 71.5L111.803 51.9315C108.994 48.0592 107.359 43.4599 107.094 38.6832C107.051 37.9263 107.836 37.4015 108.52 37.7295L123.881 45.1028C137.174 51.4834 152.33 52.825 166.537 48.8786C169.84 47.9612 173.214 47.3242 176.624 46.9745L183.675 46.2513C201.406 44.4328 219.32 45.9054 236.516 50.5953L238 51L254.798 57.0472C275.869 64.6329 292.567 81.0571 300.5 102L304.022 115.734C305.004 119.567 306.392 123.285 308.162 126.824C312.321 135.142 318.495 142.289 326.121 147.613L335.084 153.87C339.023 156.62 343.157 159.078 347.453 161.227L367.289 171.145C368.178 171.589 368.444 172.732 367.843 173.523C362.372 180.721 355.148 186.395 346.859 190.005L335.371 195.008C330.797 197 326.081 198.65 321.262 199.945L312.822 202.212C300.992 205.39 288.796 207 276.546 207H256.333C252.148 207 248.001 206.213 244.108 204.679C228.581 198.562 210.923 204.863 202.776 219.428Z"
				fill="white"
			/>
			<path
				d="M271.185 135.316L279.987 135.418C281.182 135.432 281.452 133.748 280.312 133.388C278.441 132.797 276.623 132.048 274.879 131.15L268.008 127.61C263.35 125.211 258.969 122.308 254.944 118.953L253.592 117.827C250.54 115.283 247.77 112.418 245.33 109.282L243.768 107.273C243.234 106.586 242.134 107.005 242.192 107.873C243.212 123.186 255.839 135.138 271.185 135.316Z"
				fill="#666666"
			/>
			<path
				d="M82.2231 456.395L231.313 323.4C245.367 310.863 257.58 296.403 267.59 280.45L268.5 279C273.404 269.192 275.497 258.217 274.547 247.293L273.24 232.258C272.436 223.009 268.618 214.28 262.373 207.41C262.131 207.144 261.81 206.961 261.457 206.889L237.5 202C220.117 196.752 201.688 195.995 183.933 199.8L183 200L169.06 203.259C128.405 212.763 92.5742 236.685 68.2116 270.592L67.597 271.447C60.8846 280.789 55.1822 290.817 50.5856 301.362L49.765 303.245C38.1544 329.881 34.2409 359.238 38.4684 387.985L39.8511 397.387C41.2751 407.07 44.1931 416.474 48.5011 425.262C52.4798 433.379 57.6014 440.883 63.7095 447.547L71.3177 455.847C74.1911 458.981 79.0498 459.225 82.2231 456.395Z"
				fill="#CCCCCC"
			/>
			<path
				d="M212.749 278.858L212.267 279.133C199.686 286.322 192.918 299.892 193.58 314.367C193.768 318.484 197.893 322.255 201.858 321.132L209.163 319.062C218.607 316.386 227.353 311.681 234.789 305.274L256 287L262.292 282.343C298.871 255.269 344.833 244.113 389.754 251.405C391.14 251.63 391.184 253.607 389.81 253.894L384.5 255L382.093 255.842C377.15 257.572 372.856 260.776 369.79 265.022C369.214 265.819 369.982 266.89 370.922 266.601L372.663 266.065C382.467 263.049 392.751 261.904 402.978 262.691L407 263C428.843 263.95 449.114 274.626 462.254 292.1L467.179 298.65C481.776 318.063 487.953 342.53 484.319 366.545L482.421 379.087C479.837 396.163 473.618 412.486 464.184 426.952L463.5 428L453 442L441.5 455L430.965 465.114C421.346 474.348 410.827 482.597 399.567 489.738L396 492L389.175 495.25C387.417 496.087 385.95 493.678 387.5 492.5L397 483.5L398.953 481.449C404.232 475.906 408.027 469.12 409.986 461.721L410.889 458.309C411.295 456.776 411.5 455.174 411.5 453.588C411.5 444.909 405.354 437.298 396.836 435.631C391.554 434.597 386.085 435.962 381.907 439.356L372.5 447L355.894 460.587C344.995 469.504 333.185 477.245 320.66 483.682L303.5 492.5L274.5 503.5L268.412 505.16C257.822 508.049 247.012 510.06 236.092 511.174L228 512H202L167.5 508.25L148.832 504.21C138.985 502.079 129.456 498.682 120.482 494.103C113.181 490.378 106.293 485.894 99.931 480.725L85.5 469C68.005 455.64 57.0449 435.448 55.3749 413.498L54.5 402L55.5295 385.822C57.134 360.608 66.7911 336.576 83.0792 317.263C89.6652 309.454 97.2376 302.534 105.606 296.675L108.677 294.526C121.458 285.579 135.72 278.961 150.805 274.976L160.947 272.297C174.135 268.813 187.952 268.445 201.307 271.22L211.887 273.418C214.542 273.97 215.103 277.513 212.749 278.858Z"
				fill="#5E5E5E"
			/>
		</svg>
	),
	tanstack: (props?: SVGProps<any>) => (
		<svg
			className={cn(props?.className)}
			xmlns="http://www.w3.org/2000/svg"
			width="1.2em"
			height="1.2em"
			viewBox="0 0 100 100"
		>
			<mask
				id="a"
				style={{ maskType: "alpha" }}
				maskUnits="userSpaceOnUse"
				x="0"
				y="0"
				width="100"
				height="100"
			>
				<circle cx="50" cy="50" r="50" className="fill-foreground" />
			</mask>
			<g mask="url(#a)">
				<circle
					cx="11"
					cy="119"
					r="52"
					className="fill-muted-foreground stroke-foreground"
					strokeWidth="4"
				/>
				<circle
					cx="10"
					cy="125"
					r="52"
					className="fill-muted-foreground stroke-foreground"
					strokeWidth="4"
				/>
				<circle
					cx="9"
					cy="131"
					r="52"
					className="fill-muted-foreground stroke-muted-foreground"
					strokeWidth="4"
				/>
				<circle
					cx="88"
					cy="119"
					r="52"
					className="fill-muted-foreground stroke-foreground"
					strokeWidth="4"
				/>
				<path
					className="fill-foreground"
					d="M89 35h2v5h-2zM83 34l2 1-1 4h-2zM77 31l2 1-3 4-2-1zM73 27l1 1-3 4-1-2zM70 23l1 1-4 3-1-2zM68 18v2l-4 1-1-2zM68 11l1 2-5 1-1-2zM69 6v2h-5V6z"
				/>
				<circle
					cx="89"
					cy="125"
					r="52"
					className="fill-muted-foreground stroke-foreground"
					strokeWidth="4"
				/>
				<circle
					cx="90"
					cy="131"
					r="52"
					className="fill-muted-foreground stroke-muted-foreground"
					strokeWidth="4"
				/>
				<ellipse
					cx="49.5"
					cy="119"
					rx="41.5"
					ry="51"
					className="fill-muted-foreground"
				/>
				<path
					d="M34 38v-9c1 1 2 4 5 6l7 30-8 2c-1-23-2-23-4-29Z"
					className="fill-foreground stroke-muted-foreground"
				/>
				<path
					fillRule="evenodd"
					clipRule="evenodd"
					d="M95 123c0 31-20 57-45 57S5 154 5 123c0-27 14-50 33-56l12-2c25 0 45 26 45 58Zm-45 47c22 0 39-22 39-50S72 70 50 70s-39 22-39 50 17 50 39 50Z"
					className="fill-foreground"
				/>
				<path
					d="M34 29c-4-8-11-5-14-4 2 3 5 4 9 4h5Z"
					className="fill-foreground stroke-muted-foreground"
				/>
				<path
					d="M25 38c-1 6 0 14 2 18 5-7 7-13 7-18v-9c-5 1-7 5-9 9Z"
					className="fill-muted-foreground"
				/>
				<path
					d="M34 29c-1 3-5 11-5 16m5-16c-5 1-7 5-9 9-1 6 0 14 2 18 5-7 7-13 7-18v-9Z"
					className="stroke-muted-foreground"
				/>
				<path
					d="M44 18c-10 1-11 7-10 11l4-3c5-4 6-7 6-8Z"
					className="fill-foreground stroke-muted-foreground"
				/>
				<path
					d="M34 29h7l18 4c-3-6-9-14-21-7l-4 3Z"
					className="fill-foreground"
				/>
				<path
					d="M34 29c4-2 12-5 18-1m-18 1h7l18 4c-3-6-9-14-21-7l-4 3Z"
					className="stroke-muted-foreground"
				/>
				<path
					d="M32 29a1189 1189 0 0 1-16 19c0-17 7-18 13-19h5a14 14 0 0 1-2 0Z"
					className="fill-foreground"
				/>
				<path
					d="M34 29c-5 1-7 5-9 9l-9 10c0-17 7-18 13-19h5Zm0 0c-5 2-11 3-14 10"
					className="stroke-muted-foreground"
				/>
				<path
					d="M41 29c9 2 13 10 15 14a25 25 0 0 1-22-14h7Z"
					className="fill-foreground"
				/>
				<path
					d="M34 29c3 1 11 5 15 9m-15-9h7c9 2 13 10 15 14a25 25 0 0 1-22-14Z"
					className="stroke-muted-foreground"
				/>
				<circle
					cx="91.5"
					cy="12.5"
					r="18.5"
					className="fill-foreground stroke-muted-foreground"
					strokeWidth="2"
				/>
			</g>
		</svg>
	),
	expo: (props?: SVGProps<any>) => (
		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="1.2em"
			height="1.2em"
			viewBox="0 0 32 32"
			{...props}
		>
			<path
				fill="currentColor"
				d="M24.292 15.547a3.93 3.93 0 0 0 4.115-3.145a2.57 2.57 0 0 0-2.161-1.177c-2.272-.052-3.491 2.651-1.953 4.323zm-9.177-10.85l5.359-3.104L18.766.63l-7.391 4.281l.589.328l1.119.629l2.032-1.176zm6.046-3.39c.089.027.161.1.188.188l2.484 7.593a.285.285 0 0 1-.125.344a5.06 5.06 0 0 0-2.317 5.693a5.066 5.066 0 0 0 5.401 3.703a.3.3 0 0 1 .307.203l2.563 7.803a.3.3 0 0 1-.125.344l-7.859 4.771a.3.3 0 0 1-.131.036a.26.26 0 0 1-.203-.041l-2.765-1.797a.3.3 0 0 1-.109-.129l-5.396-12.896l-8.219 4.875c-.016.011-.037.021-.052.032a.3.3 0 0 1-.261-.021l-1.859-1.093a.283.283 0 0 1-.115-.381l7.953-15.749a.27.27 0 0 1 .135-.131L18.615.045a.29.29 0 0 1 .292-.005zm-8.322 5.1l-1.932-1.089l-7.693 15.229l1.396.823l6.631-9.015a.28.28 0 0 1 .271-.12a.29.29 0 0 1 .235.177l7.228 17.296l1.933 1.251l-8.063-24.552zm13.406 10.557c-2.256 0-3.787-2.292-2.923-4.376c.86-2.083 3.563-2.619 5.156-1.025c.595.593.928 1.396.928 2.235a3.16 3.16 0 0 1-3.161 3.167z"
			></path>
		</svg>
	),
	x: (props?: SVGProps<any>) => (
		<svg
			{...props}
			width={30}
			stroke="currentColor"
			fill="currentColor"
			strokeWidth="0"
			viewBox="0 0 512 512"
			xmlns="http://www.w3.org/2000/svg"
			className="w-full"
		>
			<path d="M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z"></path>
		</svg>
	),
	linkedIn: (props?: SVGProps<any>) => (
		<svg
			{...props}
			width={30}
			stroke="currentColor"
			fill="currentColor"
			strokeWidth="0"
			viewBox="0 0 448 512"
			xmlns="http://www.w3.org/2000/svg"
			className="w-full"
		>
			<path d="M100.28 448H7.4V148.9h92.88zM53.79 108.1C24.09 108.1 0 83.5 0 53.8a53.79 53.79 0 0 1 107.58 0c0 29.7-24.1 54.3-53.79 54.3zM447.9 448h-92.68V302.4c0-34.7-.7-79.2-48.29-79.2-48.29 0-55.69 37.7-55.69 76.7V448h-92.78V148.9h89.08v40.8h1.3c12.4-23.5 42.69-48.3 87.88-48.3 94 0 111.28 61.9 111.28 142.3V448z"></path>
		</svg>
	),
	nitro: (props?: SVGProps<any>) => (
		<svg
			xmlns="http://www.w3.org/2000/svg"
			fill="currentColor" // Use currentColor here
			width="1.2em"
			height="1.2em"
			viewBox="0 0 40 40"
			{...props}
		>
			<g clipPath="url(#a)">
				<path
					fill="currentColor" // Use currentColor here
					fillRule="evenodd"
					d="M35.217 7.02C28.047-1.383 15.424-2.384 7.02 4.785c-8.404 7.169-9.404 19.792-2.236 28.196 7.17 8.403 19.793 9.404 28.196 2.235 8.404-7.169 9.404-19.793 2.236-28.196Zm-9.964 10.497c.77 0 1.262.836.876 1.502l-.112.192L18.47 31.63a.773.773 0 0 1-.661.372h-.72a.755.755 0 0 1-.732-.944l2.048-7.919a1 1 0 0 0-.968-1.25h-3.146a1 1 0 0 1-.968-1.25l3.09-11.955a.923.923 0 0 1 .895-.68c.05 0 .097 0 .135.002h3.168a1 1 0 0 1 .991 1.134l-.02.143-1.207 7.067a1 1 0 0 0 .985 1.168h3.893Z"
					clipRule="evenodd"
				/>
				<mask
					id="d"
					x={0}
					y={0}
					maskUnits="userSpaceOnUse"
					style={{
						maskType: "alpha",
					}}
				>
					<circle cx={20} cy={20.001} r={20} fill="currentColor" />
				</mask>
				<g filter="url(#e)" mask="url(#d)">
					<path
						fill="currentColor" // Use currentColor here
						d="M1.111 13.427a20 20 0 1 0 37.957.541l-5.815 1.84a13.901 13.901 0 1 1-26.381-.376l-5.76-2.005Z"
					/>
				</g>
			</g>
			<defs>
				<clipPath id="a">
					<path fill="#fff" d="M0 0h146v40.001H0z" />
				</clipPath>
				<filter
					id="e"
					x={-10}
					y={3.427}
					colorInterpolationFilters="sRGB"
					filterUnits="userSpaceOnUse"
				>
					<feFlood floodOpacity={0} result="BackgroundImageFix" />
					<feBlend in="SourceGraphic" in2="BackgroundImageFix" result="shape" />
					<feGaussianBlur
						result="effect1_foregroundBlur_115_108"
						stdDeviation={5}
					/>
				</filter>
			</defs>
		</svg>
	),
	vk: (props?: SVGProps<any>) => (
		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="1.2em"
			height="1.2em"
			viewBox="0 0 20 20"
			{...props}
		>
			<path
				fill="currentColor"
				fillRule="evenodd"
				d="M17.802 12.298s1.617 1.597 2.017 2.336a.1.1 0 0 1 .018.035q.244.409.123.645c-.135.261-.592.392-.747.403h-2.858c-.199 0-.613-.052-1.117-.4c-.385-.269-.768-.712-1.139-1.145c-.554-.643-1.033-1.201-1.518-1.201a.6.6 0 0 0-.18.03c-.367.116-.833.639-.833 2.032c0 .436-.344.684-.585.684H9.674c-.446 0-2.768-.156-4.827-2.327C2.324 10.732.058 5.4.036 5.353c-.141-.345.155-.533.475-.533h2.886c.387 0 .513.234.601.444c.102.241.48 1.205 1.1 2.288c1.004 1.762 1.621 2.479 2.114 2.479a.53.53 0 0 0 .264-.07c.644-.354.524-2.654.494-3.128c0-.092-.001-1.027-.331-1.479c-.236-.324-.638-.45-.881-.496c.065-.094.203-.238.38-.323c.441-.22 1.238-.252 2.029-.252h.439c.858.012 1.08.067 1.392.146c.628.15.64.557.585 1.943c-.016.396-.033.842-.033 1.367c0 .112-.005.237-.005.364c-.019.711-.044 1.512.458 1.841a.4.4 0 0 0 .217.062c.174 0 .695 0 2.108-2.425c.62-1.071 1.1-2.334 1.133-2.429c.028-.053.112-.202.214-.262a.5.5 0 0 1 .236-.056h3.395c.37 0 .621.056.67.196c.082.227-.016.92-1.566 3.016c-.261.349-.49.651-.691.915c-1.405 1.844-1.405 1.937.083 3.337"
				clipRule="evenodd"
			/>
		</svg>
	),
};
</file>

<file path="src/components/landing/opensource.tsx">
import { BsDiscord, BsGithub, BsTwitterX } from "react-icons/bs";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import Link from "next/link";

export function OpenSource() {
    const socials = [
        {
            name: "GitHub",
            icon: BsGithub,
            href: "https://github.com/dodopayments/billingsdk",
            description: "View our open source code and contribute to the project"
        },
        {
            name: "X/ Twitter",
            icon: BsTwitterX,
            href: "https://x.com/dodopayments",
            description: "Follow us for updates and announcements on our products"
        },
        {
            name: "Discord",
            icon: BsDiscord,
            href: "https://discord.com/invite/bYqAp4ayYh",
            description: "Join our community for support and discussions"
        }
    ]
    return (
        <div className="flex flex-col mt-12 md:mt-16 w-full max-w-4xl mx-auto mb-12">
            <h2 className="text-3xl sm:text-3xl font-display md:text-4xl font-medium text-primary text-center mb-4">
                Join our community
            </h2>
            <p className="text-sm mt-2 text-muted-foreground max-w-2xl mx-auto tracking-tight text-center mb-8">
                Connect with other developers, get help, and contribute to the project
            </p>
            <div className="flex flex-col md:flex-row gap-4 md:gap-6 justify-center items-center">
            {socials.map((social) => (
                <Card key={social.name} className="w-full max-w-[280px] md:max-w-xs h-48 cursor-pointer flex flex-col bg-card/50 hover:bg-card/80 transition-all duration-300">
                    <Link href={social.href} target="_blank" className="flex flex-col h-full">
                        <CardContent className="flex flex-col gap-2 items-center justify-center p-6 flex-1">
                            <social.icon className="text-3xl md:text-4xl text-foreground" />
                            <p className="text-base font-medium text-foreground">{social.name}</p>
                        </CardContent>
                        <CardFooter className="px-4 pb-4 mt-auto">
                            <p className="text-xs text-muted-foreground text-center leading-relaxed">
                                {social.description}
                            </p>
                        </CardFooter>
                    </Link>
                </Card>
            ))}
            </div>
        </div>
    )
}
</file>

<file path="src/components/ui/cover.tsx">
"use client";
import React, { useEffect, useId, useState } from "react";
import { AnimatePresence, motion } from "motion/react";
import { useRef } from "react";
import { cn } from "@/lib/utils";
import { SparklesCore } from "@/components/ui/sparkles";

export const Cover = ({
  children,
  className,
}: {
  children?: React.ReactNode;
  className?: string;
}) => {
  const [hovered, setHovered] = useState(false);

  const ref = useRef<HTMLDivElement>(null);

  const [containerWidth, setContainerWidth] = useState(0);
  const [beamPositions, setBeamPositions] = useState<number[]>([]);

  useEffect(() => {
    if (ref.current) {
      setContainerWidth(ref.current?.clientWidth ?? 0);

      const height = ref.current?.clientHeight ?? 0;
      const numberOfBeams = Math.floor(height / 10); // Adjust the divisor to control the spacing
      const positions = Array.from(
        { length: numberOfBeams },
        (_, i) => (i + 1) * (height / (numberOfBeams + 1))
      );
      setBeamPositions(positions);
    }
  }, [ref.current]);

  return (
    <div
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
      ref={ref}
      className="relative hover:bg-neutral-900  group/cover inline-block dark:bg-neutral-900 bg-neutral-100 px-2 pb-2 leading-none  transition duration-200 rounded-sm"
    >
      <AnimatePresence>
        {hovered && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{
              opacity: {
                duration: 0.2,
              },
            }}
            className="h-full w-full overflow-hidden absolute inset-0"
          >
            <motion.div
              animate={{
                translateX: ["-50%", "0%"],
              }}
              transition={{
                translateX: {
                  duration: 10,
                  ease: "linear",
                  repeat: Infinity,
                },
              }}
              className="w-[200%] h-full flex"
            >
              <SparklesCore
                background="transparent"
                minSize={0.4}
                maxSize={1}
                particleDensity={500}
                className="w-full h-full"
                particleColor="#FFFFFF"
              />
              <SparklesCore
                background="transparent"
                minSize={0.4}
                maxSize={1}
                particleDensity={500}
                className="w-full h-full"
                particleColor="#FFFFFF"
              />
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
      {beamPositions.map((position, index) => (
        <Beam
          key={index}
          hovered={hovered}
          duration={Math.random() * 2 + 1}
          delay={Math.random() * 2 + 1}
          width={containerWidth}
          style={{
            top: `${position}px`,
          }}
        />
      ))}
      <motion.span
        key={String(hovered)}
        animate={{
          scale: hovered ? 0.8 : 1,
          x: hovered ? [0, -30, 30, -30, 30, 0] : 0,
          y: hovered ? [0, 30, -30, 30, -30, 0] : 0,
        }}
        exit={{
          filter: "none",
          scale: 1,
          x: 0,
          y: 0,
        }}
        transition={{
          duration: 0.2,
          x: {
            duration: 0.2,
            repeat: Infinity,
            repeatType: "loop",
          },
          y: {
            duration: 0.2,
            repeat: Infinity,
            repeatType: "loop",
          },
          scale: {
            duration: 0.2,
          },
          filter: {
            duration: 0.2,
          },
        }}
        className={cn(
          "dark:text-white inline-block text-neutral-900 relative z-20 group-hover/cover:text-white transition duration-200",
          className
        )}
      >
        {children}
      </motion.span>
      <CircleIcon className="absolute -right-[2px] -top-[2px]" />
      <CircleIcon className="absolute -bottom-[2px] -right-[2px]" delay={0.4} />
      <CircleIcon className="absolute -left-[2px] -top-[2px]" delay={0.8} />
      <CircleIcon className="absolute -bottom-[2px] -left-[2px]" delay={1.6} />
    </div>
  );
};

export const Beam = ({
  className,
  delay,
  duration,
  hovered,
  width = 600,
  ...svgProps
}: {
  className?: string;
  delay?: number;
  duration?: number;
  hovered?: boolean;
  width?: number;
} & React.ComponentProps<typeof motion.svg>) => {
  const id = useId();

  return (
    <motion.svg
      width={width ?? "600"}
      height="1"
      viewBox={`0 0 ${width ?? "600"} 1`}
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={cn("absolute inset-x-0 w-full", className)}
      {...svgProps}
    >
      <motion.path
        d={`M0 0.5H${width ?? "600"}`}
        stroke={`url(#svgGradient-${id})`}
      />

      <defs>
        <motion.linearGradient
          id={`svgGradient-${id}`}
          key={String(hovered)}
          gradientUnits="userSpaceOnUse"
          initial={{
            x1: "0%",
            x2: hovered ? "-10%" : "-5%",
            y1: 0,
            y2: 0,
          }}
          animate={{
            x1: "110%",
            x2: hovered ? "100%" : "105%",
            y1: 0,
            y2: 0,
          }}
          transition={{
            duration: hovered ? 0.5 : duration ?? 2,
            ease: "linear",
            repeat: Infinity,
            delay: hovered ? Math.random() * (1 - 0.2) + 0.2 : 0,
            repeatDelay: hovered ? Math.random() * (2 - 1) + 1 : delay ?? 1,
          }}
        >
          <stop stopColor="#2EB9DF" stopOpacity="0" />
          <stop stopColor="#3b82f6" />
          <stop offset="1" stopColor="#3b82f6" stopOpacity="0" />
        </motion.linearGradient>
      </defs>
    </motion.svg>
  );
};

export const CircleIcon = ({
  className,
  delay,
}: {
  className?: string;
  delay?: number;
}) => {
  return (
    <div
      className={cn(
        `pointer-events-none animate-pulse group-hover/cover:hidden group-hover/cover:opacity-100 group h-2 w-2 rounded-full bg-neutral-600 dark:bg-white opacity-20 group-hover/cover:bg-white`,
        className
      )}
    ></div>
  );
};
</file>

<file path="src/components/ui/tabs.tsx">
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/components/ui/tooltip.tsx">
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  )
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="src/components/banner-gradient-demo.tsx">
"use client"

import { Banner } from "@/components/billingsdk/banner"
import { useState } from "react"
import { Button } from "./ui/button"

export default function BannerGradientDemo() {
    const [showBanner, setShowBanner] = useState(false)

    const gradientColors = [
        "rgba(0,149,255,0.56)",
        "rgba(231,77,255,0.77)",
        "rgba(255,0,0,0.73)",
        "rgba(131,255,166,0.66)"
    ]

    return (
        <div className="w-full space-y-8">
            {/* Default Variant */}
            <div className="space-y-4">
                <h3 className="text-lg font-medium">Default Banner</h3>
                <Banner
                    title="🌈 Experience the magic of gradients!"
                    description="Beautiful animated gradient background with custom colors"
                    buttonText="Start Free Trial"
                    buttonLink="https://example.com/signup"
                    variant="default"
                    gradientColors={gradientColors}
                    className="w-full"
                />
            </div>

            {/* Minimal Variant */}
            <div className="space-y-4">
                <h3 className="text-lg font-medium">Minimal Banner</h3>
                <Banner
                    title="🎉 Start your free trial today!"
                    description="Get 30 days free access"
                    variant="minimal"
                    gradientColors={gradientColors}
                />
            </div>

            {/* Interactive Popup Demo */}
            <div className="space-y-4">
                <h3 className="text-lg font-medium">Popup Banner</h3>
                <div className="flex justify-center">
                    <Button variant="outline" onClick={() => setShowBanner(true)}>
                        Show Gradient Banner
                    </Button>
                </div>
                {showBanner && (
                    <Banner
                        title="🎉 Start your free trial today!"
                        description="Get 30 days free access to all premium features"
                        variant="popup"
                        gradientColors={gradientColors}
                    />
                )}
            </div>
        </div>
    )
}
</file>

<file path="src/components/cancel-subscription-card-demo.tsx">
"use client";

import { CancelSubscriptionCard } from "@/components/billingsdk/cancel-subscription-card";
import { plans } from "@/lib/billingsdk-config";

export function CancelSubscriptionCardDemo() {
    return(

      <div className="flex flex-col w-full">
      <CancelSubscriptionCard
        title="We're sorry to see you go..."
        description={`Before you cancel, we hope you'll consider upgrading to a ${plans[1].title} plan again.`}
        plan={plans[1]}
        leftPanelImageUrl="https://framerusercontent.com/images/GWE8vop9hubsuh3uWWn0vyuxEg.webp"
        warningTitle="You will lose access to your account"
        warningText="If you cancel your subscription, you will lose access to your account and all your data will be deleted."
        keepButtonText={`Keep My ${plans[1].title} Plan`}
        continueButtonText="Continue with Cancellation"
        finalTitle="Final Step - Confirm Cancellation"
        finalSubtitle="This action will immediately cancel your subscription"
        finalWarningText="You'll lose access to all Pro features and your data will be permanently deleted after 30 days."
        goBackButtonText="Wait, Go Back"
        confirmButtonText="Yes, Cancel My Subscription"
        onCancel={async (planId) => {
          console.log('Cancelling subscription for plan:', planId);
          return new Promise((resolve) => {
            setTimeout(() => {
              resolve(void 0);
            }, 1000);
          });
        }}
        onKeepSubscription={async (planId) => {
          console.log('Keeping subscription for plan:', planId);
        }}
        className="max-w-4xl"
      />
    </div>
    )
}
</file>

<file path="src/components/cancel-subscription-dialog-demo.tsx">
"use client";

import { CancelSubscriptionDialog } from "@/components/billingsdk/cancel-subscription-dialog";
import { plans } from "@/lib/billingsdk-config";

export function CancelSubscriptionDialogDemo() {
    return(

      <div className="flex flex-1 flex-col justify-center text-center p-4 mx-auto min-h-[300px]">
      <CancelSubscriptionDialog
        title="We're sorry to see you go..."
        description={`Before you cancel, we hope you'll consider upgrading to a ${plans[1].title} plan again.`}
        plan={plans[1]}
        triggerButtonText="Cancel Subscription"
        leftPanelImageUrl="https://framerusercontent.com/images/GWE8vop9hubsuh3uWWn0vyuxEg.webp"
        warningTitle="You will lose access to your account"
        warningText="If you cancel your subscription, you will lose access to your account and all your data will be deleted."
        keepButtonText={`Keep My ${plans[1].title} Plan`}
        continueButtonText="Continue with Cancellation"
        finalTitle="Final Step - Confirm Cancellation"
        finalSubtitle="This action will immediately cancel your subscription"
        finalWarningText="You'll lose access to all Pro features and your data will be permanently deleted after 30 days."
        goBackButtonText="Wait, Go Back"
        confirmButtonText="Yes, Cancel My Subscription"
        onCancel={async (planId) => {
          console.log('Cancelling subscription for plan:', planId);
          return new Promise((resolve) => {
            setTimeout(() => {
              resolve(void 0);
            }, 1000);
          });
        }}
        onKeepSubscription={async (planId) => {
          console.log('Keeping subscription for plan:', planId);
        }}
        onDialogClose={() => {
          console.log('Dialog closed');
        }}
        className="max-w-4xl"
      />
    </div>
    )
}
</file>

<file path="src/components/pricing-table-three-demo.tsx">
'use client'

import { PricingTableThree } from '@/components/billingsdk/pricing-table-three';
import { plans } from '@/lib/billingsdk-config';

export function PricingTableThreeDemo() {

    return (
        <PricingTableThree 
            plans={plans}
            onPlanSelect={(planId) => console.log('Selected plan:', planId)}
            className={"w-full max-w-4xl mx-auto"}
            variant="small"
            showFooter={true}
            footerText="Pre-negotiated discounts are available to early-stage startups and nonprofits."
            footerButtonText="Apply now"
            onFooterButtonClick={() => console.log('Footer button clicked')}
        />
    );
}
</file>

<file path="src/components/pricing-table-two-demo.tsx">
"use client"

import { plans } from "@/lib/billingsdk-config";
import { PricingTableTwo } from "@/components/billingsdk/pricing-table-two";

export function PricingTableTwoDemo() {
    return <>
        <PricingTableTwo plans={plans} className="w-full max-w-4xl mx-auto"
            title={`We offer ${plans.length} plans`}
            description="Choose the plan that's right for you"
            onPlanSelect={(planId) => console.log('Selected plan:', planId)}
            size="small" // small, medium, large
            theme="classic" // minimal or classic
        />
    </>
}
</file>

<file path="src/components/pricing-table-two-minimal-demo.tsx">
"use client"

import { plans } from "@/lib/billingsdk-config";
import { PricingTableTwo } from "@/components/billingsdk/pricing-table-two";

export function PricingTableTwoMinimalDemo() {
    return <>
        <PricingTableTwo plans={plans} className="w-full max-w-4xl mx-auto"
            title={`We offer ${plans.length} plans`}
            description="Choose the plan that's right for you"
            onPlanSelect={(planId) => console.log('Selected plan:', planId)}
            size="small" // small, medium, large
            theme="minimal" // minimal or classic
        />
    </>
}
</file>

<file path="src/components/search.tsx">
'use client';
import {
  type ComponentProps,
  createContext,
  type SyntheticEvent,
  use,
  useEffect,
  useRef,
  useState,
} from 'react';
import { Loader2, RefreshCw, Send, X } from 'lucide-react';
import { cn } from '@/lib/utils';
import { buttonVariants } from './ui/button';
import Link from 'fumadocs-core/link';
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogOverlay,
  DialogPortal,
  type DialogProps,
  DialogTitle,
} from '@radix-ui/react-dialog';
import { type UIMessage, useChat, type UseChatHelpers } from '@ai-sdk/react';
import type { ProvideLinksToolSchema } from '../lib/inkeep-qa-schema';
import type { z } from 'zod';
import { DefaultChatTransport } from 'ai';
import { Markdown } from './markdown';

const ChatContext = createContext<UseChatHelpers<UIMessage> | null>(null);
function useChatContext() {
  return use(ChatContext)!;
}

function SearchAIActions(props: ComponentProps<'div'>) {
  const { messages, status, setMessages, regenerate } = useChatContext();
  const isLoading = status === 'streaming';

  if (messages.length === 0) return null;

  return (
    <div {...props}>
      {!isLoading && messages.at(-1)?.role === 'assistant' && (
        <button
          type="button"
          className={cn(
            buttonVariants({
              variant: 'secondary',
              size: 'sm',
              className: 'rounded-full gap-1.5',
            }),
          )}
          onClick={() => regenerate()}
        >
          <RefreshCw className="size-4" />
          Retry
        </button>
      )}
      <button
        type="button"
        className={cn(
          buttonVariants({
            variant: 'secondary',
            size: 'sm',
            className: 'rounded-full',
          }),
        )}
        onClick={() => setMessages([])}
      >
        Clear Chat
      </button>
    </div>
  );
}

function SearchAIInput(props: ComponentProps<'form'>) {
  const { status, sendMessage, stop } = useChatContext();
  const [input, setInput] = useState('');
  const isLoading = status === 'streaming' || status === 'submitted';
  const onStart = (e?: SyntheticEvent) => {
    e?.preventDefault();
    void sendMessage({ text: input });
    setInput('');
  };

  useEffect(() => {
    if (isLoading) document.getElementById('nd-ai-input')?.focus();
  }, [isLoading]);

  return (
    <form
      {...props}
      className={cn('flex items-start pe-2', props.className)}
      onSubmit={onStart}
    >
      <Input
        value={input}
        placeholder={isLoading ? 'AI is answering...' : 'Ask AI something'}
        className="max-h-60 min-h-10 p-3"
        disabled={status === 'streaming' || status === 'submitted'}
        onChange={(e) => {
          setInput(e.target.value);
        }}
        onKeyDown={(event) => {
          if (!event.shiftKey && event.key === 'Enter') {
            onStart(event);
          }
        }}
      />
      {isLoading ? (
        <button
          type="button"
          className={cn(
            buttonVariants({
              variant: 'secondary',
              className: 'rounded-full mt-2 gap-2',
            }),
          )}
          onClick={stop}
        >
          <Loader2 className="size-4 animate-spin text-fd-muted-foreground" />
          Abort Answer
        </button>
      ) : (
        <button
          type="submit"
          className={cn(
            buttonVariants({
              variant: 'ghost',
              className: 'transition-full rounded-full mt-2',
              size: 'icon',
            }),
          )}
          disabled={input.length === 0}
        >
          <Send className="size-4" />
        </button>
      )}
    </form>
  );
}

function List(props: Omit<ComponentProps<'div'>, 'dir'>) {
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!containerRef.current) return;
    function callback() {
      const container = containerRef.current;
      if (!container) return;

      container.scrollTo({
        top: container.scrollHeight,
        behavior: 'instant',
      });
    }

    const observer = new ResizeObserver(callback);
    callback();

    const element = containerRef.current?.firstElementChild;

    if (element) {
      observer.observe(element);
    }

    return () => {
      observer.disconnect();
    };
  }, []);

  return (
    <div
      ref={containerRef}
      {...props}
      className={cn(
        'fd-scroll-container overflow-y-auto max-h-[calc(100dvh-240px)] min-w-0 flex flex-col',
        props.className,
      )}
    >
      {props.children}
    </div>
  );
}

function Input(props: ComponentProps<'textarea'>) {
  const ref = useRef<HTMLDivElement>(null);
  const shared = cn('col-start-1 row-start-1', props.className);

  return (
    <div className="grid flex-1">
      <textarea
        id="nd-ai-input"
        {...props}
        className={cn(
          'resize-none bg-transparent placeholder:text-fd-muted-foreground focus-visible:outline-none',
          shared,
        )}
      />
      <div ref={ref} className={cn(shared, 'break-all invisible')}>
        {`${props.value?.toString() ?? ''}\n`}
      </div>
    </div>
  );
}

const roleName: Record<string, string> = {
  user: 'you',
  assistant: 'fumadocs',
};

function Message({
  message,
  ...props
}: { message: UIMessage } & ComponentProps<'div'>) {
  let markdown = '';
  let links: z.infer<typeof ProvideLinksToolSchema>['links'] = [];

  for (const part of message.parts ?? []) {
    if (part.type === 'text') {
      markdown += part.text;
      continue;
    }

    if (part.type === 'tool-provideLinks' && part.input) {
      links = (part.input as z.infer<typeof ProvideLinksToolSchema>).links;
    }
  }

  return (
    <div {...props}>
      <p
        className={cn(
          'mb-1 text-sm font-medium text-fd-muted-foreground',
          message.role === 'assistant' && 'text-fd-primary',
        )}
      >
        {roleName[message.role] ?? 'unknown'}
      </p>
      <div className="prose text-sm">
        <Markdown text={markdown} />
      </div>
      {links && links.length > 0 ? (
        <div className="mt-2 flex flex-row flex-wrap items-center gap-1">
          {links.map((item, i) => (
            <Link
              key={i}
              href={item.url}
              className="block text-xs rounded-lg border p-3 hover:bg-fd-accent hover:text-fd-accent-foreground"
            >
              <p className="font-medium">{item.title}</p>
              <p className="text-fd-muted-foreground">Reference {item.label}</p>
            </Link>
          ))}
        </div>
      ) : null}
    </div>
  );
}

export default function AISearch(props: DialogProps) {
  const chat = useChat({
    id: 'search',
    transport: new DefaultChatTransport({
      api: '/api/chat',
    }),
  });

  const messages = chat.messages.filter((msg) => msg.role !== 'system');

  return (
    <Dialog {...props}>
      {props.children}
      <DialogPortal>
        <DialogOverlay className="fixed inset-0 z-50 backdrop-blur-xs data-[state=closed]:animate-fd-fade-out data-[state=open]:animate-fd-fade-in" />
        <DialogContent
          onOpenAutoFocus={(e) => {
            document.getElementById('nd-ai-input')?.focus();
            e.preventDefault();
          }}
          aria-describedby={undefined}
          className="fixed flex flex-col w-[calc(100%-1rem)] bg-fd-popover/80 backdrop-blur-xl p-1 rounded-2xl shadow-2xl border max-md:top-12 md:bottom-12 left-1/2 z-50 max-w-screen-sm -translate-x-1/2 focus-visible:outline-none data-[state=open]:animate-fd-dialog-in data-[state=closed]:animate-fd-dialog-out"
        >
          <ChatContext value={chat}>
            <div className="px-3 py-2">
              <DialogTitle className="text-sm font-medium">
                Inkeep AI
              </DialogTitle>
              <DialogDescription className="text-xs text-fd-muted-foreground">
                AI can be inaccurate, please verify the information.
              </DialogDescription>
            </div>
            <DialogClose
              aria-label="Close"
              tabIndex={-1}
              className={cn(
                buttonVariants({
                  size: 'icon',
                  variant: 'ghost',
                  className: 'absolute top-1 end-1 text-fd-muted-foreground',
                }),
              )}
            >
              <X />
            </DialogClose>

            {messages.length > 0 && (
              <List
                style={{
                  maskImage:
                    'linear-gradient(to bottom, transparent, black 20px, black calc(100% - 20px), transparent)',
                }}
              >
                <div className="flex flex-col gap-4 p-3">
                  {messages.map((item) => (
                    <Message key={item.id} message={item} />
                  ))}
                </div>
              </List>
            )}
            <div className="rounded-xl overflow-hidden border border-fd-foreground/20 text-fd-popover-foreground">
              <SearchAIInput />
              <SearchAIActions className="flex flex-row items-center gap-1.5 p-1 empty:hidden" />
            </div>
          </ChatContext>
        </DialogContent>
      </DialogPortal>
    </Dialog>
  );
}
</file>

<file path="src/components/update-plan-card-demo.tsx">
'use client'

import { UpdatePlanCard } from '@/components/billingsdk/update-plan-card';
import { plans } from '@/lib/billingsdk-config';

export function UpdatePlanCardDemo() {

    return (
        <main className="flex flex-1 flex-col justify-center text-center w-full">
            <UpdatePlanCard
                currentPlan={plans[0]}
                plans={plans}
                onPlanChange={(planId) => {
                    console.log("Upgrade plan to", planId)
                }}
            />
        </main>
    );
}
</file>

<file path="src/components/update-plan-dialog-demo.tsx">
'use client'

import { UpdatePlanDialog } from '@/components/billingsdk/update-plan-dialog';
import { plans } from '@/lib/billingsdk-config';

export function UpdatePlanDialogDemo() {

  return (
    <div className="flex flex-1 flex-col justify-center text-center p-4 mx-auto min-h-[300px]">
      <UpdatePlanDialog
        currentPlan={plans[1]}
        plans={plans}
        onPlanChange={(planId) => {
          console.log(planId)
        }}
        triggerText="Update Plan"
      />
    </div>
  );
}
</file>

<file path="src/components/usage-meter-circle-demo.tsx">
'use client'

import { UsageMeter } from "@/components/billingsdk/usage-meter";

export default function UsageMeterCircleDemo() {

  return (
    <div className="flex flex-col gap-4 mx-auto w-full">
      <UsageMeter
        progressColor="usage"
        usage={[{
          name: "Claude Sonnet 4",
          usage: 75,
          limit: 100
        }, {
          name: "ChatGPT 5",
          usage: 12,
          limit: 100
        }, {
          name: "Grok 3",
          usage: 57,
          limit: 100
        }, {
          name: "Gemini 2.5",
          usage: 95,
          limit: 100
        }]}
        title="LLM Usage"
        description="Your usage of the LLM models"
        variant="circle"
        size="md"
        className="mx-auto" />
    </div>

  );
}
</file>

<file path="src/lib/billingsdk-config.ts">
export interface Plan {
    id: string
    title: string
    description: string
    highlight?: boolean
    type?: 'monthly' | 'yearly'
    currency?: string
    monthlyPrice: string
    yearlyPrice: string
    buttonText: string
    badge?: string
    features: {
        name: string
        icon: string
        iconColor?: string
    }[]
}

export interface CurrentPlan {
    plan: Plan
    type: 'monthly' | 'yearly' | 'custom'
    price?: string
    nextBillingDate: string
    paymentMethod: string
    status: 'active' | 'inactive' | 'past_due' | 'cancelled'
}

export const plans: Plan[] = [
    {
        id: 'starter',
        title: 'Starter',
        description: 'For developers testing out Liveblocks locally.',
        currency: '$',
        monthlyPrice: '0',
        yearlyPrice: '0',
        buttonText: 'Start today for free',
        features: [
            {
                name: 'Presence',
                icon: "check",
                iconColor: 'text-green-500'
            },
            {
                name: 'Comments',
                icon: "check",
                iconColor: 'text-orange-500'
            },
            {
                name: 'Notifications',
                icon: "check",
                iconColor: 'text-teal-500'
            },
            {
                name: 'Text Editor',
                icon: "check",
                iconColor: 'text-blue-500'
            },
            {
                name: 'Sync Datastore',
                icon: "check",
                iconColor: 'text-zinc-500'
            }
        ],
    },
    {
        id: 'pro',
        title: 'Pro',
        description: 'For companies adding collaboration in production.',
        currency: '$',
        monthlyPrice: '20',
        yearlyPrice: '199',
        buttonText: 'Sign up',
        badge: 'Most popular',
        highlight: true,
        features: [
            {
                name: 'Presence',
                icon: "check",
                iconColor: 'text-green-500'
            },
            {
                name: 'Comments',
                icon: "check",
                iconColor: 'text-orange-500'
            },
            {
                name: 'Notifications',
                icon: "check",
                iconColor: 'text-teal-500'
            },
            {
                name: 'Text Editor',
                icon: "check",
                iconColor: 'text-blue-500'
            },
            {
                name: 'Sync Datastore',
                icon: "check",
                iconColor: 'text-zinc-500'
            }
        ],
    },
    {
        id: 'enterprise',
        title: 'Enterprise',
        description: 'For organizations that need more support and compliance features.',
        currency: '$',
        monthlyPrice: 'Custom',
        yearlyPrice: 'Custom',
        buttonText: 'Contact sales',
        features: [
            {
                name: 'Presence',
                icon: "check",
                iconColor: 'text-green-500'
            },
            {
                name: 'Comments',
                icon: "check",
                iconColor: 'text-orange-500'
            },
            {
                name: 'Notifications',
                icon: "check",
                iconColor: 'text-teal-500'
            },
            {
                name: 'Text Editor',
                icon: "check",
                iconColor: 'text-blue-500'
            },
            {
                name: 'Sync Datastore',
                icon: "check",
                iconColor: 'text-zinc-500'
            }
        ],
    }
];
</file>

<file path="src/registry/billingsdk/demo/banner-demo.tsx">
import { Banner } from "@/components/billingsdk/banner"

export default function FreeTrialBannerDemo() {
    return (
        <div className="w-full h-full flex flex-col gap-6 min-h-[500px] rounded-lg overflow-hidden bg-background-secondary border-2">
            <Banner
                title="🎉 Start your free trial today!"
                description="Get 30 days free access to all premium features"
                buttonText="Start Free Trial"
                buttonLink="https://example.com/signup"
                variant="default" // default, minimal, popup
            />

            {/* minimal hero example */}
            <section className="flex flex-col items-center justify-center text-center gap-4 py-16">
                <h1 className="text-3xl font-bold tracking-tight text-foreground-secondary">
                    Create next-generation digital products
                </h1>
                <div className="flex flex-col gap-2">

                    <p className="text-muted-foreground max-w-md">
                        Build faster with our platform
                    </p>
                    <a
                        className="underline underline-offset-4 hover:text-primary transition"
                    >
                        Get Started →
                    </a>
                </div>
            </section>
        </div>
    )
}
</file>

<file path="src/registry/billingsdk/demo/cancel-subscription-card-demo.tsx">
"use client";

import { CancelSubscriptionCard } from "@/components/billingsdk/cancel-subscription-card";
import { plans } from "@/lib/billingsdk-config";

export function CancelSubscriptionCardDemo() {
    return(

      <div className="flex flex-col w-full">
      <CancelSubscriptionCard
        title="We're sorry to see you go..."
        description={`Before you cancel, we hope you'll consider upgrading to a ${plans[1].title} plan again.`}
        plan={plans[1]}
        leftPanelImageUrl="https://framerusercontent.com/images/GWE8vop9hubsuh3uWWn0vyuxEg.webp"
        warningTitle="You will lose access to your account"
        warningText="If you cancel your subscription, you will lose access to your account and all your data will be deleted."
        keepButtonText={`Keep My ${plans[1].title} Plan`}
        continueButtonText="Continue with Cancellation"
        finalTitle="Final Step - Confirm Cancellation"
        finalSubtitle="This action will immediately cancel your subscription"
        finalWarningText="You'll lose access to all Pro features and your data will be permanently deleted after 30 days."
        goBackButtonText="Wait, Go Back"
        confirmButtonText="Yes, Cancel My Subscription"
        onCancel={async (planId) => {
          console.log('Cancelling subscription for plan:', planId);
          return new Promise((resolve) => {
            setTimeout(() => {
              resolve(void 0);
            }, 1000);
          });
        }}
        onKeepSubscription={async (planId) => {
          console.log('Keeping subscription for plan:', planId);
        }}
        className="max-w-4xl"
      />
    </div>
    )
}
</file>

<file path="src/registry/billingsdk/demo/cancel-subscription-dialog-demo.tsx">
"use client";

import { CancelSubscriptionDialog } from "@/components/billingsdk/cancel-subscription-dialog";
import { plans } from "@/lib/billingsdk-config";

export function CancelSubscriptionDialogDemo() {
    return(

      <div className="flex flex-1 flex-col justify-center text-center p-4 mx-auto min-h-[300px]">
      <CancelSubscriptionDialog
        title="We're sorry to see you go..."
        description={`Before you cancel, we hope you'll consider upgrading to a ${plans[1].title} plan again.`}
        plan={plans[1]}
        triggerButtonText="Cancel Subscription"
        leftPanelImageUrl="https://framerusercontent.com/images/GWE8vop9hubsuh3uWWn0vyuxEg.webp"
        warningTitle="You will lose access to your account"
        warningText="If you cancel your subscription, you will lose access to your account and all your data will be deleted."
        keepButtonText={`Keep My ${plans[1].title} Plan`}
        continueButtonText="Continue with Cancellation"
        finalTitle="Final Step - Confirm Cancellation"
        finalSubtitle="This action will immediately cancel your subscription"
        finalWarningText="You'll lose access to all Pro features and your data will be permanently deleted after 30 days."
        goBackButtonText="Wait, Go Back"
        confirmButtonText="Yes, Cancel My Subscription"
        onCancel={async (planId) => {
          console.log('Cancelling subscription for plan:', planId);
          return new Promise((resolve) => {
            setTimeout(() => {
              resolve(void 0);
            }, 1000);
          });
        }}
        onKeepSubscription={async (planId) => {
          console.log('Keeping subscription for plan:', planId);
        }}
        onDialogClose={() => {
          console.log('Dialog closed');
        }}
        className="max-w-4xl"
      />
    </div>
    )
}
</file>

<file path="src/registry/billingsdk/demo/payment-method-manager-demo.tsx">
"use client"

import React, { useState } from "react";
import { PaymentMethodManager, PaymentMethod } from "@/registry/billingsdk/payment-method-manager";

const initialMethods: PaymentMethod[] = [
  {
    id: "pm1",
    type: "credit",
    last4: "1234",
    expiry: "12/25",
    isDefault: true,
  },
  {
    id: "pm2",
    type: "ach",
    last4: "5678",
    expiry: undefined,
    isDefault: false,
    routing: "123456789",
  },
  {
    id: "pm3",
    type: "credit",
    last4: "4321",
    expiry: "11/27",
    isDefault: false,
  },
];

export function PaymentMethodManagerDemo() {
  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>(initialMethods);

  const handleAdd = (method: PaymentMethod) => {
    setPaymentMethods((prev) => [...prev, method]);
  };

  const handleEdit = (updated: PaymentMethod) => {
    setPaymentMethods((prev) => prev.map((pm) => pm.id === updated.id ? updated : pm));
  };

  const handleRemove = (id: string) => {
    setPaymentMethods((prev) => prev.filter((pm) => pm.id !== id));
  };

  const handleSetDefault = (id: string) => {
    setPaymentMethods((prev) => prev.map((pm) => ({ ...pm, isDefault: pm.id === id })));
  };

  return (
    <PaymentMethodManager
      paymentMethods={paymentMethods}
      onAdd={handleAdd}
      onEdit={handleEdit}
      onRemove={handleRemove}
      onSetDefault={handleSetDefault}
    />
  );
}
</file>

<file path="src/registry/billingsdk/demo/pricing-table-three-demo.tsx">
'use client'

import { PricingTableThree } from '@/components/billingsdk/pricing-table-three';
import { plans } from '@/lib/billingsdk-config';

export function PricingTableThreeDemo() {

    return (
        <PricingTableThree 
            plans={plans}
            onPlanSelect={(planId) => console.log('Selected plan:', planId)}
            className={"w-full max-w-4xl mx-auto"}
            variant="small"
            showFooter={true}
            footerText="Pre-negotiated discounts are available to early-stage startups and nonprofits."
            footerButtonText="Apply now"
            onFooterButtonClick={() => console.log('Footer button clicked')}
        />
    );
}
</file>

<file path="src/registry/billingsdk/demo/pricing-table-two-demo.tsx">
"use client"

import { plans } from "@/lib/billingsdk-config";
import { PricingTableTwo } from "@/components/billingsdk/pricing-table-two";

export function PricingTableTwoDemo() {
    return <>
        <PricingTableTwo plans={plans} className="w-full max-w-4xl mx-auto"
            title={`We offer ${plans.length} plans`}
            description="Choose the plan that's right for you"
            onPlanSelect={(planId) => console.log('Selected plan:', planId)}
            size="small" // small, medium, large
            theme="classic" // minimal or classic
        />
    </>
}
</file>

<file path="src/registry/billingsdk/demo/update-plan-card-demo.tsx">
'use client'

import { UpdatePlanCard } from '@/components/billingsdk/update-plan-card';
import { plans } from '@/lib/billingsdk-config';

export function UpdatePlanCardDemo() {

    return (
        <main className="flex flex-1 flex-col justify-center text-center w-full">
            <UpdatePlanCard
                currentPlan={plans[0]}
                plans={plans}
                onPlanChange={(planId) => {
                    console.log("Upgrade plan to", planId)
                }}
            />
        </main>
    );
}
</file>

<file path="src/registry/billingsdk/demo/update-plan-dialog-demo.tsx">
'use client'

import { UpdatePlanDialog } from '@/components/billingsdk/update-plan-dialog';
import { plans } from '@/lib/billingsdk-config';

export function UpdatePlanDialogDemo() {

  return (
    <div className="flex flex-1 flex-col justify-center text-center p-4 mx-auto min-h-[300px]">
      <UpdatePlanDialog
        currentPlan={plans[1]}
        plans={plans}
        onPlanChange={(planId) => {
          console.log(planId)
        }}
        triggerText="Update Plan"
      />
    </div>
  );
}
</file>

<file path="src/registry/billingsdk/demo/usage-meter-circle-demo.tsx">
'use client'

import { UsageMeter } from "@/components/billingsdk/usage-meter";

export default function UsageMeterCircleDemo() {

  return (
    <div className="flex flex-col gap-4 mx-auto w-full">
      <UsageMeter
        usage={[{
          name: "Claude Sonnet 4",
          usage: 75,
          limit: 100
        }, {
          name: "ChatGPT 5",
          usage: 12,
          limit: 100
        }, {
          name: "Grok 3",
          usage: 57,
          limit: 100
        }, {
          name: "Gemini 2.5",
          usage: 95,
          limit: 100
        }]}
        title="LLM Usage"
        description="Your usage of the LLM models"
        variant="circle"
        size="md"
        className="mx-auto" />
    </div>

  );
}
</file>

<file path="src/registry/billingsdk/demo/usage-meter-linear-demo.tsx">
'use client'

import { UsageMeter } from "@/components/billingsdk/usage-meter";

export default function UsageMeterLinearDemo() {

  return (
    <div className="flex flex-col gap-4 mx-auto w-full">
      <UsageMeter
        usage={[{
          name: "Claude Sonnet 4",
          usage: 75,
          limit: 100
        }, {
          name: "ChatGPT 5",
          usage: 12,
          limit: 100
        }, {
          name: "Grok 3",
          usage: 57,
          limit: 100
        }, {
          name: "Gemini 2.5",
          usage: 95,
          limit: 100
        }]}
        title="LLM Usage"
        description="Your usage of the LLM models"
        variant="linear"
        size="md"
        className="mx-auto" />
    </div>

  );
}
</file>

<file path="src/registry/billingsdk/payment-method-manager.tsx">
"use client";

import React, { useState } from "react";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { cn } from "@/lib/utils";
import {
  Card,
  CardHeader,
  CardContent,
  CardFooter,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { CreditCard, Banknote, CheckCircle2, Pencil, Trash2, Star } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogClose,
} from "@/components/ui/dialog";
import { z } from "zod";

export interface PaymentMethod {
  id: string;
  type: "credit" | "ach";
  last4: string;
  expiry?: string;
  isDefault: boolean;
  routing?: string;
}

export interface PaymentMethodManagerProps {
  paymentMethods: PaymentMethod[];
  onAdd?: (method: PaymentMethod) => void;
  onEdit?: (method: PaymentMethod) => void;
  onRemove?: (id: string) => void;
  onSetDefault?: (id: string) => void;
  className?: string;
}

export function PaymentMethodManager({
  paymentMethods,
  onAdd,
  onEdit,
  onRemove,
  onSetDefault,
  className,
}: PaymentMethodManagerProps) {
  // Dialog states
  const [addOpen, setAddOpen] = useState(false);
  const [editOpen, setEditOpen] = useState(false);
  const [removeOpen, setRemoveOpen] = useState(false);
  const [selectedMethod, setSelectedMethod] = useState<PaymentMethod | null>(null);

  // Form schemas
  const creditSchema = z.object({
    type: z.literal("credit"),
    number: z.string().min(16, "Card number must be 16 digits").max(16, "Card number must be 16 digits"),
    expiry: z.string().regex(/^\d{2}\/\d{2}$/, "Expiry must be MM/YY"),
    cvv: z.string().min(3, "CVV must be at least 3 digits").max(4, "CVV must be at most 4 digits"),
    account: z.string().optional(),
    routing: z.string().optional(),
  });
  const achSchema = z.object({
    type: z.literal("ach"),
    account: z.string().min(4, "Account number must be at least 4 digits"),
    routing: z.string().length(9, "Routing number must be 9 digits"),
    number: z.string().optional(),
    expiry: z.string().optional(),
    cvv: z.string().optional(),
  });
  const formSchema = z.discriminatedUnion("type", [creditSchema, achSchema]);

  type FormValues = z.infer<typeof formSchema>;

  // Form state
  const [editing, setEditing] = useState(false);
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues:
      editing && selectedMethod
        ? selectedMethod.type === "credit"
          ? {
              type: "credit",
              number: `**** **** **** ${selectedMethod.last4}`,
              expiry: selectedMethod.expiry || "",
              cvv: "",
            }
          : {
              type: "ach",
              account: `**** ${selectedMethod.last4}`,
              routing: selectedMethod.routing || "",
            }
        : {
            type: "credit",
            number: "",
            expiry: "",
            cvv: "",
          },
    mode: "onChange",
  });

  // Handlers
  const handleAddOpen = () => {
    setEditing(false);
    setAddOpen(true);
    form.reset({ type: "credit", number: "", expiry: "", cvv: "" });
  };
  const handleEditOpen = (pm: PaymentMethod) => {
    setSelectedMethod(pm);
    setEditing(true);
    setEditOpen(true);
    if (pm.type === "credit") {
      form.reset({
        type: "credit",
        number: `**** **** **** ${pm.last4}`,
        expiry: pm.expiry || "",
        cvv: "",
      });
    } else {
      form.reset({
        type: "ach",
        account: `**** ${pm.last4}`,
        routing: pm.routing || "",
      });
    }
  };
  const handleRemoveOpen = (pm: PaymentMethod) => {
    setSelectedMethod(pm);
    setRemoveOpen(true);
  };

  const handleFormSubmit = (values: FormValues) => {
    const last4 = values.type === "credit"
      ? values.number.slice(-4)
      : values.account.slice(-4);
    const method: PaymentMethod = {
      id: editing ? selectedMethod?.id || crypto.randomUUID() : crypto.randomUUID(),
      type: values.type,
      last4,
      ...(values.type === "credit"
        ? { expiry: values.expiry }
        : { routing: values.routing }),
      isDefault: editing ? selectedMethod?.isDefault ?? false : false,
    };
    if (editing) {
      onEdit?.(method);
      setEditOpen(false);
    } else {
      onAdd?.(method);
      setAddOpen(false);
    }
    form.reset();
  };

  const handleRemoveConfirm = () => {
    if (selectedMethod) {
      if (onRemove) onRemove(selectedMethod.id);
      else console.log("Remove Payment Method", selectedMethod.id);
    }
    setRemoveOpen(false);
  };

  const handleSetDefault = (id: string) => {
    if (onSetDefault) onSetDefault(id);
    else console.log("Set Default Payment Method", id);
  };

  return (
    <div className={cn("p-4 border rounded bg-background", className)}>
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-lg font-semibold">Payment Methods</h2>
        <Dialog open={addOpen} onOpenChange={setAddOpen}>
          <DialogTrigger asChild>
            <Button variant="default" onClick={handleAddOpen} aria-label="Add New Payment Method">
              Add New Method
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Add Payment Method</DialogTitle>
            </DialogHeader>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(handleFormSubmit)} className="space-y-4">
                <FormField name="type" control={form.control} render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-sm font-medium">Type</FormLabel>
                    <FormControl>
                      <Select value={field.value} onValueChange={field.onChange} defaultValue="credit">
                        <SelectTrigger>
                          <SelectValue placeholder="Select type" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="credit">Credit Card</SelectItem>
                          <SelectItem value="ach">ACH</SelectItem>
                        </SelectContent>
                      </Select>
                    </FormControl>
                  </FormItem>
                )} />
                {form.watch("type") === "credit" ? (
                  <>
                    <FormField name="number" control={form.control} render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-sm font-medium">Card Number</FormLabel>
                        <FormControl>
                          <Input type="text" placeholder="**** **** **** ****" {...field} className="mt-1" />
                        </FormControl>
                        <FormDescription className="text-muted-foreground text-xs mt-1">Enter a valid 16-digit card number.</FormDescription>
                        <FormMessage className="text-destructive text-xs mt-1" />
                      </FormItem>
                    )} />
                    <FormField name="expiry" control={form.control} render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-sm font-medium">Expiry</FormLabel>
                        <FormControl>
                          <Input type="text" placeholder="MM/YY" {...field} className="mt-1" />
                        </FormControl>
                        <FormDescription className="text-muted-foreground text-xs mt-1">Format: MM/YY</FormDescription>
                        <FormMessage className="text-destructive text-xs mt-1" />
                      </FormItem>
                    )} />
                    <FormField name="cvv" control={form.control} render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-sm font-medium">CVV</FormLabel>
                        <FormControl>
                          <Input type="password" placeholder="CVV" {...field} className="mt-1" />
                        </FormControl>
                        <FormDescription className="text-muted-foreground text-xs mt-1">3 or 4 digits</FormDescription>
                        <FormMessage className="text-destructive text-xs mt-1" />
                      </FormItem>
                    )} />
                  </>
                ) : (
                  <>
                    <FormField name="account" control={form.control} render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-sm font-medium">Account Number</FormLabel>
                        <FormControl>
                          <Input type="text" placeholder="Account Number" {...field} className="mt-1" />
                        </FormControl>
                        <FormDescription className="text-muted-foreground text-xs mt-1">Enter your bank account number.</FormDescription>
                        <FormMessage className="text-destructive text-xs mt-1" />
                      </FormItem>
                    )} />
                    <FormField name="routing" control={form.control} render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-sm font-medium">Routing Number</FormLabel>
                        <FormControl>
                          <Input type="text" placeholder="Routing Number" {...field} className="mt-1" />
                        </FormControl>
                        <FormDescription className="text-muted-foreground text-xs mt-1">9-digit routing number.</FormDescription>
                        <FormMessage className="text-destructive text-xs mt-1" />
                      </FormItem>
                    )} />
                  </>
                )}
                <div className="flex justify-end gap-2">
                  <DialogClose asChild>
                    <Button type="button" variant="outline">Cancel</Button>
                  </DialogClose>
                  <Button type="submit" variant="default" disabled={form.formState.isSubmitting || !form.formState.isValid}>Save</Button>
                </div>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      </div>
      {paymentMethods.length === 0 ? (
        <Card className="col-span-full text-center p-6 border-border shadow-sm">
          <CardContent>
            No payment methods added yet.
          </CardContent>
          <CardFooter className="justify-center">
            <Button onClick={() => setAddOpen(true)} aria-label="Add New Payment Method">Add New Method</Button>
          </CardFooter>
        </Card>
      ) : (
        <div className={cn("grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4", className)}>
          {paymentMethods.map((method) => (
            <Card key={method.id} className="hover:shadow-md transition-shadow border-border">
              <CardHeader className="flex flex-row items-center space-x-2 pb-2">
                {method.type === "credit" ? (
                  <CreditCard size={20} className="text-muted-foreground" aria-label="Credit Card" />
                ) : (
                  <Banknote size={20} className="text-muted-foreground" aria-label="ACH" />
                )}
                <p className="text-md font-semibold">{method.type === "credit" ? "Credit Card" : "ACH Account"}</p>
              </CardHeader>
              <CardContent className="space-y-1 text-sm">
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Last 4:</span>
                  <span>{method.last4}</span>
                </div>
                {method.expiry && (
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">Expiry:</span>
                    <span>{method.expiry}</span>
                  </div>
                )}
                {method.routing && (
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">Routing:</span>
                    <span>{method.routing}</span>
                  </div>
                )}
              </CardContent>
              <CardFooter className="flex justify-between items-center pt-2 border-t border-border">
                {method.isDefault ? (
                  <Badge variant="secondary" className="gap-1"><CheckCircle2 className="h-3 w-3" aria-label="Default" /> Default</Badge>
                ) : <span />}
                <div className="flex gap-2">
                  <Dialog open={editOpen && selectedMethod?.id === method.id} onOpenChange={setEditOpen}>
                    <DialogTrigger asChild>
                      <Button variant="outline" size="sm" onClick={() => handleEditOpen(method)} className="gap-1" aria-label="Edit payment method">
                        <Pencil className="h-3 w-3" aria-label="Edit" /> Edit
                      </Button>
                    </DialogTrigger>
                    <DialogContent>
                      <DialogHeader>
                        <DialogTitle>Edit Payment Method</DialogTitle>
                      </DialogHeader>
                      <Form {...form}>
                        <form onSubmit={form.handleSubmit(handleFormSubmit)} className="space-y-4">
                          <FormField name="type" control={form.control} render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-sm font-medium">Type</FormLabel>
                              <FormControl>
                                <Select value={field.value} onValueChange={field.onChange} defaultValue={field.value}>
                                  <SelectTrigger>
                                    <SelectValue placeholder="Select type" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="credit">Credit Card</SelectItem>
                                    <SelectItem value="ach">ACH</SelectItem>
                                  </SelectContent>
                                </Select>
                              </FormControl>
                            </FormItem>
                          )} />
                          {form.watch("type") === "credit" ? (
                            <>
                              <FormField name="number" control={form.control} render={({ field }) => (
                                <FormItem>
                                  <FormLabel className="text-sm font-medium">Card Number</FormLabel>
                                  <FormControl>
                                    <Input type="text" placeholder="**** **** **** ****" {...field} className="mt-1" />
                                  </FormControl>
                                  <FormDescription className="text-muted-foreground text-xs mt-1">Enter a valid 16-digit card number.</FormDescription>
                                  <FormMessage className="text-destructive text-xs mt-1" />
                                </FormItem>
                              )} />
                              <FormField name="expiry" control={form.control} render={({ field }) => (
                                <FormItem>
                                  <FormLabel className="text-sm font-medium">Expiry</FormLabel>
                                  <FormControl>
                                    <Input type="text" placeholder="MM/YY" {...field} className="mt-1" />
                                  </FormControl>
                                  <FormDescription className="text-muted-foreground text-xs mt-1">Format: MM/YY</FormDescription>
                                  <FormMessage className="text-destructive text-xs mt-1" />
                                </FormItem>
                              )} />
                              <FormField name="cvv" control={form.control} render={({ field }) => (
                                <FormItem>
                                  <FormLabel className="text-sm font-medium">CVV</FormLabel>
                                  <FormControl>
                                    <Input type="password" placeholder="CVV" {...field} className="mt-1" />
                                  </FormControl>
                                  <FormDescription className="text-muted-foreground text-xs mt-1">3 or 4 digits</FormDescription>
                                  <FormMessage className="text-destructive text-xs mt-1" />
                                </FormItem>
                              )} />
                            </>
                          ) : (
                            <>
                              <FormField name="account" control={form.control} render={({ field }) => (
                                <FormItem>
                                  <FormLabel className="text-sm font-medium">Account Number</FormLabel>
                                  <FormControl>
                                    <Input type="text" placeholder="Account Number" {...field} className="mt-1" />
                                  </FormControl>
                                  <FormDescription className="text-muted-foreground text-xs mt-1">Enter your bank account number.</FormDescription>
                                  <FormMessage className="text-destructive text-xs mt-1" />
                                </FormItem>
                              )} />
                              <FormField name="routing" control={form.control} render={({ field }) => (
                                <FormItem>
                                  <FormLabel className="text-sm font-medium">Routing Number</FormLabel>
                                  <FormControl>
                                    <Input type="text" placeholder="Routing Number" {...field} className="mt-1" />
                                  </FormControl>
                                  <FormDescription className="text-muted-foreground text-xs mt-1">9-digit routing number.</FormDescription>
                                  <FormMessage className="text-destructive text-xs mt-1" />
                                </FormItem>
                              )} />
                            </>
                          )}
                          <div className="flex justify-end gap-2">
                            <DialogClose asChild>
                              <Button type="button" variant="outline">Cancel</Button>
                            </DialogClose>
                            <Button type="submit" variant="default" disabled={form.formState.isSubmitting || !form.formState.isValid}>Save</Button>
                          </div>
                        </form>
                      </Form>
                    </DialogContent>
                  </Dialog>
                  <Dialog open={removeOpen && selectedMethod?.id === method.id} onOpenChange={setRemoveOpen}>
                    <DialogTrigger asChild>
                      <Button variant="destructive" size="sm" onClick={() => handleRemoveOpen(method)} className="gap-1" aria-label="Remove payment method">
                        <Trash2 className="h-3 w-3" aria-label="Remove" /> Remove
                      </Button>
                    </DialogTrigger>
                    <DialogContent>
                      <DialogHeader>
                        <DialogTitle>Remove Payment Method</DialogTitle>
                      </DialogHeader>
                      <div className="py-4">Are you sure you want to remove <span className="font-bold">{method.type === "credit" ? "Credit Card" : "ACH Account"} ending in {method.last4}</span>?</div>
                      <div className="flex justify-end gap-2">
                        <DialogClose asChild>
                          <Button type="button" variant="ghost">Cancel</Button>
                        </DialogClose>
                        <Button type="button" variant="destructive" onClick={handleRemoveConfirm}>Remove</Button>
                      </div>
                    </DialogContent>
                  </Dialog>
                  {!method.isDefault && (
                    <Button variant="default" size="sm" onClick={() => onSetDefault?.(method.id)} className="gap-1" aria-label="Set default payment method">
                      <Star className="h-3 w-3" aria-label="Set Default" /> Set Default
                    </Button>
                  )}
                </div>
              </CardFooter>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
};
</file>

<file path="src/registry/billingsdk/usage-meter.tsx">
"use client"

import { cn } from "@/lib/utils"
import {
    Card,
    CardContent,
    CardDescription,
    CardHeader,
    CardTitle,
} from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { motion, useSpring, useMotionValue, useTransform } from "motion/react"
import { useEffect } from "react"

export interface Usage {
    name: string
    usage: number
    limit: number
}

interface UsageMeterProps {
    usage: Usage[]
    className?: string
    variant?: "linear" | "circle"
    size?: "sm" | "md" | "lg"
    title?: string
    description?: string
    progressColor?: "default" | "usage"
}

export function UsageMeter({
    usage,
    className,
    variant = "linear",
    size = "md",
    title,
    description,
    progressColor = "default",
}: UsageMeterProps) {
    if (!usage?.length) return null

    const getStatus = (percentage: number) => {
        if (percentage >= 90) return <Badge variant="destructive">Critical</Badge>
        if (percentage >= 75) return <Badge variant="secondary">High</Badge>
        return null
    }
    const getUsageClasses = (percentage: number, variant: "circle" | "linear"): string[] => {
        const thresholds = [
            { min: 90, circle: "text-red-500", linear: ["from-red-500", "to-red-400"] },
            { min: 75, circle: "text-yellow-500", linear: ["from-yellow-500", "to-yellow-400"] },
            { min: 50, circle: "text-emerald-500", linear: ["from-emerald-500", "to-emerald-400"] },
            { min: 25, circle: "text-blue-500", linear: ["from-blue-500", "to-blue-400"] },
            { min: 0, circle: "text-gray-500", linear: ["from-gray-500", "to-gray-400"] },
        ];
        const match = thresholds.find(t => percentage >= t.min);

        if (match) {
            return variant === "circle" ? [match.circle] : match.linear;
        }

        return variant === "circle" ? ["text-gray-500"] : ["from-gray-500", "to-gray-400"];
    }

    if (variant === "circle") {
        const sizeConfig = {
            sm: { circle: 100, stroke: 6, text: "text-lg", label: "text-xs" },
            md: { circle: 140, stroke: 10, text: "text-xl", label: "text-sm" },
            lg: { circle: 180, stroke: 12, text: "text-2xl", label: "text-base" },
        }

        const config = sizeConfig[size]
        const radius = (config.circle - config.stroke) / 2
        const circumference = radius * 2 * Math.PI

        return (
            <Card className={cn("w-auto", className)}>
                {(title || description) && (
                    <CardHeader className="space-y-1">
                        {title && (
                            <CardTitle className="text-base font-medium leading-tight truncate">
                                {title}
                            </CardTitle>
                        )}
                        {description && (
                            <CardDescription className="text-sm text-muted-foreground">
                                {description}
                            </CardDescription>
                        )}
                    </CardHeader>

                )}
                <CardContent
                    className={"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"}
                >
                    {usage.map((item, i) => {
                        const percentage = Math.min((item.usage / item.limit) * 100, 100)
                        const remaining = Math.max(item.limit - item.usage, 0)

                        const motionValue = useMotionValue(0)
                        const springValue = useSpring(motionValue, { stiffness: 100, damping: 20 })
                        const display = useTransform(springValue, (latest) => `${Math.round(latest)}%`)

                        useEffect(() => {
                            motionValue.set(percentage)
                        }, [percentage, motionValue])

                        return (
                            <div
                                key={item.name || i}
                                className="space-y-3 p-4 bg-muted/20 rounded-xl flex flex-col items-center text-center"
                            >
                                <span className="text-sm font-medium truncate w-full">{item.name}</span>
                                <div className="relative">
                                    <svg width={config.circle} height={config.circle} className="-rotate-90">
                                        <circle
                                            cx={config.circle / 2}
                                            cy={config.circle / 2}
                                            r={radius}
                                            strokeWidth={config.stroke}
                                            className="text-muted stroke-current"
                                            fill="transparent"
                                        />
                                        <motion.circle
                                            cx={config.circle / 2}
                                            cy={config.circle / 2}
                                            r={radius}
                                            strokeWidth={config.stroke}
                                            fill="transparent"
                                            strokeDasharray={circumference}
                                            strokeLinecap="round"
                                            className={cn("stroke-current", progressColor === "usage" ? getUsageClasses(percentage, "circle") : "text-primary")}
                                            initial={{ strokeDashoffset: circumference }}
                                            animate={{ strokeDashoffset: circumference - (percentage / 100) * circumference }}
                                            transition={{ duration: 0.5, ease: "easeOut" }}
                                        />
                                    </svg>
                                    <div className="absolute inset-0 flex flex-col items-center justify-center">
                                        <motion.span className={cn("font-semibold", config.text)}>{display}</motion.span>
                                        <span className={cn("text-muted-foreground", config.label)}>used</span>
                                    </div>
                                </div>
                                <span className="text-xs text-muted-foreground">
                                    {remaining.toLocaleString()} / {item.limit.toLocaleString()} left
                                </span>
                                {getStatus(percentage)}
                            </div>
                        )
                    })}
                </CardContent>
            </Card>
        )
    }

    // Linear variant
    const sizeConfig = {
        sm: { bar: "h-2", text: "text-xs" },
        md: { bar: "h-3", text: "text-sm" },
        lg: { bar: "h-4", text: "text-base" },
    }

    const config = sizeConfig[size]

    return (
        <Card className={cn("w-full max-w-md", className)}>
            {(title || description) && (
                <CardHeader className="space-y-1">
                    {title && (
                        <CardTitle className="text-base font-medium leading-tight truncate">
                            {title}
                        </CardTitle>
                    )}
                    {description && (
                        <CardDescription className="text-sm text-muted-foreground">
                            {description}
                        </CardDescription>
                    )}
                </CardHeader>

            )}
            <CardContent
                className={"grid grid-cols-1 gap-4"}
            >
                {usage.map((item, i) => {
                    const percentage = Math.min((item.usage / item.limit) * 100, 100)
                    const remaining = Math.max(item.limit - item.usage, 0)

                    const motionValue = useMotionValue(0)
                    const springValue = useSpring(motionValue, { stiffness: 100, damping: 20 })
                    const display = useTransform(springValue, (latest) => `${Math.round(latest)}%`)

                    useEffect(() => {
                        motionValue.set(percentage)
                    }, [percentage, motionValue])

                    return (
                        <div key={item.name || i} className="space-y-2 p-4 bg-muted/20 rounded-xl">
                            <div className="flex items-center justify-between">
                                <span className="text-sm font-medium truncate">{item.name}</span>
                                <motion.span className="text-xs text-muted-foreground">{display}</motion.span>
                            </div>
                            <div className={cn("w-full bg-muted rounded-full overflow-hidden", config.bar)}>
                                <motion.div
                                    className={cn("bg-gradient-to-r rounded-full", config.bar, progressColor === "usage" ? getUsageClasses(percentage, "linear") : "from-primary to-primary/70")}
                                    initial={{ width: 0 }}
                                    animate={{ width: `${percentage}%` }}
                                    transition={{ duration: 0.5, ease: "easeOut" }}
                                />
                            </div>
                            <div className="flex items-center justify-between text-xs text-muted-foreground">
                                <span>
                                    {remaining.toLocaleString()} / {item.limit.toLocaleString()} left
                                </span>
                                {getStatus(percentage)}
                            </div>
                        </div>
                    )
                })}
            </CardContent>
        </Card>
    )
}
</file>

<file path="src/registry/lib/billingsdk-config.ts">
export interface Plan {
    id: string
    title: string
    description: string
    highlight?: boolean
    type?: 'monthly' | 'yearly'
    currency?: string
    monthlyPrice: string
    yearlyPrice: string
    buttonText: string
    badge?: string
    features: {
        name: string
        icon: string
        iconColor?: string
    }[]
}

export interface CurrentPlan {
    plan: Plan
    type: 'monthly' | 'yearly' | 'custom'
    price?: string
    nextBillingDate: string
    paymentMethod: string
    status: 'active' | 'inactive' | 'past_due' | 'cancelled'
}

export const plans: Plan[] = [
    {
        id: 'starter',
        title: 'Starter',
        description: 'For developers testing out Liveblocks locally.',
        currency: '$',
        monthlyPrice: '0',
        yearlyPrice: '0',
        buttonText: 'Start today for free',
        features: [
            {
                name: 'Presence',
                icon: "check",
                iconColor: 'text-green-500'
            },
            {
                name: 'Comments',
                icon: "check",
                iconColor: 'text-orange-500'
            },
            {
                name: 'Notifications',
                icon: "check",
                iconColor: 'text-teal-500'
            },
            {
                name: 'Text Editor',
                icon: "check",
                iconColor: 'text-blue-500'
            },
            {
                name: 'Sync Datastore',
                icon: "check",
                iconColor: 'text-zinc-500'
            }
        ],
    },
    {
        id: 'pro',
        title: 'Pro',
        description: 'For companies adding collaboration in production.',
        currency: '$',
        monthlyPrice: '20',
        yearlyPrice: '199',
        buttonText: 'Sign up',
        badge: 'Most popular',
        highlight: true,
        features: [
            {
                name: 'Presence',
                icon: "check",
                iconColor: 'text-green-500'
            },
            {
                name: 'Comments',
                icon: "check",
                iconColor: 'text-orange-500'
            },
            {
                name: 'Notifications',
                icon: "check",
                iconColor: 'text-teal-500'
            },
            {
                name: 'Text Editor',
                icon: "check",
                iconColor: 'text-blue-500'
            },
            {
                name: 'Sync Datastore',
                icon: "check",
                iconColor: 'text-zinc-500'
            }
        ],
    },
    {
        id: 'enterprise',
        title: 'Enterprise',
        description: 'For organizations that need more support and compliance features.',
        currency: '$',
        monthlyPrice: 'Custom',
        yearlyPrice: 'Custom',
        buttonText: 'Contact sales',
        features: [
            {
                name: 'Presence',
                icon: "check",
                iconColor: 'text-green-500'
            },
            {
                name: 'Comments',
                icon: "check",
                iconColor: 'text-orange-500'
            },
            {
                name: 'Notifications',
                icon: "check",
                iconColor: 'text-teal-500'
            },
            {
                name: 'Text Editor',
                icon: "check",
                iconColor: 'text-blue-500'
            },
            {
                name: 'Sync Datastore',
                icon: "check",
                iconColor: 'text-zinc-500'
            }
        ],
    }
];
</file>

<file path="src/mdx-components.tsx">
import defaultMdxComponents from 'fumadocs-ui/mdx';
import type { MDXComponents } from 'mdx/types';
import * as TabsComponents from 'fumadocs-ui/components/tabs';
import { PreviewComponents } from '@/components/preview/preview-components';
import { CancelSubscriptionCardDemo } from '@/components/cancel-subscription-card-demo';
import { CancelSubscriptionDialogDemo } from '@/components/cancel-subscription-dialog-demo';
import { PricingTableOneDemo } from '@/components/pricing-table-one-demo';
import { PricingTableOneMinimalDemo } from '@/components/pricing-table-one-minimal-demo';
import { PricingTableTwoMinimalDemo } from '@/components/pricing-table-two-minimal-demo';
import { PricingTableTwoDemo } from '@/components/pricing-table-two-demo';
import { PricingTableThreeDemo } from '@/components/pricing-table-three-demo';
import { SubscriptionManagementDemo } from '@/components/subscription-management-demo';
import { UpdatePlanDialogDemo } from '@/components/update-plan-dialog-demo';
import { UpdatePlanCardDemo } from '@/components/update-plan-card-demo';
import UsageMeterLinearDemo from '@/components/usage-meter-linear-demo';
import UsageMeterCircleDemo from '@/components/usage-meter-circle-demo';
import BannerDemo from '@/components/banner-demo';
import BannerGradientDemo from '@/components/banner-gradient-demo';
import BannerDemoTwo from '@/components/banner-demo-two';
import BannerDemoThree from '@/components/banner-demo-three';

// use this function to get MDX components, you will need it for rendering MDX
export function getMDXComponents(components?: MDXComponents): MDXComponents {
  return {
    ...defaultMdxComponents,
    ...components,
    ...TabsComponents,
    PreviewComponents,
    PricingTableOneDemo,
    PricingTableOneMinimalDemo,
    PricingTableTwoDemo,
    PricingTableTwoMinimalDemo,
    PricingTableThreeDemo,
    CancelSubscriptionCardDemo,
    CancelSubscriptionDialogDemo,
    SubscriptionManagementDemo,
    UpdatePlanDialogDemo,
    UpdatePlanCardDemo,
    UsageMeterLinearDemo,
    UsageMeterCircleDemo,
    BannerDemo,
    BannerDemoTwo,
    BannerDemoThree,
    BannerGradientDemo,
  };
}
</file>

<file path="CONTRIBUTING.md">
# Contributing to BillingSDK

Thank you for your interest in contributing. This document explains how to set up the project, the development workflow, and expectations for pull requests.

## Prerequisites

- Node.js 18.18+ (Next.js 15 requires Node 18 or newer)
- A package manager: npm, pnpm, or yarn

## Getting Started

1. Fork the repository and clone your fork.
2. Install dependencies:
   - **npm**: `npm ci` (or `npm install`)
   - **pnpm**: `pnpm install`
   - **yarn**: `yarn`
3. Start the dev server:
   - **npm**: `npm run dev`
   - **pnpm**: `pnpm dev`
   - **yarn**: `yarn dev`
4. Open [http://localhost:3000](http://localhost:3000) in your browser.

## Project Structure (High Level)

- `src/app/(home)`: Landing and marketing pages
- `src/app/docs`: Documentation layout and routing
- `content/docs`: MDX content for documentation
- `src/app/api/search/route.ts`: Search API powered by Fumadocs source
- `src/app/api/chat/route.ts`: Chat API using Inkeep
- `src/components/ui`: Reusable UI primitives (shadcn-style components)

## Local Development Workflow (Shadcn Registry)

1. Create component source:
   - Component: `src/registry/billingsdk/<component>.tsx`
   - Demo: `src/registry/billingsdk/demo/<component>-demo.tsx`
2. Update `registry.json` following the [shadcn registry docs](https://ui.shadcn.com/docs/registry).
3. Build registry JSON:
   - Run: `npx shadcn@latest build`
   - Output: generated files appear under `public/r/*.json`
4. Consume in another project:
   - `npx shadcn@latest add http://localhost:3000/r/<component>.json`

## Development Guidelines

- Use Tailwind utilities and existing theme tokens; avoid hard-coded color values.
- Keep functions small and focused; use meaningful names.
- Match existing code style and formatting. If unsure, align to nearby code.
- Avoid introducing unused dependencies.

## Scripts

- `dev`: start Next.js dev server
- `build`: production build
- `start`: run production server

## Docs and Content Contributions

- Add or edit MDX docs under `content/docs`.
- Ensure frontmatter and structure follow existing examples.
- For new components or demos, keep examples minimal and focused.

## Submitting Changes

1. Create a feature branch from `main`.
2. Make your changes with small, focused commits.
3. Verify locally:
   - `npm run build` completes successfully
   - `npm run dev` starts without runtime or TypeScript errors
   - Relevant routes (home, docs, affected pages) render as expected
4. Open a pull request:
   - Provide a clear title and description of the change and motivation
   - Include screenshots for UI changes when applicable
   - Note any migrations or breaking changes

## Code Reviews

- Keep PRs small and self-contained when possible.
- Address review feedback with follow-up commits (avoid force-pushing unless necessary).
- If a discussion stalls, summarize options and propose a decision to move forward.

## Reporting Issues

When filing an issue, include:

- What you expected to happen vs. what happened
- Steps to reproduce
- Environment details (OS, Node version, browser)
- Logs or stack traces if available

## License

Unless otherwise stated, contributions to this repository are made under the same license as the repository.
</file>

<file path="LICENSE">
GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.
</file>

<file path="content/docs/contribution-open-source.mdx">
---
title: Contribution & Open Source
description: Help us improve Billing SDK - built with transparency and community collaboration
---

import { Callout } from 'fumadocs-ui/components/callout'
import { Cards, Card } from 'fumadocs-ui/components/card'

Billing SDK is built on the principles of open source software - transparency, collaboration, and community-driven development. We believe that great tools should be accessible to everyone and improved by collective effort.

### Why Open Source?

- **🔍 Transparency** - Full visibility into how components work
- **🤝 Community** - Built by developers, for developers
- **🔒 Security** - Open code means better security through peer review
- **📈 Innovation** - Faster iteration through community contributions
- **💰 Cost-Effective** - Free to use, modify, and distribute

## How to Contribute

We welcome contributions from the community! Whether you're fixing bugs, adding new components, or improving documentation, your help makes Billing SDK better for everyone.

### Getting Started

1. **Fork the repository** on GitHub
2. **Clone your fork** locally
3. **Create a new branch** for your changes
4. **Make your changes** following our guidelines
5. **Test thoroughly** to ensure everything works
6. **Submit a pull request** with a clear description

Refer our [CONTRIBUTING.md](https://github.com/dodopayments/billingsdk/blob/main/CONTRIBUTING.md) for more details.

### Contribution Guidelines

<Callout title="Development Setup">
  Make sure you have Node.js 18+ installed and are familiar with React, TypeScript, and Tailwind CSS.
</Callout>

#### Adding New Components

When adding new components:
- Follow the existing component structure and naming conventions
- Include comprehensive TypeScript interfaces
- Add proper documentation with examples
- Ensure responsive design and accessibility
- Test with multiple themes

#### Code Style

- Use TypeScript for all components
- Follow the existing code formatting
- Use meaningful variable and function names
- Add JSDoc comments for complex functions
- Ensure components are accessible

#### Documentation

- Update README files as needed
- Add examples for new components
- Include prop tables and usage instructions
- Test all code examples

### Types of Contributions Welcome

- 🐛 **Bug Fixes** - Help us fix issues and improve stability
- ✨ **New Components** - Add new billing and subscription components
- 📚 **Documentation** - Improve guides, examples, and API docs
- 🎨 **Themes** - Create new visual themes and variants
- 🔧 **Developer Experience** - Improve tooling and development workflow
- 🧪 **Testing** - Add tests and improve coverage

## License & Usage

Billing SDK is released under the GNU General Public License (GPL), ensuring the project remains open and free:

- ✅ Use freely for any purpose
- ✅ Study and modify the source code
- ✅ Distribute copies to help others
- ✅ Distribute modified versions
- ⚠️ Must keep derivatives under GPL license
- ⚠️ Must provide source code when distributing

<Callout title="GPL License Benefits">
  The GPL license ensures that Billing SDK and all derivative works remain free and open source, protecting the commons and ensuring community benefits are preserved.
</Callout>

## Project Links

<Cards>
  <Card 
    href="https://github.com/dodopayments/billingsdk" 
    title="GitHub Repository" 
    description="View source code, report issues, and contribute" 
  />
  
  <Card 
    href="https://github.com/dodopayments/billingsdk/issues" 
    title="Issue Tracker" 
    description="Report bugs and request features" 
  />

</Cards>

## Community & Support

### Core Maintainers

The project is actively maintained by a team of developers at [DodoPayments](https://dodopayments.com) who are committed to keeping it up-to-date, secure, and feature-rich.

### Community Support

- **Issues & Bugs** - Community-driven issue resolution
- **Feature Requests** - Prioritized based on community needs
- **Documentation** - Collaborative improvement of guides and examples
- **Code Reviews** - Peer review for quality assurance

### Get Involved

- Join discussions in GitHub Issues
- Share your use cases and feedback
- Help answer questions from other users
- Suggest new features and improvements

<Callout title="Get Involved">
  Whether you're a seasoned developer or just getting started, there are many ways to contribute to the project and help make it better for everyone.
</Callout>

## Roadmap

Our development is guided by community feedback and industry needs:

- 🎯 **Short Term** - Bug fixes, performance improvements, new component variants
- 🚀 **Medium Term** - Advanced theming system, more component types, better accessibility
- 🌟 **Long Term** - Framework integrations, design system expansion, enterprise features

Join us in building the future of billing components!

## Learn More

New to here? Don't worry, we welcome your questions.

If you find anything confusing, please give your feedback on [GitHub Issues](https://github.com/dodopayments/billingsdk)!

<Callout title="Questions?">
  If you find anything confusing or need help getting started, please open an issue on [GitHub Issues](https://github.com/dodopayments/billingsdk)!
</Callout>
</file>

<file path="public/r/index.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "index",
  "type": "registry:lib",
  "title": "BillingSDK Config",
  "description": "Config for BillingSDK components",
  "files": [
    {
      "path": "src/registry/lib/billingsdk-config.ts",
      "content": "export interface Plan {\n    id: string\n    title: string\n    description: string\n    highlight?: boolean\n    type?: 'monthly' | 'yearly'\n    currency?: string\n    monthlyPrice: string\n    yearlyPrice: string\n    buttonText: string\n    badge?: string\n    features: {\n        name: string\n        icon: string\n        iconColor?: string\n    }[]\n}\n\nexport interface CurrentPlan {\n    plan: Plan\n    type: 'monthly' | 'yearly' | 'custom'\n    price?: string\n    nextBillingDate: string\n    paymentMethod: string\n    status: 'active' | 'inactive' | 'past_due' | 'cancelled'\n}\n\nexport const plans: Plan[] = [\n    {\n        id: 'starter',\n        title: 'Starter',\n        description: 'For developers testing out Liveblocks locally.',\n        currency: '$',\n        monthlyPrice: '0',\n        yearlyPrice: '0',\n        buttonText: 'Start today for free',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    },\n    {\n        id: 'pro',\n        title: 'Pro',\n        description: 'For companies adding collaboration in production.',\n        currency: '$',\n        monthlyPrice: '20',\n        yearlyPrice: '199',\n        buttonText: 'Sign up',\n        badge: 'Most popular',\n        highlight: true,\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    },\n    {\n        id: 'enterprise',\n        title: 'Enterprise',\n        description: 'For organizations that need more support and compliance features.',\n        currency: '$',\n        monthlyPrice: 'Custom',\n        yearlyPrice: 'Custom',\n        buttonText: 'Contact sales',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    }\n];\n",
      "type": "registry:lib",
      "target": "lib/billingsdk-config.ts"
    }
  ]
}
</file>

<file path="public/r/pricing-table-three.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pricing-table-three",
  "type": "registry:block",
  "title": "Pricing Table Three",
  "description": "A pricing table component with a feature table",
  "dependencies": [
    "lucide-react",
    "class-variance-authority",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "card",
    "badge",
    "radio-group",
    "label",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/pricing-table-three.tsx",
      "content": "'use client'\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Check } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { type Plan } from \"@/lib/billingsdk-config\"\nimport { useState } from \"react\"\nimport { Label } from \"@/components/ui/label\"\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { AnimatePresence, motion } from \"motion/react\"\n\nconst sectionVariants = cva(\"mt-10 max-w-7xl mx-auto\", {\n  variants: {\n    variant: {\n      small: \"mt-6\",\n      medium: \"mt-8\",\n      large: \"mt-10\",\n    },\n  },\n  defaultVariants: {\n    variant: \"small\",\n  },\n})\n\nconst toggleContainerVariants = cva(\n  \"bg-muted flex h-11 w-fit shrink-0 items-center rounded-md p-1 text-lg\",\n  {\n    variants: {\n      variant: {\n        small: \"h-9 text-base\",\n        medium: \"h-10 text-lg\",\n        large: \"h-11 text-lg\",\n      },\n    },\n    defaultVariants: {\n      variant: \"large\",\n    },\n  }\n)\n\nconst labelPaddingVariants = cva(\"px-7\", {\n  variants: {\n    variant: {\n      small: \"px-5\",\n      medium: \"px-6\",\n      large: \"px-7\",\n    },\n  },\n  defaultVariants: {\n    variant: \"large\",\n  },\n})\n\nconst cardTitleVariants = cva(\"text-xl\", {\n  variants: {\n    variant: {\n      small: \"text-lg\",\n      medium: \"text-xl\",\n      large: \"text-xl\",\n    },\n  },\n  defaultVariants: {\n    variant: \"large\",\n  },\n})\n\nconst cardDescriptionVariants = cva(\"text-sm\", {\n  variants: {\n    variant: {\n      small: \"text-xs\",\n      medium: \"text-sm\",\n      large: \"text-sm\",\n    },\n  },\n  defaultVariants: {\n    variant: \"large\",\n  },\n})\n\nconst priceTextVariants = cva(\"text-4xl font-medium\", {\n  variants: {\n    variant: {\n      small: \"text-3xl\",\n      medium: \"text-4xl\",\n      large: \"text-4xl\",\n    },\n  },\n  defaultVariants: {\n    variant: \"large\",\n  },\n})\n\nconst featureIconVariants = cva(\"w-4 h-4\", {\n  variants: {\n    variant: {\n      small: \"w-3 h-3\",\n      medium: \"w-4 h-4\",\n      large: \"w-4 h-4\",\n    },\n  },\n  defaultVariants: {\n    variant: \"large\",\n  },\n})\n\nconst footerWrapperVariants = cva(\n  \"flex items-center justify-between bg-muted/50 p-6 border-t border-border\",\n  {\n    variants: {\n      variant: {\n        small: \"p-4\",\n        medium: \"p-5\",\n        large: \"p-6\",\n      },\n    },\n    defaultVariants: {\n      variant: \"large\",\n    },\n  }\n)\n\nconst footerTextVariants = cva(\"text-lg font-medium text-card-foreground text-left w-full my-auto\", {\n  variants: {\n    variant: {\n      small: \"text-base\",\n      medium: \"text-lg\",\n      large: \"text-lg\",\n    },\n  },\n  defaultVariants: {\n    variant: \"large\",\n  },\n})\n\ninterface PricingTableProps extends VariantProps<typeof sectionVariants> {\n  className?: string\n  plans: Plan[]\n  onPlanSelect?: (planId: string) => void\n  showFooter?: boolean\n  footerText?: string\n  footerButtonText?: string\n  onFooterButtonClick?: () => void\n}\n\nexport function PricingTableThree({ className, plans, onPlanSelect, showFooter, footerText, footerButtonText, onFooterButtonClick, variant }: PricingTableProps) {\n  const [isAnnually, setIsAnnually] = useState(false);\n\n  function calculateDiscount(monthlyPrice: string, yearlyPrice: string): number {\n    const monthly = parseFloat(monthlyPrice);\n    const yearly = parseFloat(yearlyPrice);\n\n    if (\n      monthlyPrice.toLowerCase() === \"custom\" ||\n      yearlyPrice.toLowerCase() === \"custom\" ||\n      isNaN(monthly) ||\n      isNaN(yearly) ||\n      monthly === 0\n    ) {\n      return 0;\n    }\n\n    const discount = ((monthly * 12 - yearly) / (monthly * 12)) * 100;\n    return Math.round(discount);\n  }\n\n  const yearlyPriceDiscount = plans.length\n    ? Math.max(\n      ...plans.map((plan) =>\n        calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)\n      )\n    )\n    : 0;\n\n  return (\n    <div className={cn(sectionVariants({ variant }), className)}>\n      {/* Header Section with Toggle */}\n      <div className=\"flex flex-col justify-between md:gap-10 gap-4 md:flex-row mb-8 items-center md:items-start\">\n        <div className={cn(toggleContainerVariants({ variant }))}>\n          <RadioGroup\n            defaultValue=\"monthly\"\n            className=\"h-full grid-cols-2\"\n            onValueChange={(value) => {\n              setIsAnnually(value === \"annually\");\n            }}\n          >\n            <div className='has-[button[data-state=\"checked\"]]:bg-background h-full rounded-md transition-all'>\n              <RadioGroupItem\n                value=\"monthly\"\n                id=\"monthly\"\n                className=\"peer sr-only\"\n              />\n              <Label\n                htmlFor=\"monthly\"\n                className={cn(\n                  \"text-muted-foreground peer-data-[state=checked]:text-primary flex h-full cursor-pointer items-center justify-center font-semibold\",\n                  labelPaddingVariants({ variant })\n                )}\n              >\n                Monthly\n              </Label>\n            </div>\n            <div className='has-[button[data-state=\"checked\"]]:bg-background h-full rounded-md transition-all'>\n              <RadioGroupItem\n                value=\"annually\"\n                id=\"annually\"\n                className=\"peer sr-only\"\n              />\n              <Label\n                htmlFor=\"annually\"\n                className={cn(\n                  \"text-muted-foreground peer-data-[state=checked]:text-primary flex h-full cursor-pointer items-center justify-center gap-1 font-semibold\",\n                  labelPaddingVariants({ variant })\n                )}\n              >\n                Yearly\n              </Label>\n            </div>\n          </RadioGroup>\n        </div>\n        <div className=\"flex justify-center\">\n          {yearlyPriceDiscount > 0 && (\n            <span className=\"text-xs mt-2 text-muted-foreground\">\n              Save upto {yearlyPriceDiscount}% with yearly plan\n            </span>\n          )}\n        </div>\n      </div>\n\n      <div className={cn(\n        \"grid gap-4 md:gap-0\",\n        plans.length === 1 && \"grid-cols-1 max-w-md mx-auto\",\n        plans.length === 2 && \"grid-cols-1 md:grid-cols-2 max-w-4xl mx-auto\",\n        plans.length === 3 && \"grid-cols-1 md:grid-cols-3\",\n        plans.length === 4 && \"grid-cols-1 md:grid-cols-2 lg:grid-cols-4\",\n        plans.length >= 5 && \"grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\"\n      )}>\n        {plans.map((plan) => (\n          <Card key={plan.id} className={cn(\n            \"border rounded-xl md:border-none md:rounded-none text-card-foreground flex flex-col relative transition-all duration-200 shadow-sm md:shadow-none\",\n            plan.highlight === true\n              ? \"bg-muted/30 md:-mt-8 shadow-lg z-10 md:border-t md:rounded-md border-border\"\n              : \"bg-card\"\n          )}>\n            {plan.badge && (\n              <Badge className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 bg-secondary text-secondary-foreground px-3 py-1 text-xs\">\n                {plan.badge}\n              </Badge>\n            )}\n            <CardHeader className=\"pb-4\">\n              <div className=\"space-y-2\">\n                <h3 className={cn(cardTitleVariants({ variant }), \"font-semibold text-left\")}>{plan.title}</h3>\n                <p className={cn(cardDescriptionVariants({ variant }), \"w-full text-left text-muted-foreground\")}>{plan.description}</p>\n              </div>\n              <div className=\"space-y-1 text-left\">\n                <AnimatePresence mode=\"wait\">\n                  {isAnnually ? (\n                    <motion.div\n                      key=\"yearly\"\n                      initial={{ opacity: 0, y: 10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      exit={{ opacity: 0, y: -10 }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      <span className={cn(priceTextVariants({ variant }), \"text-left\")}>\n                        {parseFloat(plan.yearlyPrice) >= 0 && (\n                          <>\n                            {plan.currency}\n                          </>\n                        )}\n                        {plan.yearlyPrice}\n                        {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice) > 0 && (\n                          <span className=\"text-xs ml-2 underline\">\n                            {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)}% off\n                          </span>\n                        )}\n                      </span>\n                      <p className=\"text-muted-foreground\">Per year</p>\n                    </motion.div>\n                  ) : (\n                    <motion.div\n                      key=\"monthly\"\n                      initial={{ opacity: 0, y: 10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      exit={{ opacity: 0, y: -10 }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      <span className={cn(priceTextVariants({ variant }), \"text-left\")}>\n                        {parseFloat(plan.monthlyPrice) >= 0 && (\n                          <>\n                            {plan.currency}\n                          </>\n                        )}\n                        {plan.monthlyPrice}\n                      </span>\n                      <p className=\"text-muted-foreground\">Per month</p>\n                    </motion.div>\n                  )}\n                </AnimatePresence>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-6 flex-1 flex flex-col\">\n              <div className=\"space-y-4 flex-1\">\n                {plan.features.map((feature, index) => (\n                  <div key={index} className=\"flex items-center gap-3\">\n                    {feature.icon === \"check\" ? (\n                      <div className=\"w-2 h-2 bg-primary rounded-sm\"></div>\n                    ) : (\n                      <div className={cn(featureIconVariants({ variant }), feature.iconColor || \"text-muted-foreground\")}>\n                        <Check className={cn(featureIconVariants({ variant }))} />\n                      </div>\n                    )}\n                    <span className=\"text-sm\">{feature.name}</span>\n                    <span className=\"ml-auto text-sm text-muted-foreground\">Included</span>\n                  </div>\n                ))}\n              </div>\n\n              <Button\n                className={cn(\n                  \"w-full mt-auto hover:cursor-pointer\",\n                  plan.highlight === true\n                    ? \"gap-2 whitespace-nowrap focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 shadow hover:bg-primary/90 h-9 py-2 group bg-primary text-primary-foreground ring-primary before:from-primary-foreground/20 after:from-primary-foreground/10 relative isolate inline-flex w-full items-center justify-center overflow-hidden rounded-md px-3 text-left text-sm font-medium ring-1 transition duration-300 ease-[cubic-bezier(0.4,0.36,0,1)] before:pointer-events-none before:absolute before:inset-0 before:-z-10 before:rounded-md before:bg-gradient-to-b before:opacity-80 before:transition-opacity before:duration-300 before:ease-[cubic-bezier(0.4,0.36,0,1)] after:pointer-events-none after:absolute after:inset-0 after:-z-10 after:rounded-md after:bg-gradient-to-b after:to-transparent after:mix-blend-overlay\"\n                    : \"bg-secondary hover:bg-secondary/80 text-secondary-foreground\"\n                )}\n                onClick={() => onPlanSelect?.(plan.id)}\n              >\n                {plan.buttonText}\n              </Button>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Footer Section */}\n      {showFooter !== false && (\n        <div className={cn(\n          footerWrapperVariants({ variant }),\n          plans.length === 1 && \"max-w-md mx-auto\",\n          plans.length === 2 && \"max-w-4xl mx-auto\"\n        )}>\n          <div className=\"flex flex-col md:flex-row gap-4 justify-between w-full\">\n\n              <p className={cn(footerTextVariants({ variant }))}>{footerText || \"Pre-negotiated discounts are available to early-stage startups and nonprofits.\"}</p>\n            <Button\n              className=\"bg-secondary hover:bg-secondary/80 text-secondary-foreground px-6\"\n              onClick={onFooterButtonClick}\n            >\n              {footerButtonText || \"Apply now\"}\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/billingsdk/pricing-table-three.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/pricing-table-three-demo.tsx",
      "content": "'use client'\n\nimport { PricingTableThree } from '@/components/billingsdk/pricing-table-three';\nimport { plans } from '@/lib/billingsdk-config';\n\nexport function PricingTableThreeDemo() {\n\n    return (\n        <PricingTableThree \n            plans={plans}\n            onPlanSelect={(planId) => console.log('Selected plan:', planId)}\n            className={\"w-full max-w-4xl mx-auto\"}\n            variant=\"small\"\n            showFooter={true}\n            footerText=\"Pre-negotiated discounts are available to early-stage startups and nonprofits.\"\n            footerButtonText=\"Apply now\"\n            onFooterButtonClick={() => console.log('Footer button clicked')}\n        />\n    );\n}\n",
      "type": "registry:component",
      "target": "components/pricing-table-three-demo.tsx"
    },
    {
      "path": "src/registry/lib/billingsdk-config.ts",
      "content": "export interface Plan {\n    id: string\n    title: string\n    description: string\n    highlight?: boolean\n    type?: 'monthly' | 'yearly'\n    currency?: string\n    monthlyPrice: string\n    yearlyPrice: string\n    buttonText: string\n    badge?: string\n    features: {\n        name: string\n        icon: string\n        iconColor?: string\n    }[]\n}\n\nexport interface CurrentPlan {\n    plan: Plan\n    type: 'monthly' | 'yearly' | 'custom'\n    price?: string\n    nextBillingDate: string\n    paymentMethod: string\n    status: 'active' | 'inactive' | 'past_due' | 'cancelled'\n}\n\nexport const plans: Plan[] = [\n    {\n        id: 'starter',\n        title: 'Starter',\n        description: 'For developers testing out Liveblocks locally.',\n        currency: '$',\n        monthlyPrice: '0',\n        yearlyPrice: '0',\n        buttonText: 'Start today for free',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    },\n    {\n        id: 'pro',\n        title: 'Pro',\n        description: 'For companies adding collaboration in production.',\n        currency: '$',\n        monthlyPrice: '20',\n        yearlyPrice: '199',\n        buttonText: 'Sign up',\n        badge: 'Most popular',\n        highlight: true,\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    },\n    {\n        id: 'enterprise',\n        title: 'Enterprise',\n        description: 'For organizations that need more support and compliance features.',\n        currency: '$',\n        monthlyPrice: 'Custom',\n        yearlyPrice: 'Custom',\n        buttonText: 'Contact sales',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    }\n];\n",
      "type": "registry:lib",
      "target": "lib/billingsdk-config.ts"
    }
  ]
}
</file>

<file path="public/r/pricing-table-two.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pricing-table-two",
  "type": "registry:block",
  "title": "Pricing Table Two",
  "description": "A pricing table component with a feature table",
  "dependencies": [
    "lucide-react",
    "class-variance-authority",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "table",
    "switch",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/pricing-table-two.tsx",
      "content": "\"use client\";\n\nimport { Check, Minus, Zap } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nimport { type Plan } from \"@/lib/billingsdk-config\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\n\nconst sectionVariants = cva(\"py-32\", {\n  variants: {\n    size: {\n      small: \"py-12\",\n      medium: \"py-20\",\n      large: \"py-32\",\n    },\n    theme: {\n      minimal: \"\",\n      classic: \"bg-gradient-to-b from-background to-muted/20 relative overflow-hidden\",\n    },\n  },\n  defaultVariants: {\n    size: \"medium\",\n    theme: \"minimal\",\n  },\n});\n\nconst titleVariants = cva(\"mb-2 font-semibold\", {\n  variants: {\n    size: {\n      small: \"text-2xl lg:text-3xl\",\n      medium: \"text-3xl lg:text-4xl\",\n      large: \"text-3xl lg:text-5xl\",\n    },\n    theme: {\n      minimal: \"\",\n      classic: \"bg-gradient-to-r from-foreground to-muted-foreground bg-clip-text text-transparent font-bold\",\n    },\n  },\n  defaultVariants: {\n    size: \"large\",\n    theme: \"minimal\",\n  },\n});\n\nconst descriptionVariants = cva(\"text-muted-foreground\", {\n  variants: {\n    size: {\n      small: \"text-sm lg:text-base\",\n      medium: \"text-base lg:text-lg\",\n      large: \"lg:text-lg\",\n    },\n    theme: {\n      minimal: \"\",\n      classic: \"text-center max-w-2xl mx-auto\",\n    },\n  },\n  defaultVariants: {\n    size: \"large\",\n    theme: \"minimal\",\n  },\n});\n\nconst toggleWrapperVariants = cva(\"flex justify-center items-center gap-3\", {\n  variants: {\n    size: {\n      small: \"mt-6\",\n      medium: \"mt-7\",\n      large: \"mt-8\",\n    },\n    theme: {\n      minimal: \"\",\n      classic: \"mt-10\",\n    },\n  },\n  defaultVariants: {\n    size: \"large\",\n    theme: \"minimal\",\n  },\n});\n\nconst toggleLabelVariants = cva(\"font-medium text-sm transition-all\", {\n  variants: {\n    size: {\n      small: \"text-xs\",\n      medium: \"text-sm\",\n      large: \"text-sm\",\n    },\n    theme: {\n      minimal: \"\",\n      classic: \"font-semibold\",\n    },\n  },\n  defaultVariants: {\n    size: \"large\",\n    theme: \"minimal\",\n  },\n});\n\nconst switchScaleVariants = cva(\"transition-all\", {\n  variants: {\n    size: {\n      small: \"scale-90\",\n      medium: \"scale-95\",\n      large: \"\",\n    },\n    theme: {\n      minimal: \"\",\n      classic: \"data-[state=checked]:bg-primary\",\n    },\n  },\n  defaultVariants: {\n    size: \"large\",\n    theme: \"minimal\",\n  },\n});\n\nconst plansWrapperVariants = cva(\"flex\", {\n  variants: {\n    size: {\n      small: \"mt-6\",\n      medium: \"mt-8\",\n      large: \"mt-10\",\n    },\n    theme: {\n      minimal: \"\",\n      classic: \"mt-12\",\n    },\n  },\n  defaultVariants: {\n    size: \"large\",\n    theme: \"minimal\",\n  },\n});\n\nconst cardVariants = cva(\n  \"bg-card text-card-foreground border shadow-sm flex w-full flex-col justify-between text-center rounded-xl md:rounded-none transition-all duration-300\",\n  {\n    variants: {\n      size: {\n        small: \"py-4 gap-6\",\n        medium: \"py-5 gap-7\",\n        large: \"py-6 gap-8\",\n      },\n      theme: {\n        minimal: \"\",\n        classic: \"hover:shadow-xl backdrop-blur-sm bg-card/50 border-border/50\",\n      },\n      highlight: {\n        true: \"\",\n        false: \"\",\n      },\n    },\n    compoundVariants: [\n      {\n        theme: \"classic\",\n        highlight: true,\n        className: \"bg-gradient-to-b from-primary/5 to-transparent relative overflow-hidden shadow-2xl\",\n      },\n      {\n        theme: \"minimal\",\n        highlight: true,\n        className: \"bg-muted/30 shadow-lg\",\n      },\n    ],\n    defaultVariants: {\n      size: \"large\",\n      theme: \"minimal\",\n      highlight: false,\n    },\n  }\n);\n\nconst priceTextVariants = cva(\"font-bold\", {\n  variants: {\n    size: {\n      small: \"text-3xl\",\n      medium: \"text-4xl\",\n      large: \"text-5xl\",\n    },\n    theme: {\n      minimal: \"\",\n      classic: \"text-6xl font-extrabold bg-gradient-to-r from-foreground to-muted-foreground bg-clip-text text-transparent\",\n    },\n  },\n  defaultVariants: {\n    size: \"large\",\n    theme: \"minimal\",\n  },\n});\n\nconst priceSubTextVariants = cva(\"text-muted-foreground\", {\n  variants: {\n    size: {\n      small: \"mt-2\",\n      medium: \"mt-3\",\n      large: \"mt-3\",\n    },\n    theme: {\n      minimal: \"\",\n      classic: \"font-medium\",\n    },\n  },\n  defaultVariants: {\n    size: \"large\",\n    theme: \"minimal\",\n  },\n});\n\nconst tableWrapperVariants = cva(\"relative w-full overflow-x-auto\", {\n  variants: {\n    size: {\n      small: \"mt-6\",\n      medium: \"mt-8\",\n      large: \"mt-10\",\n    },\n    theme: {\n      minimal: \"\",\n      classic: \"mt-16 bg-card/30 backdrop-blur-sm rounded-xl border border-border/50 shadow-sm\",\n    },\n  },\n  defaultVariants: {\n    size: \"large\",\n    theme: \"minimal\",\n  },\n});\n\nconst featureIconVariants = cva(\"mx-auto\", {\n  variants: {\n    size: {\n      small: \"size-4\",\n      medium: \"size-5\",\n      large: \"size-5\",\n    },\n    theme: {\n      minimal: \"\",\n      classic: \"text-emerald-500\",\n    },\n  },\n  defaultVariants: {\n    size: \"large\",\n    theme: \"minimal\",\n  },\n});\n\nconst firstColWidthVariants = cva(\"\", {\n  variants: {\n    size: {\n      small: \"w-[140px]\",\n      medium: \"w-[180px]\",\n      large: \"w-[200px]\",\n    },\n  },\n  defaultVariants: {\n    size: \"large\",\n  },\n});\n\nconst buttonVariants = cva(\"w-full hover:cursor-pointer transition-all duration-300\", {\n  variants: {\n    theme: {\n      minimal: \"\",\n      classic: \"hover:shadow-xl active:scale-95\",\n    },\n  },\n  defaultVariants: {\n    theme: \"minimal\",\n  },\n});\n\ninterface PricingTableTwoProps extends VariantProps<typeof sectionVariants> {\n  className?: string;\n  plans: Plan[];\n  title?: string;\n  description?: string;\n  onPlanSelect?: (planId: string) => void;\n}\n\nexport function PricingTableTwo({\n  className,\n  plans,\n  title,\n  description,\n  onPlanSelect,\n  size,\n  theme = \"minimal\"\n}: PricingTableTwoProps) {\n  const [isAnnually, setIsAnnually] = useState(false);\n\n  function calculateDiscount(monthlyPrice: string, yearlyPrice: string): number {\n    const monthly = parseFloat(monthlyPrice);\n    const yearly = parseFloat(yearlyPrice);\n\n    if (\n      monthlyPrice.toLowerCase() === \"custom\" ||\n      yearlyPrice.toLowerCase() === \"custom\" ||\n      isNaN(monthly) ||\n      isNaN(yearly) ||\n      monthly === 0\n    ) {\n      return 0;\n    }\n\n    const discount = ((monthly * 12 - yearly) / (monthly * 12)) * 100;\n    return Math.round(discount);\n  }\n\n  const yearlyPriceDiscount = plans.length\n    ? Math.max(\n      ...plans.map((plan) =>\n        calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)\n      )\n    )\n    : 0;\n\n  return (\n    <section className={cn(sectionVariants({ size, theme }), className)}>\n      {/* Classic theme background elements */}\n      {theme === \"classic\" && (\n        <>\n          <div className=\"absolute inset-0 bg-grid-pattern opacity-5\" />\n          <div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-primary/5 rounded-full blur-3xl\" />\n          <div className=\"absolute top-1/4 right-1/4 w-64 h-64 bg-secondary/5 rounded-full blur-2xl\" />\n        </>\n      )}\n\n      <div className=\"container max-w-5xl relative\">\n        <motion.div\n          className={cn(\n            \"flex flex-col items-center gap-4\",\n            theme === \"classic\" ? \"text-center\" : \"\"\n          )}\n          initial={{ opacity: 0 }}\n          whileInView={{ opacity: 1 }}\n          viewport={{ once: true }}\n          transition={{ duration: 0.6, ease: \"easeOut\" }}\n        >\n          <h2 className={cn(titleVariants({ size, theme }))}>\n            {title || \"We offer 3 plans\"}\n          </h2>\n\n          <p className={cn(descriptionVariants({ size, theme }))}>\n            {description || \"Lorem ipsum dolor sit amet consectetur adipisicing.\"}\n          </p>\n        </motion.div>\n\n        {/* Monthly/Yearly Toggle */}\n        <div className={cn(toggleWrapperVariants({ size, theme }))}>\n          <span className={cn(\n            toggleLabelVariants({ size, theme }),\n            !isAnnually ? \"text-foreground\" : \"text-muted-foreground\"\n          )}>\n            Monthly\n          </span>\n          <Switch\n            checked={isAnnually}\n            onCheckedChange={setIsAnnually}\n            className={cn(switchScaleVariants({ size, theme }))}\n          />\n          <span className={cn(\n            toggleLabelVariants({ size, theme }),\n            isAnnually ? \"text-foreground\" : \"text-muted-foreground\"\n          )}>\n            Yearly\n          </span>\n        </div>\n\n        <div className=\"flex justify-center\">\n          {yearlyPriceDiscount > 0 && (\n            <motion.span\n              className={cn(\n                \"text-xs mt-2 text-muted-foreground\",\n                theme === \"classic\" && \"text-emerald-500 font-medium\"\n              )}\n              initial={{ opacity: 0 }}\n              whileInView={{ opacity: 1 }}\n              viewport={{ once: true }}\n              transition={{ duration: 0.5, delay: 0.2 }}\n            >\n              Save upto {yearlyPriceDiscount}% with yearly plan\n            </motion.span>\n          )}\n        </div>\n\n        <div className={cn(\n          plansWrapperVariants({ size, theme }),\n          \"gap-4 md:gap-0\",\n          plans.length === 1 && \"flex-col max-w-md mx-auto\",\n          plans.length === 2 && \"flex-col md:flex-row max-w-4xl mx-auto\",\n          plans.length >= 3 && \"flex-col lg:flex-row max-w-7xl mx-auto\"\n        )}>\n          {plans.map((plan: Plan, index: number) => (\n            <motion.div\n              key={plan.id}\n              className={cn(\n                cardVariants({\n                  size,\n                  theme,\n                  highlight: plan.highlight\n                }),\n                index === 0 && \"md:rounded-l-xl md:border-r-0\",\n                index === plans.length - 1 && \"md:rounded-r-xl md:border-l-0\",\n                index > 0 && index < plans.length - 1 && \"md:border-l-0 md:border-r-0\",\n                plans.length === 1 && \"rounded-xl\"\n              )}\n              initial={{ opacity: 0 }}\n              whileInView={{ opacity: 1 }}\n              viewport={{ once: true }}\n              transition={{ duration: 0.6, ease: \"easeOut\", delay: index * 0.15 }}\n            >\n              <div className=\"grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6\">\n                <div className=\"flex items-center gap-2 justify-center\">\n                  <div className={cn(\n                    \"leading-none font-semibold\",\n                    theme === \"classic\" && \"text-lg font-bold\"\n                  )}>\n                    {plan.title}\n                  </div>\n                </div>\n                <p className={cn(\n                  \"text-muted-foreground text-center\",\n                  theme === \"classic\" && \"text-foreground/80\"\n                )}>\n                  {plan.description}\n                </p>\n              </div>\n\n              <div className=\"px-6\">\n                <AnimatePresence mode=\"wait\">\n                  {isAnnually ? (\n                    <motion.div\n                      key=\"yearly\"\n                      initial={{ opacity: 0, y: 10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      exit={{ opacity: 0, y: -10 }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      <span className={cn(priceTextVariants({ size, theme }))}>\n                        {parseFloat(plan.yearlyPrice) >= 0 && (\n                          <>{plan.currency}</>\n                        )}\n                        {plan.yearlyPrice}\n                        {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice) > 0 && (\n                          <span className={cn(\n                            \"text-xs ml-2\",\n                            theme === \"classic\" ? \"text-emerald-500 font-semibold\" : \"underline\"\n                          )}>\n                            {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)}% off\n                          </span>\n                        )}\n                      </span>\n                      <p className={cn(priceSubTextVariants({ size, theme }))}>per year</p>\n                    </motion.div>\n                  ) : (\n                    <motion.div\n                      key=\"monthly\"\n                      initial={{ opacity: 0, y: 10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      exit={{ opacity: 0, y: -10 }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      <span className={cn(priceTextVariants({ size, theme }))}>\n                        {parseFloat(plan.monthlyPrice) >= 0 && (\n                          <>{plan.currency}</>\n                        )}\n                        {plan.monthlyPrice}\n                      </span>\n                      <p className={cn(priceSubTextVariants({ size, theme }))}>per month</p>\n                    </motion.div>\n                  )}\n                </AnimatePresence>\n              </div>\n\n              <div className=\"flex items-center px-6\">\n                <Button\n                  className={cn(\n                    buttonVariants({ theme }),\n                    plan.highlight && theme === \"minimal\" && \"gap-2 whitespace-nowrap focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 shadow hover:bg-primary/90 h-9 py-2 group bg-primary text-primary-foreground ring-primary before:from-primary-foreground/20 after:from-primary-foreground/10 relative isolate inline-flex w-full items-center justify-center overflow-hidden rounded-md px-3 text-left text-sm font-medium ring-1 transition duration-300 ease-[cubic-bezier(0.4,0.36,0,1)] before:pointer-events-none before:absolute before:inset-0 before:-z-10 before:rounded-md before:bg-gradient-to-b before:opacity-80 before:transition-opacity before:duration-300 before:ease-[cubic-bezier(0.4,0.36,0,1)] after:pointer-events-none after:absolute after:inset-0 after:-z-10 after:rounded-md after:bg-gradient-to-b after:to-transparent after:mix-blend-overlay\",\n                    plan.highlight && theme === \"classic\" && \"relative overflow-hidden bg-gradient-to-r from-primary to-primary/80 text-primary-foreground font-semibold py-3 px-6 rounded-lg border border-primary/20\"\n                  )}\n                  variant={plan.highlight ? \"default\" : \"secondary\"}\n                  onClick={() => onPlanSelect?.(plan.id)}\n                >\n                  {theme === \"classic\" && plan.highlight && (\n                    <Zap className=\"w-4 h-4 mr-1\" />\n                  )}\n                  {plan.buttonText}\n                  {theme === \"classic\" && plan.highlight && (\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-white/0 via-white/10 to-white/0 translate-x-[-100%] hover:translate-x-[100%] transition-transform duration-700\" />\n                  )}\n                </Button>\n              </div>\n            </motion.div>\n          ))}\n        </div>\n\n        <motion.div\n          className={cn(tableWrapperVariants({ size, theme }))}\n          initial={{ opacity: 0 }}\n          whileInView={{ opacity: 1 }}\n          viewport={{ once: true }}\n          transition={{ duration: 0.7, ease: \"easeOut\" }}\n        >\n          <Table className={cn(theme === \"classic\" && \"bg-transparent\")}>\n            <TableHeader>\n              <TableRow className={cn(theme === \"classic\" && \"border-border/30\")}>\n                <TableHead className={firstColWidthVariants({ size })}></TableHead>\n                {plans.map((plan: Plan) => (\n                  <TableHead key={plan.id} className={cn(\n                    \"text-center font-bold text-primary\",\n                    theme === \"classic\" && \"text-lg\"\n                  )}>\n                    {plan.title}\n                  </TableHead>\n                ))}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {(() => {\n                const allFeatures = new Set<string>();\n                plans.forEach(plan => {\n                  plan.features.forEach(feature => {\n                    allFeatures.add(feature.name);\n                  });\n                });\n                return Array.from(allFeatures).map((featureName, featureIndex) => (\n                  <TableRow key={featureIndex} className={cn(\n                    theme === \"classic\" && \"border-border/20 hover:bg-muted/30\"\n                  )}>\n                    <TableCell className={cn(\n                      \"font-medium text-left\",\n                      theme === \"classic\" && \"font-semibold text-foreground/90\"\n                    )}>\n                      {featureName}\n                    </TableCell>\n                    {plans.map((plan: Plan) => {\n                      const feature = plan.features.find(f => f.name === featureName);\n                      return (\n                        <TableCell key={plan.id} className=\"text-center\">\n                          {feature ? (\n                            feature.icon === \"check\" ? (\n                              <Check className={cn(featureIconVariants({ size, theme }))} />\n                            ) : feature.icon === \"minus\" ? (\n                              <Minus className={cn(featureIconVariants({ size, theme }))} />\n                            ) : (\n                              <span className={cn(\n                                \"text-sm text-muted-foreground\",\n                                theme === \"classic\" && \"font-medium text-foreground/70\"\n                              )}>\n                                {feature.name}\n                              </span>\n                            )\n                          ) : (\n                            <Minus className={cn(featureIconVariants({ size, theme }))} />\n                          )}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                ));\n              })()}\n            </TableBody>\n          </Table>\n        </motion.div>\n      </div>\n    </section>\n  );\n}",
      "type": "registry:component",
      "target": "components/billingsdk/pricing-table-two.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/pricing-table-two-demo.tsx",
      "content": "\"use client\"\n\nimport { plans } from \"@/lib/billingsdk-config\";\nimport { PricingTableTwo } from \"@/components/billingsdk/pricing-table-two\";\n\nexport function PricingTableTwoDemo() {\n    return <>\n        <PricingTableTwo plans={plans} className=\"w-full max-w-4xl mx-auto\"\n            title={`We offer ${plans.length} plans`}\n            description=\"Choose the plan that's right for you\"\n            onPlanSelect={(planId) => console.log('Selected plan:', planId)}\n            size=\"small\" // small, medium, large\n            theme=\"classic\" // minimal or classic\n        />\n    </>\n} ",
      "type": "registry:component",
      "target": "components/pricing-table-two-demo.tsx"
    },
    {
      "path": "src/registry/lib/billingsdk-config.ts",
      "content": "export interface Plan {\n    id: string\n    title: string\n    description: string\n    highlight?: boolean\n    type?: 'monthly' | 'yearly'\n    currency?: string\n    monthlyPrice: string\n    yearlyPrice: string\n    buttonText: string\n    badge?: string\n    features: {\n        name: string\n        icon: string\n        iconColor?: string\n    }[]\n}\n\nexport interface CurrentPlan {\n    plan: Plan\n    type: 'monthly' | 'yearly' | 'custom'\n    price?: string\n    nextBillingDate: string\n    paymentMethod: string\n    status: 'active' | 'inactive' | 'past_due' | 'cancelled'\n}\n\nexport const plans: Plan[] = [\n    {\n        id: 'starter',\n        title: 'Starter',\n        description: 'For developers testing out Liveblocks locally.',\n        currency: '$',\n        monthlyPrice: '0',\n        yearlyPrice: '0',\n        buttonText: 'Start today for free',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    },\n    {\n        id: 'pro',\n        title: 'Pro',\n        description: 'For companies adding collaboration in production.',\n        currency: '$',\n        monthlyPrice: '20',\n        yearlyPrice: '199',\n        buttonText: 'Sign up',\n        badge: 'Most popular',\n        highlight: true,\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    },\n    {\n        id: 'enterprise',\n        title: 'Enterprise',\n        description: 'For organizations that need more support and compliance features.',\n        currency: '$',\n        monthlyPrice: 'Custom',\n        yearlyPrice: 'Custom',\n        buttonText: 'Contact sales',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    }\n];\n",
      "type": "registry:lib",
      "target": "lib/billingsdk-config.ts"
    }
  ]
}
</file>

<file path="public/r/usage-meter-circle.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "usage-meter-circle",
  "type": "registry:block",
  "title": "Usage Meter Circle",
  "description": "A usage meter circle component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "card",
    "badge",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/usage-meter.tsx",
      "content": "\"use client\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    CardDescription,\r\n    CardHeader,\r\n    CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { motion, useSpring, useMotionValue, useTransform } from \"motion/react\"\r\nimport { useEffect } from \"react\"\r\n\r\nexport interface Usage {\r\n    name: string\r\n    usage: number\r\n    limit: number\r\n}\r\n\r\ninterface UsageMeterProps {\r\n    usage: Usage[]\r\n    className?: string\r\n    variant?: \"linear\" | \"circle\"\r\n    size?: \"sm\" | \"md\" | \"lg\"\r\n    title?: string\r\n    description?: string\r\n    progressColor?: \"default\" | \"usage\"\r\n}\r\n\r\nexport function UsageMeter({\r\n    usage,\r\n    className,\r\n    variant = \"linear\",\r\n    size = \"md\",\r\n    title,\r\n    description,\r\n    progressColor = \"default\",\r\n}: UsageMeterProps) {\r\n    if (!usage?.length) return null\r\n\r\n    const getStatus = (percentage: number) => {\r\n        if (percentage >= 90) return <Badge variant=\"destructive\">Critical</Badge>\r\n        if (percentage >= 75) return <Badge variant=\"secondary\">High</Badge>\r\n        return null\r\n    }\r\n    const getUsageClasses = (percentage: number, variant: \"circle\" | \"linear\"): string[] => {\r\n        const thresholds = [\r\n            { min: 90, circle: \"text-red-500\", linear: [\"from-red-500\", \"to-red-400\"] },\r\n            { min: 75, circle: \"text-yellow-500\", linear: [\"from-yellow-500\", \"to-yellow-400\"] },\r\n            { min: 50, circle: \"text-emerald-500\", linear: [\"from-emerald-500\", \"to-emerald-400\"] },\r\n            { min: 25, circle: \"text-blue-500\", linear: [\"from-blue-500\", \"to-blue-400\"] },\r\n            { min: 0, circle: \"text-gray-500\", linear: [\"from-gray-500\", \"to-gray-400\"] },\r\n        ];\r\n        const match = thresholds.find(t => percentage >= t.min);\r\n\r\n        if (match) {\r\n            return variant === \"circle\" ? [match.circle] : match.linear;\r\n        }\r\n\r\n        return variant === \"circle\" ? [\"text-gray-500\"] : [\"from-gray-500\", \"to-gray-400\"];\r\n    }\r\n\r\n    if (variant === \"circle\") {\r\n        const sizeConfig = {\r\n            sm: { circle: 100, stroke: 6, text: \"text-lg\", label: \"text-xs\" },\r\n            md: { circle: 140, stroke: 10, text: \"text-xl\", label: \"text-sm\" },\r\n            lg: { circle: 180, stroke: 12, text: \"text-2xl\", label: \"text-base\" },\r\n        }\r\n\r\n        const config = sizeConfig[size]\r\n        const radius = (config.circle - config.stroke) / 2\r\n        const circumference = radius * 2 * Math.PI\r\n\r\n        return (\r\n            <Card className={cn(\"w-auto\", className)}>\r\n                {(title || description) && (\r\n                    <CardHeader className=\"space-y-1\">\r\n                        {title && (\r\n                            <CardTitle className=\"text-base font-medium leading-tight truncate\">\r\n                                {title}\r\n                            </CardTitle>\r\n                        )}\r\n                        {description && (\r\n                            <CardDescription className=\"text-sm text-muted-foreground\">\r\n                                {description}\r\n                            </CardDescription>\r\n                        )}\r\n                    </CardHeader>\r\n\r\n                )}\r\n                <CardContent\r\n                    className={\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\"}\r\n                >\r\n                    {usage.map((item, i) => {\r\n                        const percentage = Math.min((item.usage / item.limit) * 100, 100)\r\n                        const remaining = Math.max(item.limit - item.usage, 0)\r\n\r\n                        const motionValue = useMotionValue(0)\r\n                        const springValue = useSpring(motionValue, { stiffness: 100, damping: 20 })\r\n                        const display = useTransform(springValue, (latest) => `${Math.round(latest)}%`)\r\n\r\n                        useEffect(() => {\r\n                            motionValue.set(percentage)\r\n                        }, [percentage, motionValue])\r\n\r\n                        return (\r\n                            <div\r\n                                key={item.name || i}\r\n                                className=\"space-y-3 p-4 bg-muted/20 rounded-xl flex flex-col items-center text-center\"\r\n                            >\r\n                                <span className=\"text-sm font-medium truncate w-full\">{item.name}</span>\r\n                                <div className=\"relative\">\r\n                                    <svg width={config.circle} height={config.circle} className=\"-rotate-90\">\r\n                                        <circle\r\n                                            cx={config.circle / 2}\r\n                                            cy={config.circle / 2}\r\n                                            r={radius}\r\n                                            strokeWidth={config.stroke}\r\n                                            className=\"text-muted stroke-current\"\r\n                                            fill=\"transparent\"\r\n                                        />\r\n                                        <motion.circle\r\n                                            cx={config.circle / 2}\r\n                                            cy={config.circle / 2}\r\n                                            r={radius}\r\n                                            strokeWidth={config.stroke}\r\n                                            fill=\"transparent\"\r\n                                            strokeDasharray={circumference}\r\n                                            strokeLinecap=\"round\"\r\n                                            className={cn(\"stroke-current\", progressColor === \"usage\" ? getUsageClasses(percentage, \"circle\") : \"text-primary\")}\r\n                                            initial={{ strokeDashoffset: circumference }}\r\n                                            animate={{ strokeDashoffset: circumference - (percentage / 100) * circumference }}\r\n                                            transition={{ duration: 0.5, ease: \"easeOut\" }}\r\n                                        />\r\n                                    </svg>\r\n                                    <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\r\n                                        <motion.span className={cn(\"font-semibold\", config.text)}>{display}</motion.span>\r\n                                        <span className={cn(\"text-muted-foreground\", config.label)}>used</span>\r\n                                    </div>\r\n                                </div>\r\n                                <span className=\"text-xs text-muted-foreground\">\r\n                                    {remaining.toLocaleString()} / {item.limit.toLocaleString()} left\r\n                                </span>\r\n                                {getStatus(percentage)}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </CardContent>\r\n            </Card>\r\n        )\r\n    }\r\n\r\n    // Linear variant\r\n    const sizeConfig = {\r\n        sm: { bar: \"h-2\", text: \"text-xs\" },\r\n        md: { bar: \"h-3\", text: \"text-sm\" },\r\n        lg: { bar: \"h-4\", text: \"text-base\" },\r\n    }\r\n\r\n    const config = sizeConfig[size]\r\n\r\n    return (\r\n        <Card className={cn(\"w-full max-w-md\", className)}>\r\n            {(title || description) && (\r\n                <CardHeader className=\"space-y-1\">\r\n                    {title && (\r\n                        <CardTitle className=\"text-base font-medium leading-tight truncate\">\r\n                            {title}\r\n                        </CardTitle>\r\n                    )}\r\n                    {description && (\r\n                        <CardDescription className=\"text-sm text-muted-foreground\">\r\n                            {description}\r\n                        </CardDescription>\r\n                    )}\r\n                </CardHeader>\r\n\r\n            )}\r\n            <CardContent\r\n                className={\"grid grid-cols-1 gap-4\"}\r\n            >\r\n                {usage.map((item, i) => {\r\n                    const percentage = Math.min((item.usage / item.limit) * 100, 100)\r\n                    const remaining = Math.max(item.limit - item.usage, 0)\r\n\r\n                    const motionValue = useMotionValue(0)\r\n                    const springValue = useSpring(motionValue, { stiffness: 100, damping: 20 })\r\n                    const display = useTransform(springValue, (latest) => `${Math.round(latest)}%`)\r\n\r\n                    useEffect(() => {\r\n                        motionValue.set(percentage)\r\n                    }, [percentage, motionValue])\r\n\r\n                    return (\r\n                        <div key={item.name || i} className=\"space-y-2 p-4 bg-muted/20 rounded-xl\">\r\n                            <div className=\"flex items-center justify-between\">\r\n                                <span className=\"text-sm font-medium truncate\">{item.name}</span>\r\n                                <motion.span className=\"text-xs text-muted-foreground\">{display}</motion.span>\r\n                            </div>\r\n                            <div className={cn(\"w-full bg-muted rounded-full overflow-hidden\", config.bar)}>\r\n                                <motion.div\r\n                                    className={cn(\"bg-gradient-to-r rounded-full\", config.bar, progressColor === \"usage\" ? getUsageClasses(percentage, \"linear\") : \"from-primary to-primary/70\")}\r\n                                    initial={{ width: 0 }}\r\n                                    animate={{ width: `${percentage}%` }}\r\n                                    transition={{ duration: 0.5, ease: \"easeOut\" }}\r\n                                />\r\n                            </div>\r\n                            <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\r\n                                <span>\r\n                                    {remaining.toLocaleString()} / {item.limit.toLocaleString()} left\r\n                                </span>\r\n                                {getStatus(percentage)}\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/billingsdk/usage-meter.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/usage-meter-circle-demo.tsx",
      "content": "'use client'\r\n\r\nimport { UsageMeter } from \"@/components/billingsdk/usage-meter\";\r\n\r\nexport default function UsageMeterCircleDemo() {\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4 mx-auto w-full\">\r\n      <UsageMeter\r\n        usage={[{\r\n          name: \"Claude Sonnet 4\",\r\n          usage: 75,\r\n          limit: 100\r\n        }, {\r\n          name: \"ChatGPT 5\",\r\n          usage: 12,\r\n          limit: 100\r\n        }, {\r\n          name: \"Grok 3\",\r\n          usage: 57,\r\n          limit: 100\r\n        }, {\r\n          name: \"Gemini 2.5\",\r\n          usage: 95,\r\n          limit: 100\r\n        }]}\r\n        title=\"LLM Usage\"\r\n        description=\"Your usage of the LLM models\"\r\n        variant=\"circle\"\r\n        size=\"md\"\r\n        className=\"mx-auto\" />\r\n    </div>\r\n\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/usage-meter-circle-demo.tsx"
    }
  ]
}
</file>

<file path="public/r/usage-meter-linear.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "usage-meter-linear",
  "type": "registry:block",
  "title": "Usage Meter Linear",
  "description": "A usage meter linear component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "card",
    "badge",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/usage-meter.tsx",
      "content": "\"use client\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    CardDescription,\r\n    CardHeader,\r\n    CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { motion, useSpring, useMotionValue, useTransform } from \"motion/react\"\r\nimport { useEffect } from \"react\"\r\n\r\nexport interface Usage {\r\n    name: string\r\n    usage: number\r\n    limit: number\r\n}\r\n\r\ninterface UsageMeterProps {\r\n    usage: Usage[]\r\n    className?: string\r\n    variant?: \"linear\" | \"circle\"\r\n    size?: \"sm\" | \"md\" | \"lg\"\r\n    title?: string\r\n    description?: string\r\n    progressColor?: \"default\" | \"usage\"\r\n}\r\n\r\nexport function UsageMeter({\r\n    usage,\r\n    className,\r\n    variant = \"linear\",\r\n    size = \"md\",\r\n    title,\r\n    description,\r\n    progressColor = \"default\",\r\n}: UsageMeterProps) {\r\n    if (!usage?.length) return null\r\n\r\n    const getStatus = (percentage: number) => {\r\n        if (percentage >= 90) return <Badge variant=\"destructive\">Critical</Badge>\r\n        if (percentage >= 75) return <Badge variant=\"secondary\">High</Badge>\r\n        return null\r\n    }\r\n    const getUsageClasses = (percentage: number, variant: \"circle\" | \"linear\"): string[] => {\r\n        const thresholds = [\r\n            { min: 90, circle: \"text-red-500\", linear: [\"from-red-500\", \"to-red-400\"] },\r\n            { min: 75, circle: \"text-yellow-500\", linear: [\"from-yellow-500\", \"to-yellow-400\"] },\r\n            { min: 50, circle: \"text-emerald-500\", linear: [\"from-emerald-500\", \"to-emerald-400\"] },\r\n            { min: 25, circle: \"text-blue-500\", linear: [\"from-blue-500\", \"to-blue-400\"] },\r\n            { min: 0, circle: \"text-gray-500\", linear: [\"from-gray-500\", \"to-gray-400\"] },\r\n        ];\r\n        const match = thresholds.find(t => percentage >= t.min);\r\n\r\n        if (match) {\r\n            return variant === \"circle\" ? [match.circle] : match.linear;\r\n        }\r\n\r\n        return variant === \"circle\" ? [\"text-gray-500\"] : [\"from-gray-500\", \"to-gray-400\"];\r\n    }\r\n\r\n    if (variant === \"circle\") {\r\n        const sizeConfig = {\r\n            sm: { circle: 100, stroke: 6, text: \"text-lg\", label: \"text-xs\" },\r\n            md: { circle: 140, stroke: 10, text: \"text-xl\", label: \"text-sm\" },\r\n            lg: { circle: 180, stroke: 12, text: \"text-2xl\", label: \"text-base\" },\r\n        }\r\n\r\n        const config = sizeConfig[size]\r\n        const radius = (config.circle - config.stroke) / 2\r\n        const circumference = radius * 2 * Math.PI\r\n\r\n        return (\r\n            <Card className={cn(\"w-auto\", className)}>\r\n                {(title || description) && (\r\n                    <CardHeader className=\"space-y-1\">\r\n                        {title && (\r\n                            <CardTitle className=\"text-base font-medium leading-tight truncate\">\r\n                                {title}\r\n                            </CardTitle>\r\n                        )}\r\n                        {description && (\r\n                            <CardDescription className=\"text-sm text-muted-foreground\">\r\n                                {description}\r\n                            </CardDescription>\r\n                        )}\r\n                    </CardHeader>\r\n\r\n                )}\r\n                <CardContent\r\n                    className={\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\"}\r\n                >\r\n                    {usage.map((item, i) => {\r\n                        const percentage = Math.min((item.usage / item.limit) * 100, 100)\r\n                        const remaining = Math.max(item.limit - item.usage, 0)\r\n\r\n                        const motionValue = useMotionValue(0)\r\n                        const springValue = useSpring(motionValue, { stiffness: 100, damping: 20 })\r\n                        const display = useTransform(springValue, (latest) => `${Math.round(latest)}%`)\r\n\r\n                        useEffect(() => {\r\n                            motionValue.set(percentage)\r\n                        }, [percentage, motionValue])\r\n\r\n                        return (\r\n                            <div\r\n                                key={item.name || i}\r\n                                className=\"space-y-3 p-4 bg-muted/20 rounded-xl flex flex-col items-center text-center\"\r\n                            >\r\n                                <span className=\"text-sm font-medium truncate w-full\">{item.name}</span>\r\n                                <div className=\"relative\">\r\n                                    <svg width={config.circle} height={config.circle} className=\"-rotate-90\">\r\n                                        <circle\r\n                                            cx={config.circle / 2}\r\n                                            cy={config.circle / 2}\r\n                                            r={radius}\r\n                                            strokeWidth={config.stroke}\r\n                                            className=\"text-muted stroke-current\"\r\n                                            fill=\"transparent\"\r\n                                        />\r\n                                        <motion.circle\r\n                                            cx={config.circle / 2}\r\n                                            cy={config.circle / 2}\r\n                                            r={radius}\r\n                                            strokeWidth={config.stroke}\r\n                                            fill=\"transparent\"\r\n                                            strokeDasharray={circumference}\r\n                                            strokeLinecap=\"round\"\r\n                                            className={cn(\"stroke-current\", progressColor === \"usage\" ? getUsageClasses(percentage, \"circle\") : \"text-primary\")}\r\n                                            initial={{ strokeDashoffset: circumference }}\r\n                                            animate={{ strokeDashoffset: circumference - (percentage / 100) * circumference }}\r\n                                            transition={{ duration: 0.5, ease: \"easeOut\" }}\r\n                                        />\r\n                                    </svg>\r\n                                    <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\r\n                                        <motion.span className={cn(\"font-semibold\", config.text)}>{display}</motion.span>\r\n                                        <span className={cn(\"text-muted-foreground\", config.label)}>used</span>\r\n                                    </div>\r\n                                </div>\r\n                                <span className=\"text-xs text-muted-foreground\">\r\n                                    {remaining.toLocaleString()} / {item.limit.toLocaleString()} left\r\n                                </span>\r\n                                {getStatus(percentage)}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </CardContent>\r\n            </Card>\r\n        )\r\n    }\r\n\r\n    // Linear variant\r\n    const sizeConfig = {\r\n        sm: { bar: \"h-2\", text: \"text-xs\" },\r\n        md: { bar: \"h-3\", text: \"text-sm\" },\r\n        lg: { bar: \"h-4\", text: \"text-base\" },\r\n    }\r\n\r\n    const config = sizeConfig[size]\r\n\r\n    return (\r\n        <Card className={cn(\"w-full max-w-md\", className)}>\r\n            {(title || description) && (\r\n                <CardHeader className=\"space-y-1\">\r\n                    {title && (\r\n                        <CardTitle className=\"text-base font-medium leading-tight truncate\">\r\n                            {title}\r\n                        </CardTitle>\r\n                    )}\r\n                    {description && (\r\n                        <CardDescription className=\"text-sm text-muted-foreground\">\r\n                            {description}\r\n                        </CardDescription>\r\n                    )}\r\n                </CardHeader>\r\n\r\n            )}\r\n            <CardContent\r\n                className={\"grid grid-cols-1 gap-4\"}\r\n            >\r\n                {usage.map((item, i) => {\r\n                    const percentage = Math.min((item.usage / item.limit) * 100, 100)\r\n                    const remaining = Math.max(item.limit - item.usage, 0)\r\n\r\n                    const motionValue = useMotionValue(0)\r\n                    const springValue = useSpring(motionValue, { stiffness: 100, damping: 20 })\r\n                    const display = useTransform(springValue, (latest) => `${Math.round(latest)}%`)\r\n\r\n                    useEffect(() => {\r\n                        motionValue.set(percentage)\r\n                    }, [percentage, motionValue])\r\n\r\n                    return (\r\n                        <div key={item.name || i} className=\"space-y-2 p-4 bg-muted/20 rounded-xl\">\r\n                            <div className=\"flex items-center justify-between\">\r\n                                <span className=\"text-sm font-medium truncate\">{item.name}</span>\r\n                                <motion.span className=\"text-xs text-muted-foreground\">{display}</motion.span>\r\n                            </div>\r\n                            <div className={cn(\"w-full bg-muted rounded-full overflow-hidden\", config.bar)}>\r\n                                <motion.div\r\n                                    className={cn(\"bg-gradient-to-r rounded-full\", config.bar, progressColor === \"usage\" ? getUsageClasses(percentage, \"linear\") : \"from-primary to-primary/70\")}\r\n                                    initial={{ width: 0 }}\r\n                                    animate={{ width: `${percentage}%` }}\r\n                                    transition={{ duration: 0.5, ease: \"easeOut\" }}\r\n                                />\r\n                            </div>\r\n                            <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\r\n                                <span>\r\n                                    {remaining.toLocaleString()} / {item.limit.toLocaleString()} left\r\n                                </span>\r\n                                {getStatus(percentage)}\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/billingsdk/usage-meter.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/usage-meter-linear-demo.tsx",
      "content": "'use client'\r\n\r\nimport { UsageMeter } from \"@/components/billingsdk/usage-meter\";\r\n\r\nexport default function UsageMeterLinearDemo() {\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4 mx-auto w-full\">\r\n      <UsageMeter\r\n        usage={[{\r\n          name: \"Claude Sonnet 4\",\r\n          usage: 75,\r\n          limit: 100\r\n        }, {\r\n          name: \"ChatGPT 5\",\r\n          usage: 12,\r\n          limit: 100\r\n        }, {\r\n          name: \"Grok 3\",\r\n          usage: 57,\r\n          limit: 100\r\n        }, {\r\n          name: \"Gemini 2.5\",\r\n          usage: 95,\r\n          limit: 100\r\n        }]}\r\n        title=\"LLM Usage\"\r\n        description=\"Your usage of the LLM models\"\r\n        variant=\"linear\"\r\n        size=\"md\"\r\n        className=\"mx-auto\" />\r\n    </div>\r\n\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/usage-meter-linear-demo.tsx"
    }
  ]
}
</file>

<file path="src/components/billingsdk/pricing-table-two.tsx">
"use client";

import { Check, Minus, Zap } from "lucide-react";
import { useState } from "react";
import { cva, type VariantProps } from "class-variance-authority";
import { motion, AnimatePresence } from "framer-motion";

import { type Plan } from "@/lib/billingsdk-config";
import { cn } from "@/lib/utils";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";

const sectionVariants = cva("py-32", {
  variants: {
    size: {
      small: "py-12",
      medium: "py-20",
      large: "py-32",
    },
    theme: {
      minimal: "",
      classic: "bg-gradient-to-b from-background to-muted/20 relative overflow-hidden",
    },
  },
  defaultVariants: {
    size: "medium",
    theme: "minimal",
  },
});

const titleVariants = cva("mb-2 font-semibold", {
  variants: {
    size: {
      small: "text-2xl lg:text-3xl",
      medium: "text-3xl lg:text-4xl",
      large: "text-3xl lg:text-5xl",
    },
    theme: {
      minimal: "",
      classic: "bg-gradient-to-r from-foreground to-muted-foreground bg-clip-text text-transparent font-bold",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const descriptionVariants = cva("text-muted-foreground", {
  variants: {
    size: {
      small: "text-sm lg:text-base",
      medium: "text-base lg:text-lg",
      large: "lg:text-lg",
    },
    theme: {
      minimal: "",
      classic: "text-center max-w-2xl mx-auto",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const toggleWrapperVariants = cva("flex justify-center items-center gap-3", {
  variants: {
    size: {
      small: "mt-6",
      medium: "mt-7",
      large: "mt-8",
    },
    theme: {
      minimal: "",
      classic: "mt-10",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const toggleLabelVariants = cva("font-medium text-sm transition-all", {
  variants: {
    size: {
      small: "text-xs",
      medium: "text-sm",
      large: "text-sm",
    },
    theme: {
      minimal: "",
      classic: "font-semibold",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const switchScaleVariants = cva("transition-all", {
  variants: {
    size: {
      small: "scale-90",
      medium: "scale-95",
      large: "",
    },
    theme: {
      minimal: "",
      classic: "data-[state=checked]:bg-primary",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const plansWrapperVariants = cva("flex", {
  variants: {
    size: {
      small: "mt-6",
      medium: "mt-8",
      large: "mt-10",
    },
    theme: {
      minimal: "",
      classic: "mt-12",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const cardVariants = cva(
  "bg-card text-card-foreground border shadow-sm flex w-full flex-col justify-between text-center rounded-xl md:rounded-none transition-all duration-300",
  {
    variants: {
      size: {
        small: "py-4 gap-6",
        medium: "py-5 gap-7",
        large: "py-6 gap-8",
      },
      theme: {
        minimal: "",
        classic: "hover:shadow-xl backdrop-blur-sm bg-card/50 border-border/50",
      },
      highlight: {
        true: "",
        false: "",
      },
    },
    compoundVariants: [
      {
        theme: "classic",
        highlight: true,
        className: "bg-gradient-to-b from-primary/5 to-transparent relative overflow-hidden shadow-2xl",
      },
      {
        theme: "minimal",
        highlight: true,
        className: "bg-muted/30 shadow-lg",
      },
    ],
    defaultVariants: {
      size: "large",
      theme: "minimal",
      highlight: false,
    },
  }
);

const priceTextVariants = cva("font-bold", {
  variants: {
    size: {
      small: "text-3xl",
      medium: "text-4xl",
      large: "text-5xl",
    },
    theme: {
      minimal: "",
      classic: "text-6xl font-extrabold bg-gradient-to-r from-foreground to-muted-foreground bg-clip-text text-transparent",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const priceSubTextVariants = cva("text-muted-foreground", {
  variants: {
    size: {
      small: "mt-2",
      medium: "mt-3",
      large: "mt-3",
    },
    theme: {
      minimal: "",
      classic: "font-medium",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const tableWrapperVariants = cva("relative w-full overflow-x-auto", {
  variants: {
    size: {
      small: "mt-6",
      medium: "mt-8",
      large: "mt-10",
    },
    theme: {
      minimal: "",
      classic: "mt-16 bg-card/30 backdrop-blur-sm rounded-xl border border-border/50 shadow-sm",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const featureIconVariants = cva("mx-auto", {
  variants: {
    size: {
      small: "size-4",
      medium: "size-5",
      large: "size-5",
    },
    theme: {
      minimal: "",
      classic: "text-emerald-500",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const firstColWidthVariants = cva("", {
  variants: {
    size: {
      small: "w-[140px]",
      medium: "w-[180px]",
      large: "w-[200px]",
    },
  },
  defaultVariants: {
    size: "large",
  },
});

const buttonVariants = cva("w-full hover:cursor-pointer transition-all duration-300", {
  variants: {
    theme: {
      minimal: "",
      classic: "hover:shadow-xl active:scale-95",
    },
  },
  defaultVariants: {
    theme: "minimal",
  },
});

interface PricingTableTwoProps extends VariantProps<typeof sectionVariants> {
  className?: string;
  plans: Plan[];
  title?: string;
  description?: string;
  onPlanSelect?: (planId: string) => void;
}

export function PricingTableTwo({
  className,
  plans,
  title,
  description,
  onPlanSelect,
  size,
  theme = "minimal"
}: PricingTableTwoProps) {
  const [isAnnually, setIsAnnually] = useState(false);

  function calculateDiscount(monthlyPrice: string, yearlyPrice: string): number {
    const monthly = parseFloat(monthlyPrice);
    const yearly = parseFloat(yearlyPrice);

    if (
      monthlyPrice.toLowerCase() === "custom" ||
      yearlyPrice.toLowerCase() === "custom" ||
      isNaN(monthly) ||
      isNaN(yearly) ||
      monthly === 0
    ) {
      return 0;
    }

    const discount = ((monthly * 12 - yearly) / (monthly * 12)) * 100;
    return Math.round(discount);
  }

  const yearlyPriceDiscount = plans.length
    ? Math.max(
      ...plans.map((plan) =>
        calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)
      )
    )
    : 0;

  return (
    <section className={cn(sectionVariants({ size, theme }), className)}>
      {/* Classic theme background elements */}
      {theme === "classic" && (
        <>
          <div className="absolute inset-0 bg-grid-pattern opacity-5" />
          <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-primary/5 rounded-full blur-3xl" />
          <div className="absolute top-1/4 right-1/4 w-64 h-64 bg-secondary/5 rounded-full blur-2xl" />
        </>
      )}

      <div className="container max-w-5xl relative">
        <motion.div
          className={cn(
            "flex flex-col items-center gap-4",
            theme === "classic" ? "text-center" : ""
          )}
          initial={{ opacity: 0 }}
          whileInView={{ opacity: 1 }}
          viewport={{ once: true }}
          transition={{ duration: 0.6, ease: "easeOut" }}
        >
          <h2 className={cn(titleVariants({ size, theme }))}>
            {title || "We offer 3 plans"}
          </h2>

          <p className={cn(descriptionVariants({ size, theme }))}>
            {description || "Lorem ipsum dolor sit amet consectetur adipisicing."}
          </p>
        </motion.div>

        {/* Monthly/Yearly Toggle */}
        <div className={cn(toggleWrapperVariants({ size, theme }))}>
          <span className={cn(
            toggleLabelVariants({ size, theme }),
            !isAnnually ? "text-foreground" : "text-muted-foreground"
          )}>
            Monthly
          </span>
          <Switch
            checked={isAnnually}
            onCheckedChange={setIsAnnually}
            className={cn(switchScaleVariants({ size, theme }))}
          />
          <span className={cn(
            toggleLabelVariants({ size, theme }),
            isAnnually ? "text-foreground" : "text-muted-foreground"
          )}>
            Yearly
          </span>
        </div>

        <div className="flex justify-center">
          {yearlyPriceDiscount > 0 && (
            <motion.span
              className={cn(
                "text-xs mt-2 text-muted-foreground",
                theme === "classic" && "text-emerald-500 font-medium"
              )}
              initial={{ opacity: 0 }}
              whileInView={{ opacity: 1 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.2 }}
            >
              Save upto {yearlyPriceDiscount}% with yearly plan
            </motion.span>
          )}
        </div>

        <div className={cn(
          plansWrapperVariants({ size, theme }),
          "gap-4 md:gap-0",
          plans.length === 1 && "flex-col max-w-md mx-auto",
          plans.length === 2 && "flex-col md:flex-row max-w-4xl mx-auto",
          plans.length >= 3 && "flex-col lg:flex-row max-w-7xl mx-auto"
        )}>
          {plans.map((plan: Plan, index: number) => (
            <motion.div
              key={plan.id}
              className={cn(
                cardVariants({
                  size,
                  theme,
                  highlight: plan.highlight
                }),
                index === 0 && "md:rounded-l-xl md:border-r-0",
                index === plans.length - 1 && "md:rounded-r-xl md:border-l-0",
                index > 0 && index < plans.length - 1 && "md:border-l-0 md:border-r-0",
                plans.length === 1 && "rounded-xl"
              )}
              initial={{ opacity: 0 }}
              whileInView={{ opacity: 1 }}
              viewport={{ once: true }}
              transition={{ duration: 0.6, ease: "easeOut", delay: index * 0.15 }}
            >
              <div className="grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6">
                <div className="flex items-center gap-2 justify-center">
                  <div className={cn(
                    "leading-none font-semibold",
                    theme === "classic" && "text-lg font-bold"
                  )}>
                    {plan.title}
                  </div>
                </div>
                <p className={cn(
                  "text-muted-foreground text-center",
                  theme === "classic" && "text-foreground/80"
                )}>
                  {plan.description}
                </p>
              </div>

              <div className="px-6">
                <AnimatePresence mode="wait">
                  {isAnnually ? (
                    <motion.div
                      key="yearly"
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      transition={{ duration: 0.3 }}
                    >
                      <span className={cn(priceTextVariants({ size, theme }))}>
                        {parseFloat(plan.yearlyPrice) >= 0 && (
                          <>{plan.currency}</>
                        )}
                        {plan.yearlyPrice}
                        {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice) > 0 && (
                          <span className={cn(
                            "text-xs ml-2",
                            theme === "classic" ? "text-emerald-500 font-semibold" : "underline"
                          )}>
                            {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)}% off
                          </span>
                        )}
                      </span>
                      <p className={cn(priceSubTextVariants({ size, theme }))}>per year</p>
                    </motion.div>
                  ) : (
                    <motion.div
                      key="monthly"
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      transition={{ duration: 0.3 }}
                    >
                      <span className={cn(priceTextVariants({ size, theme }))}>
                        {parseFloat(plan.monthlyPrice) >= 0 && (
                          <>{plan.currency}</>
                        )}
                        {plan.monthlyPrice}
                      </span>
                      <p className={cn(priceSubTextVariants({ size, theme }))}>per month</p>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>

              <div className="flex items-center px-6">
                <Button
                  className={cn(
                    buttonVariants({ theme }),
                    plan.highlight && theme === "minimal" && "gap-2 whitespace-nowrap focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 shadow hover:bg-primary/90 h-9 py-2 group bg-primary text-primary-foreground ring-primary before:from-primary-foreground/20 after:from-primary-foreground/10 relative isolate inline-flex w-full items-center justify-center overflow-hidden rounded-md px-3 text-left text-sm font-medium ring-1 transition duration-300 ease-[cubic-bezier(0.4,0.36,0,1)] before:pointer-events-none before:absolute before:inset-0 before:-z-10 before:rounded-md before:bg-gradient-to-b before:opacity-80 before:transition-opacity before:duration-300 before:ease-[cubic-bezier(0.4,0.36,0,1)] after:pointer-events-none after:absolute after:inset-0 after:-z-10 after:rounded-md after:bg-gradient-to-b after:to-transparent after:mix-blend-overlay",
                    plan.highlight && theme === "classic" && "relative overflow-hidden bg-gradient-to-r from-primary to-primary/80 text-primary-foreground font-semibold py-3 px-6 rounded-lg border border-primary/20"
                  )}
                  variant={plan.highlight ? "default" : "secondary"}
                  onClick={() => onPlanSelect?.(plan.id)}
                >
                  {theme === "classic" && plan.highlight && (
                    <Zap className="w-4 h-4 mr-1" />
                  )}
                  {plan.buttonText}
                  {theme === "classic" && plan.highlight && (
                    <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/10 to-white/0 translate-x-[-100%] hover:translate-x-[100%] transition-transform duration-700" />
                  )}
                </Button>
              </div>
            </motion.div>
          ))}
        </div>

        <motion.div
          className={cn(tableWrapperVariants({ size, theme }))}
          initial={{ opacity: 0 }}
          whileInView={{ opacity: 1 }}
          viewport={{ once: true }}
          transition={{ duration: 0.7, ease: "easeOut" }}
        >
          <Table className={cn(theme === "classic" && "bg-transparent")}>
            <TableHeader>
              <TableRow className={cn(theme === "classic" && "border-border/30")}>
                <TableHead className={firstColWidthVariants({ size })}></TableHead>
                {plans.map((plan: Plan) => (
                  <TableHead key={plan.id} className={cn(
                    "text-center font-bold text-primary",
                    theme === "classic" && "text-lg"
                  )}>
                    {plan.title}
                  </TableHead>
                ))}
              </TableRow>
            </TableHeader>
            <TableBody>
              {(() => {
                const allFeatures = new Set<string>();
                plans.forEach(plan => {
                  plan.features.forEach(feature => {
                    allFeatures.add(feature.name);
                  });
                });
                return Array.from(allFeatures).map((featureName, featureIndex) => (
                  <TableRow key={featureIndex} className={cn(
                    theme === "classic" && "border-border/20 hover:bg-muted/30"
                  )}>
                    <TableCell className={cn(
                      "font-medium text-left",
                      theme === "classic" && "font-semibold text-foreground/90"
                    )}>
                      {featureName}
                    </TableCell>
                    {plans.map((plan: Plan) => {
                      const feature = plan.features.find(f => f.name === featureName);
                      return (
                        <TableCell key={plan.id} className="text-center">
                          {feature ? (
                            feature.icon === "check" ? (
                              <Check className={cn(featureIconVariants({ size, theme }))} />
                            ) : feature.icon === "minus" ? (
                              <Minus className={cn(featureIconVariants({ size, theme }))} />
                            ) : (
                              <span className={cn(
                                "text-sm text-muted-foreground",
                                theme === "classic" && "font-medium text-foreground/70"
                              )}>
                                {feature.name}
                              </span>
                            )
                          ) : (
                            <Minus className={cn(featureIconVariants({ size, theme }))} />
                          )}
                        </TableCell>
                      );
                    })}
                  </TableRow>
                ));
              })()}
            </TableBody>
          </Table>
        </motion.div>
      </div>
    </section>
  );
}
</file>

<file path="src/components/billingsdk/subscription-management.tsx">
"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { Calendar, CreditCard } from "lucide-react"
import { CurrentPlan } from "@/lib/billingsdk-config"
import { cn } from "@/lib/utils"
import { CancelSubscriptionDialog, type CancelSubscriptionDialogProps } from "@/components/billingsdk/cancel-subscription-dialog"
import { UpdatePlanDialog, type UpdatePlanDialogProps } from "@/components/billingsdk/update-plan-dialog"

interface SubscriptionManagementProps {
    className?: string
    currentPlan: CurrentPlan
    cancelSubscription: CancelSubscriptionDialogProps
    updatePlan: UpdatePlanDialogProps
}

export function SubscriptionManagement({ className, currentPlan, cancelSubscription, updatePlan }: SubscriptionManagementProps) {

    return (<div className={cn("text-left w-full", className)}>
        <Card className="shadow-lg">
            <CardHeader className="pb-4 sm:pb-6 px-4 sm:px-6">
                <CardTitle className="flex items-center gap-2 sm:gap-3 text-lg sm:text-xl">
                    <div className="p-1.5 sm:p-2 rounded-lg bg-primary/10 ring-1 ring-primary/20">
                        <CreditCard className="h-4 w-4 sm:h-5 sm:w-5 text-primary" />
                    </div>
                    Current Subscription
                </CardTitle>
                <CardDescription className="text-sm sm:text-base">Manage your billing and subscription settings</CardDescription>
            </CardHeader>

            <CardContent className="space-y-6 sm:space-y-8 px-4 sm:px-6">
                {/* Current Plan Details with highlighted styling */}
                <div className="relative p-3 sm:p-4 rounded-xl bg-gradient-to-r from-muted/30 via-muted/20 to-muted/30 border border-border/50 overflow-hidden">
                    <div className="relative">
                        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:gap-0">
                            <div className="w-full">
                                <div className="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-3 mb-2">
                                    <div className="flex items-center gap-2">
                                        <h3 className="text-lg sm:text-xl font-semibold">{currentPlan.plan.title} Plan</h3>
                                    </div>
                                    <div className="flex flex-wrap items-center gap-2">
                                        <Badge
                                            variant={currentPlan.status === "active" ? "default" : "outline"}
                                            className="shadow-sm text-xs sm:text-sm bg-primary/90 hover:bg-primary border-0 font-medium"
                                        >
                                            {currentPlan.type === `monthly` ? `${currentPlan.plan.currency}${currentPlan.plan.monthlyPrice}/month` : currentPlan.type === `yearly` ? `${currentPlan.plan.yearlyPrice}/year` : `${currentPlan.price}`}
                                        </Badge>
                                        <Badge
                                            variant="outline"
                                            className="shadow-sm text-xs sm:text-sm border-border/60 bg-background/50 backdrop-blur-sm"
                                        >
                                            {currentPlan.status}
                                        </Badge>
                                    </div>
                                </div>
                                <div className="relative">
                                    <p className="text-xs sm:text-sm text-muted-foreground relative z-10">
                                        {currentPlan.plan.description}
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <Separator className="my-4 sm:my-6 bg-gradient-to-r from-transparent via-border to-transparent" />

                <div className="space-y-3 sm:space-y-4">
                    <h4 className="font-medium flex items-center gap-2 text-base sm:text-lg">
                        <div className="p-1 sm:p-1.5 rounded-md bg-muted ring-1 ring-border/50">
                            <Calendar className="h-3 w-3 sm:h-4 sm:w-4" />
                        </div>
                        Billing Information
                    </h4>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-6">
                        <div className="group p-2.5 sm:p-3 rounded-lg md:bg-gradient-to-tl bg-gradient-to-b from-muted to-background/10 border border-border/30 hover:border-border/60 transition-all duration-200">
                            <span className="text-xs sm:text-sm text-muted-foreground block mb-1">Next billing date</span>
                            <div className="font-medium text-sm sm:text-base group-hover:text-primary transition-colors duration-200">{currentPlan.nextBillingDate}</div>
                        </div>
                        <div className="group p-2.5 sm:p-3 rounded-lg md:bg-gradient-to-tr bg-gradient-to-b from-muted to-background/10 border border-border/30 hover:border-border/60 transition-all duration-200">
                            <span className="text-xs sm:text-sm text-muted-foreground block mb-1">Payment method</span>
                            <div className="font-medium text-sm sm:text-base group-hover:text-primary transition-colors duration-200">{currentPlan.paymentMethod}</div>
                        </div>
                    </div>
                </div>

                <Separator className="my-4 sm:my-6 bg-gradient-to-r from-transparent via-border to-transparent" />

                <div className="flex flex-col sm:flex-row gap-3">
                    <UpdatePlanDialog
                        className="mx-0 shadow-lg hover:shadow-xl transition-all duration-200"
                        {...updatePlan}
                    />

                    <CancelSubscriptionDialog
                        className="mx-0 shadow-lg hover:shadow-xl transition-all duration-200"
                        {...cancelSubscription}
                    />
                </div>

                <div className="pt-4 sm:pt-6">
                    <h4 className="font-medium mb-3 sm:mb-4 text-base sm:text-lg">Current Plan Features</h4>
                    <div className="flex flex-wrap gap-2 sm:gap-3">
                        {currentPlan.plan.features.map((feature, index) => (
                            <div
                                key={index}
                                className="group flex items-center gap-2 p-2 sm:p-2 rounded-lg border border-border/80 hover:border-primary/30 hover:bg-primary/5 transition-all duration-200"
                            >
                                <div className="w-1 h-1 sm:w-1.5 sm:h-1.5 rounded-full bg-primary flex-shrink-0 group-hover:bg-primary group-hover:scale-125 transition-all duration-200"></div>
                                <span className="text-xs sm:text-sm text-muted-foreground group-hover:text-foreground transition-colors duration-200">{feature.name}</span>
                            </div>
                        ))}
                    </div>
                </div>
            </CardContent>
        </Card>
    </div>
    )
}
</file>

<file path="src/components/ui/sparkles.tsx">
"use client";
import React, { useId } from "react";
import { useEffect, useState } from "react";
import Particles, { initParticlesEngine } from "@tsparticles/react";
import type { Container, SingleOrMultiple } from "@tsparticles/engine";
import { loadSlim } from "@tsparticles/slim";
import { cn } from "@/lib/utils";
import { motion, useAnimation } from "motion/react";

type ParticlesProps = {
  id?: string;
  className?: string;
  background?: string;
  particleSize?: number;
  minSize?: number;
  maxSize?: number;
  speed?: number;
  particleColor?: string;
  particleDensity?: number;
};
export const SparklesCore = (props: ParticlesProps) => {
  const {
    id,
    className,
    background,
    minSize,
    maxSize,
    speed,
    particleColor,
    particleDensity,
  } = props;
  const [init, setInit] = useState(false);
  useEffect(() => {
    initParticlesEngine(async (engine) => {
      await loadSlim(engine);
    }).then(() => {
      setInit(true);
    });
  }, []);
  const controls = useAnimation();

  const particlesLoaded = async (container?: Container) => {
    if (container) {
      controls.start({
        opacity: 1,
        transition: {
          duration: 1,
        },
      });
    }
  };

  const generatedId = useId();
  return (
    <motion.div animate={controls} className={cn("opacity-0", className)}>
      {init && (
        <Particles
          id={id || generatedId}
          className={cn("h-full w-full")}
          particlesLoaded={particlesLoaded}
          options={{
            background: {
              color: {
                value: background || "#0d47a1",
              },
            },
            fullScreen: {
              enable: false,
              zIndex: 1,
            },

            fpsLimit: 120,
            interactivity: {
              events: {
                onClick: {
                  enable: true,
                  mode: "push",
                },
                onHover: {
                  enable: false,
                  mode: "repulse",
                },
                resize: true as any,
              },
              modes: {
                push: {
                  quantity: 4,
                },
                repulse: {
                  distance: 200,
                  duration: 0.4,
                },
              },
            },
            particles: {
              bounce: {
                horizontal: {
                  value: 1,
                },
                vertical: {
                  value: 1,
                },
              },
              collisions: {
                absorb: {
                  speed: 2,
                },
                bounce: {
                  horizontal: {
                    value: 1,
                  },
                  vertical: {
                    value: 1,
                  },
                },
                enable: false,
                maxSpeed: 50,
                mode: "bounce",
                overlap: {
                  enable: true,
                  retries: 0,
                },
              },
              color: {
                value: particleColor || "#ffffff",
                animation: {
                  h: {
                    count: 0,
                    enable: false,
                    speed: 1,
                    decay: 0,
                    delay: 0,
                    sync: true,
                    offset: 0,
                  },
                  s: {
                    count: 0,
                    enable: false,
                    speed: 1,
                    decay: 0,
                    delay: 0,
                    sync: true,
                    offset: 0,
                  },
                  l: {
                    count: 0,
                    enable: false,
                    speed: 1,
                    decay: 0,
                    delay: 0,
                    sync: true,
                    offset: 0,
                  },
                },
              },
              effect: {
                close: true,
                fill: true,
                options: {},
                type: {} as SingleOrMultiple<string> | undefined,
              },
              groups: {},
              move: {
                angle: {
                  offset: 0,
                  value: 90,
                },
                attract: {
                  distance: 200,
                  enable: false,
                  rotate: {
                    x: 3000,
                    y: 3000,
                  },
                },
                center: {
                  x: 50,
                  y: 50,
                  mode: "percent",
                  radius: 0,
                },
                decay: 0,
                distance: {},
                direction: "none",
                drift: 0,
                enable: true,
                gravity: {
                  acceleration: 9.81,
                  enable: false,
                  inverse: false,
                  maxSpeed: 50,
                },
                path: {
                  clamp: true,
                  delay: {
                    value: 0,
                  },
                  enable: false,
                  options: {},
                },
                outModes: {
                  default: "out",
                },
                random: false,
                size: false,
                speed: {
                  min: 0.1,
                  max: 1,
                },
                spin: {
                  acceleration: 0,
                  enable: false,
                },
                straight: false,
                trail: {
                  enable: false,
                  length: 10,
                  fill: {},
                },
                vibrate: false,
                warp: false,
              },
              number: {
                density: {
                  enable: true,
                  width: 400,
                  height: 400,
                },
                limit: {
                  mode: "delete",
                  value: 0,
                },
                value: particleDensity || 120,
              },
              opacity: {
                value: {
                  min: 0.1,
                  max: 1,
                },
                animation: {
                  count: 0,
                  enable: true,
                  speed: speed || 4,
                  decay: 0,
                  delay: 0,
                  sync: false,
                  mode: "auto",
                  startValue: "random",
                  destroy: "none",
                },
              },
              reduceDuplicates: false,
              shadow: {
                blur: 0,
                color: {
                  value: "#000",
                },
                enable: false,
                offset: {
                  x: 0,
                  y: 0,
                },
              },
              shape: {
                close: true,
                fill: true,
                options: {},
                type: "circle",
              },
              size: {
                value: {
                  min: minSize || 1,
                  max: maxSize || 3,
                },
                animation: {
                  count: 0,
                  enable: false,
                  speed: 5,
                  decay: 0,
                  delay: 0,
                  sync: false,
                  mode: "auto",
                  startValue: "random",
                  destroy: "none",
                },
              },
              stroke: {
                width: 0,
              },
              zIndex: {
                value: 0,
                opacityRate: 1,
                sizeRate: 1,
                velocityRate: 1,
              },
              destroy: {
                bounds: {},
                mode: "none",
                split: {
                  count: 1,
                  factor: {
                    value: 3,
                  },
                  rate: {
                    value: {
                      min: 4,
                      max: 9,
                    },
                  },
                  sizeOffset: true,
                },
              },
              roll: {
                darken: {
                  enable: false,
                  value: 0,
                },
                enable: false,
                enlighten: {
                  enable: false,
                  value: 0,
                },
                mode: "vertical",
                speed: 25,
              },
              tilt: {
                value: 0,
                animation: {
                  enable: false,
                  speed: 0,
                  decay: 0,
                  sync: false,
                },
                direction: "clockwise",
                enable: false,
              },
              twinkle: {
                lines: {
                  enable: false,
                  frequency: 0.05,
                  opacity: 1,
                },
                particles: {
                  enable: false,
                  frequency: 0.05,
                  opacity: 1,
                },
              },
              wobble: {
                distance: 5,
                enable: false,
                speed: {
                  angle: 50,
                  move: 10,
                },
              },
              life: {
                count: 0,
                delay: {
                  value: 0,
                  sync: false,
                },
                duration: {
                  value: 0,
                  sync: false,
                },
              },
              rotate: {
                value: 0,
                animation: {
                  enable: false,
                  speed: 0,
                  decay: 0,
                  sync: false,
                },
                direction: "clockwise",
                path: false,
              },
              orbit: {
                animation: {
                  count: 0,
                  enable: false,
                  speed: 1,
                  decay: 0,
                  delay: 0,
                  sync: false,
                },
                enable: false,
                opacity: 1,
                rotation: {
                  value: 45,
                },
                width: 1,
              },
              links: {
                blink: false,
                color: {
                  value: "#fff",
                },
                consent: false,
                distance: 100,
                enable: false,
                frequency: 1,
                opacity: 1,
                shadow: {
                  blur: 5,
                  color: {
                    value: "#000",
                  },
                  enable: false,
                },
                triangles: {
                  enable: false,
                  frequency: 1,
                },
                width: 1,
                warp: false,
              },
              repulse: {
                value: 0,
                enabled: false,
                distance: 1,
                duration: 1,
                factor: 1,
                speed: 1,
              },
            },
            detectRetina: true,
          }}
        />
      )}
    </motion.div>
  );
};
</file>

<file path="src/components/code.tsx">
"use client";

import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { oneDark, oneLight } from 'react-syntax-highlighter/dist/esm/styles/prism';
import React, { useState } from 'react';
import { cn } from '@/lib/utils';

export interface CodeBlockTheme {
  name: string;
  light: any;
  dark: any;
}

export const themes: Record<string, CodeBlockTheme> = {
  default: {
    name: 'VS Code Dark',
    light: oneLight,
    dark: {
      'pre[class*="language-"]': {
        background: 'hsl(var(--background))',
        color: 'hsl(var(--foreground))',
        fontSize: '12px',
        lineHeight: '1.5',
        margin: 0,
        padding: '1em',
        overflow: 'auto',
      },
      'code[class*="language-"]': {
        background: 'hsl(var(--background))',
        color: 'hsl(var(--foreground))',
        fontSize: '12px',
        lineHeight: '1.5',
      },
      'comment': { color: '#6a9955' },
      'prolog': { color: '#6a9955' },
      'doctype': { color: '#6a9955' },
      'cdata': { color: '#6a9955' },
      'punctuation': { color: '#d4d4d4' },
      'property': { color: '#9cdcfe' },
      'tag': { color: '#569cd6' },
      'constant': { color: '#9cdcfe' },
      'symbol': { color: '#9cdcfe' },
      'deleted': { color: '#9cdcfe' },
      'boolean': { color: '#569cd6' },
      'number': { color: '#b5cea8' },
      'selector': { color: '#d7ba7d' },
      'attr-name': { color: '#9cdcfe' },
      'string': { color: '#ce9178' },
      'char': { color: '#ce9178' },
      'builtin': { color: '#ce9178' },
      'inserted': { color: '#ce9178' },
      'operator': { color: '#d4d4d4' },
      'entity': { color: '#d4d4d4' },
      'url': { color: '#d4d4d4' },
      'variable': { color: '#9cdcfe' },
      'atrule': { color: '#ce9178' },
      'attr-value': { color: '#ce9178' },
      'function': { color: '#dcdcaa' },
      'class-name': { color: '#4ec9b0' },
      'keyword': { color: '#569cd6' },
      'regex': { color: '#d16969' },
      'important': { color: '#569cd6' },
      'bold': { fontWeight: 'bold' },
      'italic': { fontStyle: 'italic' },
    },
  },
  github: {
    name: 'GitHub',
    light: {
      ...oneLight,
      'pre[class*="language-"]': {
        ...oneLight['pre[class*="language-"]'],
        background: '#f6f8fa',
        border: '1px solid #d0d7de',
      },
      'code[class*="language-"]': {
        ...oneLight['code[class*="language-"]'],
        background: '#f6f8fa',
      },
    },
    dark: {
      ...oneDark,
      'pre[class*="language-"]': {
        ...oneDark['pre[class*="language-"]'],
        background: '#0d1117',
        border: '1px solid #30363d',
      },
      'code[class*="language-"]': {
        ...oneDark['code[class*="language-"]'],
        background: '#0d1117',
      },
    },
  },
  minimal: {
    name: 'Minimal',
    light: {
      ...oneLight,
      'pre[class*="language-"]': {
        ...oneLight['pre[class*="language-"]'],
        background: '#ffffff',
        border: '1px solid #e5e7eb',
        boxShadow: 'none',
      },
      'code[class*="language-"]': {
        ...oneLight['code[class*="language-"]'],
        background: '#ffffff',
      },
    },
    dark: {
      ...oneDark,
      'pre[class*="language-"]': {
        ...oneDark['pre[class*="language-"]'],
        background: '#1f2937',
        border: '1px solid #374151',
        boxShadow: 'none',
      },
      'code[class*="language-"]': {
        ...oneDark['code[class*="language-"]'],
        background: '#1f2937',
      },
    },
  },
  vscode: {
    name: 'VS Code Dark',
    light: oneLight, // fallback
    dark: {
      'pre[class*="language-"]': {
        background: 'hsl(var(--background))',
        color: 'hsl(var(--foreground))',
        fontSize: '12px',
        lineHeight: '1.5',
        margin: 0,
        padding: '1em',
        overflow: 'auto',
      },
      'code[class*="language-"]': {
        background: 'hsl(var(--background))',
        color: 'hsl(var(--foreground))',
        fontSize: '12px',
        lineHeight: '1.5',
      },
      'comment': { color: '#6a9955' },
      'prolog': { color: '#6a9955' },
      'doctype': { color: '#6a9955' },
      'cdata': { color: '#6a9955' },
      'punctuation': { color: '#d4d4d4' },
      'property': { color: '#9cdcfe' },
      'tag': { color: '#569cd6' },
      'constant': { color: '#9cdcfe' },
      'symbol': { color: '#9cdcfe' },
      'deleted': { color: '#9cdcfe' },
      'boolean': { color: '#569cd6' },
      'number': { color: '#b5cea8' },
      'selector': { color: '#d7ba7d' },
      'attr-name': { color: '#9cdcfe' },
      'string': { color: '#ce9178' },
      'char': { color: '#ce9178' },
      'builtin': { color: '#ce9178' },
      'inserted': { color: '#ce9178' },
      'operator': { color: '#d4d4d4' },
      'entity': { color: '#d4d4d4' },
      'url': { color: '#d4d4d4' },
      'variable': { color: '#9cdcfe' },
      'atrule': { color: '#ce9178' },
      'attr-value': { color: '#ce9178' },
      'function': { color: '#dcdcaa' },
      'class-name': { color: '#4ec9b0' },
      'keyword': { color: '#569cd6' },
      'regex': { color: '#d16969' },
      'important': { color: '#569cd6' },
      'bold': { fontWeight: 'bold' },
      'italic': { fontStyle: 'italic' },
    },
  },
};

export interface CustomCodeBlockProps {
  code: string;
  language: string;
  theme?: keyof typeof themes;
  title?: string;
  className?: string;
  wrapLines?: boolean;
  maxHeight?: string;
}

export function CustomCodeBlock({
  code,
  language,
  theme = 'default',
  title,
  className,
  wrapLines = true,
  maxHeight = 'none',
}: CustomCodeBlockProps) {
  const [isDark, setIsDark] = useState(false);

  // Simple dark mode detection - in a real app you'd use your theme context
  React.useEffect(() => {
    const checkDarkMode = () => {
      setIsDark(document.documentElement.classList.contains('dark'));
    };
    
    checkDarkMode();
    const observer = new MutationObserver(checkDarkMode);
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
    
    return () => observer.disconnect();
  }, []);

  const selectedTheme = themes[theme];
  const currentStyle = isDark ? selectedTheme.dark : selectedTheme.light;

  return (
    <div className={cn("relative h-full", className)}>
      {title && (
        <div className="flex items-center px-4 py-2 bg-background text-foreground">
          <span className="text-sm font-medium">{title}</span>
        </div>
      )}

      <div className="bg-background/95 overflow-hidden h-full hide-scrollbars">
        <SyntaxHighlighter
          language={language}
          style={currentStyle}
          showLineNumbers={false}
          wrapLines={wrapLines}
                  customStyle={{
          margin: 0,
          borderRadius: 0,
          ...(maxHeight !== 'none' && { maxHeight }),
          overflowY: 'auto',
          overflowX: 'auto',
          fontSize: '0.75rem',
          lineHeight: '1.5',
          whiteSpace: 'pre-wrap',
          wordWrap: 'break-word',
          overflowWrap: 'anywhere',
          scrollbarWidth: 'none',
          msOverflowStyle: 'none',
        }}
        >
          {code}
        </SyntaxHighlighter>
      </div>
    </div>
  );
}
</file>

<file path="src/components/page-actions.tsx">
'use client';
import { useMemo, useState } from 'react';
import {
  Check,
  ChevronDown,
  Copy,
  ExternalLinkIcon,
  MessageCircleIcon,
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { useCopyButton } from 'fumadocs-ui/utils/use-copy-button';
import { buttonVariants } from './ui/button';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from 'fumadocs-ui/components/ui/popover';

import { cva } from 'class-variance-authority';

const cache = new Map<string, string>();

export function LLMCopyButton({
  /**
   * A URL to fetch the raw Markdown/MDX content of page
   */
  markdownUrl,
}: {
  markdownUrl: string;
}) {
  const [isLoading, setLoading] = useState(false);
  const [checked, onClick] = useCopyButton(async () => {
    const cached = cache.get(markdownUrl);
    if (cached) return navigator.clipboard.writeText(cached);

    setLoading(true);

    try {
      await navigator.clipboard.write([
        new ClipboardItem({
          'text/plain': fetch(markdownUrl).then(async (res) => {
            const content = await res.text();
            cache.set(markdownUrl, content);

            return content;
          }),
        }),
      ]);
    } finally {
      setLoading(false);
    }
  });

  return (
    <button
      disabled={isLoading}
      className={cn(
        buttonVariants({
          variant: 'secondary',
          // size: 'sm',
          className: 'gap-2 [&_svg]:size-3.5 [&_svg]:text-fd-muted-foreground',
        }),
      )}
      onClick={onClick}
    >
      {checked ? <Check /> : <Copy />}
      Copy Page
    </button>
  );
}

const optionVariants = cva(
  'text-sm p-2 rounded-lg inline-flex items-center gap-2 hover:text-fd-accent-foreground hover:bg-fd-accent [&_svg]:size-4',
);

export function ViewOptions({
  markdownUrl,
  githubUrl,
}: {
  /**
   * A URL to the raw Markdown/MDX content of page
   */
  markdownUrl: string;

  /**
   * Source file URL on GitHub
   */
  githubUrl: string;
}) {
  const items = useMemo(() => {
    const fullMarkdownUrl =
      typeof window !== 'undefined'
        ? new URL(markdownUrl, window.location.origin)
        : 'loading';
    const q = `Read ${fullMarkdownUrl}, I want to ask questions about it.`;

    return [
      {
        title: 'View as Markdown',
        href: markdownUrl,
        icon: <svg
        width="18"
        height="18"
        viewBox="0 0 18 18"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        className="w-4 h-4 shrink-0"
      >
        <path
          d="M15.25 3.75H2.75C1.64543 3.75 0.75 4.64543 0.75 5.75V12.25C0.75 13.3546 1.64543 14.25 2.75 14.25H15.25C16.3546 14.25 17.25 13.3546 17.25 12.25V5.75C17.25 4.64543 16.3546 3.75 15.25 3.75Z"
          stroke="currentColor"
          strokeWidth="1.5"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
        <path
          d="M8.75 11.25V6.75H8.356L6.25 9.5L4.144 6.75H3.75V11.25"
          stroke="currentColor"
          strokeWidth="1.5"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
        <path
          d="M11.5 9.5L13.25 11.25L15 9.5"
          stroke="currentColor"
          strokeWidth="1.5"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
        <path
          d="M13.25 11.25V6.75"
          stroke="currentColor"
          strokeWidth="1.5"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
      </svg>
      },
      {
        title: 'Open in GitHub',
        href: githubUrl,
        icon: (
          <svg fill="currentColor" role="img" viewBox="0 0 24 24">
            <title>GitHub</title>
            <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" />
          </svg>
        ),
      },
      {
        title: 'Open in Scira AI',
        href: `https://scira.ai/?${new URLSearchParams({
          q,
        })}`,
        icon: (
          <svg
            width="910"
            height="934"
            viewBox="0 0 910 934"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M647.664 197.775C569.13 189.049 525.5 145.419 516.774 66.8849C508.048 145.419 464.418 189.049 385.884 197.775C464.418 206.501 508.048 250.131 516.774 328.665C525.5 250.131 569.13 206.501 647.664 197.775Z"
              fill="currentColor"
              stroke="currentColor"
              strokeWidth="8"
              strokeLinejoin="round"
            />
            <path
              d="M516.774 304.217C510.299 275.491 498.208 252.087 480.335 234.214C462.462 216.341 439.058 204.251 410.333 197.775C439.059 191.3 462.462 179.209 480.335 161.336C498.208 143.463 510.299 120.06 516.774 91.334C523.25 120.059 535.34 143.463 553.213 161.336C571.086 179.209 594.49 191.3 623.216 197.775C594.49 204.251 571.086 216.341 553.213 234.214C535.34 252.087 523.25 275.491 516.774 304.217Z"
              fill="currentColor"
              stroke="currentColor"
              strokeWidth="8"
              strokeLinejoin="round"
            />
            <path
              d="M857.5 508.116C763.259 497.644 710.903 445.288 700.432 351.047C689.961 445.288 637.605 497.644 543.364 508.116C637.605 518.587 689.961 570.943 700.432 665.184C710.903 570.943 763.259 518.587 857.5 508.116Z"
              stroke="currentColor"
              strokeWidth="20"
              strokeLinejoin="round"
            />
            <path
              d="M700.432 615.957C691.848 589.05 678.575 566.357 660.383 548.165C642.191 529.973 619.499 516.7 592.593 508.116C619.499 499.533 642.191 486.258 660.383 468.066C678.575 449.874 691.848 427.181 700.432 400.274C709.015 427.181 722.289 449.874 740.481 468.066C758.673 486.258 781.365 499.533 808.271 508.116C781.365 516.7 758.673 529.973 740.481 548.165C722.289 566.357 709.015 589.05 700.432 615.957Z"
              stroke="currentColor"
              strokeWidth="20"
              strokeLinejoin="round"
            />
            <path
              d="M889.949 121.237C831.049 114.692 798.326 81.9698 791.782 23.0692C785.237 81.9698 752.515 114.692 693.614 121.237C752.515 127.781 785.237 160.504 791.782 219.404C798.326 160.504 831.049 127.781 889.949 121.237Z"
              fill="currentColor"
              stroke="currentColor"
              strokeWidth="8"
              strokeLinejoin="round"
            />
            <path
              d="M791.782 196.795C786.697 176.937 777.869 160.567 765.16 147.858C752.452 135.15 736.082 126.322 716.226 121.237C736.082 116.152 752.452 107.324 765.16 94.6152C777.869 81.9065 786.697 65.5368 791.782 45.6797C796.867 65.5367 805.695 81.9066 818.403 94.6152C831.112 107.324 847.481 116.152 867.338 121.237C847.481 126.322 831.112 135.15 818.403 147.858C805.694 160.567 796.867 176.937 791.782 196.795Z"
              fill="currentColor"
              stroke="currentColor"
              strokeWidth="8"
              strokeLinejoin="round"
            />
            <path
              d="M760.632 764.337C720.719 814.616 669.835 855.1 611.872 882.692C553.91 910.285 490.404 924.255 426.213 923.533C362.022 922.812 298.846 907.419 241.518 878.531C184.19 849.643 134.228 808.026 95.4548 756.863C56.6815 705.7 30.1238 646.346 17.8129 583.343C5.50207 520.339 7.76433 455.354 24.4266 393.359C41.089 331.364 71.7099 274.001 113.947 225.658C156.184 177.315 208.919 139.273 268.117 114.442"
              stroke="currentColor"
              strokeWidth="30"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
          </svg>
        ),
      },
      {
        title: 'Open in ChatGPT',
        href: `https://chatgpt.com/?${new URLSearchParams({
          hints: 'search',
          q,
        })}`,
        icon: (
          <svg
            role="img"
            viewBox="0 0 24 24"
            fill="currentColor"
            xmlns="http://www.w3.org/2000/svg"
          >
            <title>OpenAI</title>
            <path d="M22.2819 9.8211a5.9847 5.9847 0 0 0-.5157-4.9108 6.0462 6.0462 0 0 0-6.5098-2.9A6.0651 6.0651 0 0 0 4.9807 4.1818a5.9847 5.9847 0 0 0-3.9977 2.9 6.0462 6.0462 0 0 0 .7427 7.0966 5.98 5.98 0 0 0 .511 4.9107 6.051 6.051 0 0 0 6.5146 2.9001A5.9847 5.9847 0 0 0 13.2599 24a6.0557 6.0557 0 0 0 5.7718-4.2058 5.9894 5.9894 0 0 0 3.9977-2.9001 6.0557 6.0557 0 0 0-.7475-7.0729zm-9.022 12.6081a4.4755 4.4755 0 0 1-2.8764-1.0408l.1419-.0804 4.7783-2.7582a.7948.7948 0 0 0 .3927-.6813v-6.7369l2.02 1.1686a.071.071 0 0 1 .038.052v5.5826a4.504 4.504 0 0 1-4.4945 4.4944zm-9.6607-4.1254a4.4708 4.4708 0 0 1-.5346-3.0137l.142.0852 4.783 2.7582a.7712.7712 0 0 0 .7806 0l5.8428-3.3685v2.3324a.0804.0804 0 0 1-.0332.0615L9.74 19.9502a4.4992 4.4992 0 0 1-6.1408-1.6464zM2.3408 7.8956a4.485 4.485 0 0 1 2.3655-1.9728V11.6a.7664.7664 0 0 0 .3879.6765l5.8144 3.3543-2.0201 1.1685a.0757.0757 0 0 1-.071 0l-4.8303-2.7865A4.504 4.504 0 0 1 2.3408 7.872zm16.5963 3.8558L13.1038 8.364 15.1192 7.2a.0757.0757 0 0 1 .071 0l4.8303 2.7913a4.4944 4.4944 0 0 1-.6765 8.1042v-5.6772a.79.79 0 0 0-.407-.667zm2.0107-3.0231l-.142-.0852-4.7735-2.7818a.7759.7759 0 0 0-.7854 0L9.409 9.2297V6.8974a.0662.0662 0 0 1 .0284-.0615l4.8303-2.7866a4.4992 4.4992 0 0 1 6.6802 4.66zM8.3065 12.863l-2.02-1.1638a.0804.0804 0 0 1-.038-.0567V6.0742a4.4992 4.4992 0 0 1 7.3757-3.4537l-.142.0805L8.704 5.459a.7948.7948 0 0 0-.3927.6813zm1.0976-2.3654l2.602-1.4998 2.6069 1.4998v2.9994l-2.5974 1.4997-2.6067-1.4997Z" />
          </svg>
        ),
      },
      {
        title: 'Open in Claude',
        href: `https://claude.ai/new?${new URLSearchParams({
          q,
        })}`,
        icon: (
          <svg
            fill="currentColor"
            role="img"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <title>Anthropic</title>
            <path d="M17.3041 3.541h-3.6718l6.696 16.918H24Zm-10.6082 0L0 20.459h3.7442l1.3693-3.5527h7.0052l1.3693 3.5528h3.7442L10.5363 3.5409Zm-.3712 10.2232 2.2914-5.9456 2.2914 5.9456Z" />
          </svg>
        ),
      },
      {
        title: 'Open in T3 Chat',
        href: `https://t3.chat/new?${new URLSearchParams({
          q,
        })}`,
        icon: <MessageCircleIcon />,
      },
    ];
  }, [githubUrl, markdownUrl]);

  return (
    <Popover>
      <PopoverTrigger
        className={cn(
          buttonVariants({
            variant: 'secondary',
            // size: 'sm',
            className: 'gap-2',
          }),
        )}
      >
        <ChevronDown className="size-3.5 text-fd-muted-foreground" />
      </PopoverTrigger>
      <PopoverContent className="flex flex-col overflow-auto">
        {items.map((item) => (
          <a
            key={item.href}
            href={item.href}
            rel="noreferrer noopener"
            target="_blank"
            className={cn(optionVariants())}
          >
            {item.icon}
            {item.title}
            <ExternalLinkIcon className="text-fd-muted-foreground size-3.5 ms-auto" />
          </a>
        ))}
      </PopoverContent>
    </Popover>
  );
}

export function CombinedAIButton({
  markdownUrl,
  githubUrl,
}: {
  markdownUrl: string;
  githubUrl: string;
}) {
  const [isLoading, setLoading] = useState(false);
  const [checked, onClick] = useCopyButton(async () => {
    const cached = cache.get(markdownUrl);
    if (cached) return navigator.clipboard.writeText(cached);

    setLoading(true);

    try {
      await navigator.clipboard.write([
        new ClipboardItem({
          'text/plain': fetch(markdownUrl).then(async (res) => {
            const content = await res.text();
            cache.set(markdownUrl, content);

            return content;
          }),
        }),
      ]);
    } finally {
      setLoading(false);
    }
  });

  const items = useMemo(() => {
    const fullMarkdownUrl =
      typeof window !== 'undefined'
        ? new URL(markdownUrl, window.location.origin)
        : 'loading';
    const q = `Read ${fullMarkdownUrl}, I want to ask questions about it.`;

    return [
      {
        title: 'View as Markdown',
        href: markdownUrl,
        icon: <svg
        width="18"
        height="18"
        viewBox="0 0 18 18"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        className="w-4 h-4 shrink-0"
      >
        <path
          d="M15.25 3.75H2.75C1.64543 3.75 0.75 4.64543 0.75 5.75V12.25C0.75 13.3546 1.64543 14.25 2.75 14.25H15.25C16.3546 14.25 17.25 13.3546 17.25 12.25V5.75C17.25 4.64543 16.3546 3.75 15.25 3.75Z"
          stroke="currentColor"
          strokeWidth="1.5"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
        <path
          d="M8.75 11.25V6.75H8.356L6.25 9.5L4.144 6.75H3.75V11.25"
          stroke="currentColor"
          strokeWidth="1.5"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
        <path
          d="M11.5 9.5L13.25 11.25L15 9.5"
          stroke="currentColor"
          strokeWidth="1.5"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
        <path
          d="M13.25 11.25V6.75"
          stroke="currentColor"
          strokeWidth="1.5"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
      </svg>
      },
      {
        title: 'Open in GitHub',
        href: githubUrl,
        icon: (
          <svg fill="currentColor" role="img" viewBox="0 0 24 24">
            <title>GitHub</title>
            <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" />
          </svg>
        ),
      },
      {
        title: 'Open in ChatGPT',
        href: `https://chatgpt.com/?${new URLSearchParams({
          hints: 'search',
          q,
        })}`,
        icon: (
          <svg
            role="img"
            viewBox="0 0 24 24"
            fill="currentColor"
            xmlns="http://www.w3.org/2000/svg"
          >
            <title>OpenAI</title>
            <path d="M22.2819 9.8211a5.9847 5.9847 0 0 0-.5157-4.9108 6.0462 6.0462 0 0 0-6.5098-2.9A6.0651 6.0651 0 0 0 4.9807 4.1818a5.9847 5.9847 0 0 0-3.9977 2.9 6.0462 6.0462 0 0 0 .7427 7.0966 5.98 5.98 0 0 0 .511 4.9107 6.051 6.051 0 0 0 6.5146 2.9001A5.9847 5.9847 0 0 0 13.2599 24a6.0557 6.0557 0 0 0 5.7718-4.2058 5.9894 5.9894 0 0 0 3.9977-2.9001 6.0557 6.0557 0 0 0-.7475-7.0729zm-9.022 12.6081a4.4755 4.4755 0 0 1-2.8764-1.0408l.1419-.0804 4.7783-2.7582a.7948.7948 0 0 0 .3927-.6813v-6.7369l2.02 1.1686a.071.071 0 0 1 .038.052v5.5826a4.504 4.504 0 0 1-4.4945 4.4944zm-9.6607-4.1254a4.4708 4.4708 0 0 1-.5346-3.0137l.142.0852 4.783 2.7582a.7712.7712 0 0 0 .7806 0l5.8428-3.3685v2.3324a.0804.0804 0 0 1-.0332.0615L9.74 19.9502a4.4992 4.4992 0 0 1-6.1408-1.6464zM2.3408 7.8956a4.485 4.485 0 0 1 2.3655-1.9728V11.6a.7664.7664 0 0 0 .3879.6765l5.8144 3.3543-2.0201 1.1685a.0757.0757 0 0 1-.071 0l-4.8303-2.7865A4.504 4.504 0 0 1 2.3408 7.872zm16.5963 3.8558L13.1038 8.364 15.1192 7.2a.0757.0757 0 0 1 .071 0l4.8303 2.7913a4.4944 4.4944 0 0 1-.6765 8.1042v-5.6772a.79.79 0 0 0-.407-.667zm2.0107-3.0231l-.142-.0852-4.7735-2.7818a.7759.7759 0 0 0-.7854 0L9.409 9.2297V6.8974a.0662.0662 0 0 1 .0284-.0615l4.8303-2.7866a4.4992 4.4992 0 0 1 6.6802 4.66zM8.3065 12.863l-2.02-1.1638a.0804.0804 0 0 1-.038-.0567V6.0742a4.4992 4.4992 0 0 1 7.3757-3.4537l-.142.0805L8.704 5.459a.7948.7948 0 0 0-.3927.6813zm1.0976-2.3654l2.602-1.4998 2.6069 1.4998v2.9994l-2.5974 1.4997-2.6067-1.4997Z" />
          </svg>
        ),
      },
      {
        title: 'Open in Claude',
        href: `https://claude.ai/new?${new URLSearchParams({
          q,
        })}`,
        icon: (
          <svg
            fill="currentColor"
            role="img"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <title>Anthropic</title>
            <path d="M17.3041 3.541h-3.6718l6.696 16.918H24Zm-10.6082 0L0 20.459h3.7442l1.3693-3.5527h7.0052l1.3693 3.5528h3.7442L10.5363 3.5409Zm-.3712 10.2232 2.2914-5.9456 2.2914 5.9456Z" />
          </svg>
        ),
      },
      {
        title: 'Open in T3 Chat',
        href: `https://t3.chat/new?${new URLSearchParams({
          q,
        })}`,
        icon: <MessageCircleIcon />,
      },
    ];
  }, [githubUrl, markdownUrl]);

  return (
    <div className="flex items-center">
      <button
        disabled={isLoading}
        className={cn(
          buttonVariants({
            variant: 'secondary',
            className: 'gap-2 [&_svg]:size-3.5 [&_svg]:text-fd-muted-foreground rounded-r-none border-r-0',
          }),
        )}
        onClick={onClick}
      >
        {checked ? <Check /> : <Copy />}
        Copy Page
      </button>
      <Popover>
        <PopoverTrigger
          className={cn(
            buttonVariants({
              variant: 'secondary',
              className: 'gap-2 rounded-l-none border-l-0 px-2',
            }),
          )}
        >
          <ChevronDown className="size-3.5 text-fd-muted-foreground" />
        </PopoverTrigger>
        <PopoverContent className="flex flex-col overflow-auto w-56">
          {items.map((item) => (
            <a
              key={item.href}
              href={item.href}
              rel="noreferrer noopener"
              target="_blank"
              className={cn(optionVariants())}
            >
              {item.icon}
              {item.title}
              <ExternalLinkIcon className="text-fd-muted-foreground size-3.5 ms-auto" />
            </a>
          ))}
        </PopoverContent>
      </Popover>
    </div>
  );
}
</file>

<file path="src/components/pricing-table-one-minimal-demo.tsx">
"use client"

import { PricingTableOne } from "@/components/billingsdk/pricing-table-one"
import { plans } from "@/lib/billingsdk-config"

export function PricingTableOneMinimalDemo() {
    return <>
        <PricingTableOne plans={plans}
            title="Pricing"
            description="Choose the plan that's right for you"
            onPlanSelect={(planId) => console.log('Selected plan:', planId)}
            size="small" // small, medium, large
            theme="minimal" // minimal or classic
            className="w-full"
        />
    </>
}
</file>

<file path="src/components/subscription-management-demo.tsx">
'use client'

import { SubscriptionManagement } from '@/components/billingsdk/subscription-management';
import { type CurrentPlan, plans } from '@/lib/billingsdk-config';

export function SubscriptionManagementDemo() {
    const currentPlan: CurrentPlan = {
        plan: plans[1],
        type: 'monthly',
        price: '$121',
        nextBillingDate: 'January 15, 2025',
        paymentMethod: 'Credit Card',
        status: 'active'
    }
    return (
        <div className="flex flex-1 flex-col justify-center text-center">
            <SubscriptionManagement
                className="max-w-2xl mx-auto"
                currentPlan={currentPlan}
                updatePlan={{
                    currentPlan: currentPlan.plan,
                    plans: plans,
                    onPlanChange: (planId) => { console.log('update plan', planId) },
                    triggerText: 'Update Plan'
                }}
                cancelSubscription={{
                    title: 'Cancel Subscription',
                    description: 'Are you sure you want to cancel your subscription?',
                    leftPanelImageUrl: 'https://img.freepik.com/free-vector/abstract-paper-cut-shape-wave-background_474888-4649.jpg?semt=ais_hybrid&w=740&q=80',
                    plan: currentPlan.plan,
                    warningTitle: 'You will lose access to your account',
                    warningText: 'If you cancel your subscription, you will lose access to your account and all your data will be deleted.',
                    onCancel: async (planId) => {
                        console.log('cancel subscription', planId)
                        return new Promise((resolve) => {
                            setTimeout(() => {
                                resolve(void 0);
                            }, 1000);
                        });
                    },
                    onKeepSubscription: async (planId) => { console.log('keep subscription', planId) },
                }}
            />

        </div>
    );
}
</file>

<file path="src/registry/billingsdk/demo/pricing-table-one-demo.tsx">
"use client"

import { PricingTableOne } from "@/components/billingsdk/pricing-table-one"
import { plans } from "@/lib/billingsdk-config"

export function PricingTableOneDemo() {
    return <>
        <PricingTableOne plans={plans}
            title="Pricing"
            description="Choose the plan that's right for you"
            onPlanSelect={(planId) => console.log('Selected plan:', planId)}
            size="small" // small, medium, large
            theme="classic" // minimal or classic
            className="w-full"
        />
    </>
}
</file>

<file path="src/registry/billingsdk/demo/subscription-management-demo.tsx">
'use client'

import { SubscriptionManagement } from '@/components/billingsdk/subscription-management';
import { type CurrentPlan, plans } from '@/lib/billingsdk-config';

export function SubscriptionManagementDemo() {
    const currentPlan: CurrentPlan = {
        plan: plans[1],
        type: 'monthly',
        price: '$121',
        nextBillingDate: 'January 15, 2025',
        paymentMethod: 'Credit Card',
        status: 'active'
    }
    return (
        <div className="flex flex-1 flex-col justify-center text-center">
            <SubscriptionManagement
                className="max-w-2xl mx-auto"
                currentPlan={currentPlan}
                updatePlan={{
                    currentPlan: currentPlan.plan,
                    plans: plans,
                    onPlanChange: (planId) => { console.log('update plan', planId) },
                    triggerText: 'Update Plan'
                }}
                cancelSubscription={{
                    title: 'Cancel Subscription',
                    description: 'Are you sure you want to cancel your subscription?',
                    leftPanelImageUrl: 'https://img.freepik.com/free-vector/abstract-paper-cut-shape-wave-background_474888-4649.jpg?semt=ais_hybrid&w=740&q=80',
                    plan: currentPlan.plan,
                    warningTitle: 'You will lose access to your account',
                    warningText: 'If you cancel your subscription, you will lose access to your account and all your data will be deleted.',
                    onCancel: async (planId) => {
                        console.log('cancel subscription', planId)
                        return new Promise((resolve) => {
                            setTimeout(() => {
                                resolve(void 0);
                            }, 1000);
                        });
                    },
                    onKeepSubscription: async (planId) => { console.log('keep subscription', planId) },
                }}
            />

        </div>
    );
}
</file>

<file path="src/registry/billingsdk/pricing-table-three.tsx">
'use client'

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Check } from "lucide-react"
import { cn } from "@/lib/utils"
import { type Plan } from "@/lib/billingsdk-config"
import { useState } from "react"
import { Label } from "@/components/ui/label"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { cva, type VariantProps } from "class-variance-authority"
import { AnimatePresence, motion } from "motion/react"

const sectionVariants = cva("mt-10 max-w-7xl mx-auto", {
  variants: {
    variant: {
      small: "mt-6",
      medium: "mt-8",
      large: "mt-10",
    },
  },
  defaultVariants: {
    variant: "small",
  },
})

const toggleContainerVariants = cva(
  "bg-muted flex h-11 w-fit shrink-0 items-center rounded-md p-1 text-lg",
  {
    variants: {
      variant: {
        small: "h-9 text-base",
        medium: "h-10 text-lg",
        large: "h-11 text-lg",
      },
    },
    defaultVariants: {
      variant: "large",
    },
  }
)

const labelPaddingVariants = cva("px-7", {
  variants: {
    variant: {
      small: "px-5",
      medium: "px-6",
      large: "px-7",
    },
  },
  defaultVariants: {
    variant: "large",
  },
})

const cardTitleVariants = cva("text-xl", {
  variants: {
    variant: {
      small: "text-lg",
      medium: "text-xl",
      large: "text-xl",
    },
  },
  defaultVariants: {
    variant: "large",
  },
})

const cardDescriptionVariants = cva("text-sm", {
  variants: {
    variant: {
      small: "text-xs",
      medium: "text-sm",
      large: "text-sm",
    },
  },
  defaultVariants: {
    variant: "large",
  },
})

const priceTextVariants = cva("text-4xl font-medium", {
  variants: {
    variant: {
      small: "text-3xl",
      medium: "text-4xl",
      large: "text-4xl",
    },
  },
  defaultVariants: {
    variant: "large",
  },
})

const featureIconVariants = cva("w-4 h-4", {
  variants: {
    variant: {
      small: "w-3 h-3",
      medium: "w-4 h-4",
      large: "w-4 h-4",
    },
  },
  defaultVariants: {
    variant: "large",
  },
})

const footerWrapperVariants = cva(
  "flex items-center justify-between bg-muted/50 p-6 border-t border-border",
  {
    variants: {
      variant: {
        small: "p-4",
        medium: "p-5",
        large: "p-6",
      },
    },
    defaultVariants: {
      variant: "large",
    },
  }
)

const footerTextVariants = cva("text-lg font-medium text-card-foreground text-left w-full my-auto", {
  variants: {
    variant: {
      small: "text-base",
      medium: "text-lg",
      large: "text-lg",
    },
  },
  defaultVariants: {
    variant: "large",
  },
})

interface PricingTableProps extends VariantProps<typeof sectionVariants> {
  className?: string
  plans: Plan[]
  onPlanSelect?: (planId: string) => void
  showFooter?: boolean
  footerText?: string
  footerButtonText?: string
  onFooterButtonClick?: () => void
}

export function PricingTableThree({ className, plans, onPlanSelect, showFooter, footerText, footerButtonText, onFooterButtonClick, variant }: PricingTableProps) {
  const [isAnnually, setIsAnnually] = useState(false);

  function calculateDiscount(monthlyPrice: string, yearlyPrice: string): number {
    const monthly = parseFloat(monthlyPrice);
    const yearly = parseFloat(yearlyPrice);

    if (
      monthlyPrice.toLowerCase() === "custom" ||
      yearlyPrice.toLowerCase() === "custom" ||
      isNaN(monthly) ||
      isNaN(yearly) ||
      monthly === 0
    ) {
      return 0;
    }

    const discount = ((monthly * 12 - yearly) / (monthly * 12)) * 100;
    return Math.round(discount);
  }

  const yearlyPriceDiscount = plans.length
    ? Math.max(
      ...plans.map((plan) =>
        calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)
      )
    )
    : 0;

  return (
    <div className={cn(sectionVariants({ variant }), className)}>
      {/* Header Section with Toggle */}
      <div className="flex flex-col justify-between md:gap-10 gap-4 md:flex-row mb-8 items-center md:items-start">
        <div className={cn(toggleContainerVariants({ variant }))}>
          <RadioGroup
            defaultValue="monthly"
            className="h-full grid-cols-2"
            onValueChange={(value) => {
              setIsAnnually(value === "annually");
            }}
          >
            <div className='has-[button[data-state="checked"]]:bg-background h-full rounded-md transition-all'>
              <RadioGroupItem
                value="monthly"
                id="monthly"
                className="peer sr-only"
              />
              <Label
                htmlFor="monthly"
                className={cn(
                  "text-muted-foreground peer-data-[state=checked]:text-primary flex h-full cursor-pointer items-center justify-center font-semibold",
                  labelPaddingVariants({ variant })
                )}
              >
                Monthly
              </Label>
            </div>
            <div className='has-[button[data-state="checked"]]:bg-background h-full rounded-md transition-all'>
              <RadioGroupItem
                value="annually"
                id="annually"
                className="peer sr-only"
              />
              <Label
                htmlFor="annually"
                className={cn(
                  "text-muted-foreground peer-data-[state=checked]:text-primary flex h-full cursor-pointer items-center justify-center gap-1 font-semibold",
                  labelPaddingVariants({ variant })
                )}
              >
                Yearly
              </Label>
            </div>
          </RadioGroup>
        </div>
        <div className="flex justify-center">
          {yearlyPriceDiscount > 0 && (
            <span className="text-xs mt-2 text-muted-foreground">
              Save upto {yearlyPriceDiscount}% with yearly plan
            </span>
          )}
        </div>
      </div>

      <div className={cn(
        "grid gap-4 md:gap-0",
        plans.length === 1 && "grid-cols-1 max-w-md mx-auto",
        plans.length === 2 && "grid-cols-1 md:grid-cols-2 max-w-4xl mx-auto",
        plans.length === 3 && "grid-cols-1 md:grid-cols-3",
        plans.length === 4 && "grid-cols-1 md:grid-cols-2 lg:grid-cols-4",
        plans.length >= 5 && "grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"
      )}>
        {plans.map((plan) => (
          <Card key={plan.id} className={cn(
            "border rounded-xl md:border-none md:rounded-none text-card-foreground flex flex-col relative transition-all duration-200 shadow-sm md:shadow-none",
            plan.highlight === true
              ? "bg-muted/30 md:-mt-8 shadow-lg z-10 md:border-t md:rounded-md border-border"
              : "bg-card"
          )}>
            {plan.badge && (
              <Badge className="absolute -top-3 left-1/2 transform -translate-x-1/2 bg-secondary text-secondary-foreground px-3 py-1 text-xs">
                {plan.badge}
              </Badge>
            )}
            <CardHeader className="pb-4">
              <div className="space-y-2">
                <h3 className={cn(cardTitleVariants({ variant }), "font-semibold text-left")}>{plan.title}</h3>
                <p className={cn(cardDescriptionVariants({ variant }), "w-full text-left text-muted-foreground")}>{plan.description}</p>
              </div>
              <div className="space-y-1 text-left">
                <AnimatePresence mode="wait">
                  {isAnnually ? (
                    <motion.div
                      key="yearly"
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      transition={{ duration: 0.3 }}
                    >
                      <span className={cn(priceTextVariants({ variant }), "text-left")}>
                        {parseFloat(plan.yearlyPrice) >= 0 && (
                          <>
                            {plan.currency}
                          </>
                        )}
                        {plan.yearlyPrice}
                        {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice) > 0 && (
                          <span className="text-xs ml-2 underline">
                            {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)}% off
                          </span>
                        )}
                      </span>
                      <p className="text-muted-foreground">Per year</p>
                    </motion.div>
                  ) : (
                    <motion.div
                      key="monthly"
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      transition={{ duration: 0.3 }}
                    >
                      <span className={cn(priceTextVariants({ variant }), "text-left")}>
                        {parseFloat(plan.monthlyPrice) >= 0 && (
                          <>
                            {plan.currency}
                          </>
                        )}
                        {plan.monthlyPrice}
                      </span>
                      <p className="text-muted-foreground">Per month</p>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
            </CardHeader>
            <CardContent className="space-y-6 flex-1 flex flex-col">
              <div className="space-y-4 flex-1">
                {plan.features.map((feature, index) => (
                  <div key={index} className="flex items-center gap-3">
                    {feature.icon === "check" ? (
                      <div className="w-2 h-2 bg-primary rounded-sm"></div>
                    ) : (
                      <div className={cn(featureIconVariants({ variant }), feature.iconColor || "text-muted-foreground")}>
                        <Check className={cn(featureIconVariants({ variant }))} />
                      </div>
                    )}
                    <span className="text-sm">{feature.name}</span>
                    <span className="ml-auto text-sm text-muted-foreground">Included</span>
                  </div>
                ))}
              </div>

              <Button
                className={cn(
                  "w-full mt-auto hover:cursor-pointer",
                  plan.highlight === true
                    ? "gap-2 whitespace-nowrap focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 shadow hover:bg-primary/90 h-9 py-2 group bg-primary text-primary-foreground ring-primary before:from-primary-foreground/20 after:from-primary-foreground/10 relative isolate inline-flex w-full items-center justify-center overflow-hidden rounded-md px-3 text-left text-sm font-medium ring-1 transition duration-300 ease-[cubic-bezier(0.4,0.36,0,1)] before:pointer-events-none before:absolute before:inset-0 before:-z-10 before:rounded-md before:bg-gradient-to-b before:opacity-80 before:transition-opacity before:duration-300 before:ease-[cubic-bezier(0.4,0.36,0,1)] after:pointer-events-none after:absolute after:inset-0 after:-z-10 after:rounded-md after:bg-gradient-to-b after:to-transparent after:mix-blend-overlay"
                    : "bg-secondary hover:bg-secondary/80 text-secondary-foreground"
                )}
                onClick={() => onPlanSelect?.(plan.id)}
              >
                {plan.buttonText}
              </Button>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Footer Section */}
      {showFooter !== false && (
        <div className={cn(
          footerWrapperVariants({ variant }),
          plans.length === 1 && "max-w-md mx-auto",
          plans.length === 2 && "max-w-4xl mx-auto"
        )}>
          <div className="flex flex-col md:flex-row gap-4 justify-between w-full">

              <p className={cn(footerTextVariants({ variant }))}>{footerText || "Pre-negotiated discounts are available to early-stage startups and nonprofits."}</p>
            <Button
              className="bg-secondary hover:bg-secondary/80 text-secondary-foreground px-6"
              onClick={onFooterButtonClick}
            >
              {footerButtonText || "Apply now"}
            </Button>
          </div>
        </div>
      )}
    </div>
  )
}
</file>

<file path="src/registry/billingsdk/pricing-table-two.tsx">
"use client";

import { Check, Minus, Zap } from "lucide-react";
import { useState } from "react";
import { cva, type VariantProps } from "class-variance-authority";
import { motion, AnimatePresence } from "framer-motion";

import { type Plan } from "@/lib/billingsdk-config";
import { cn } from "@/lib/utils";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";

const sectionVariants = cva("py-32", {
  variants: {
    size: {
      small: "py-12",
      medium: "py-20",
      large: "py-32",
    },
    theme: {
      minimal: "",
      classic: "bg-gradient-to-b from-background to-muted/20 relative overflow-hidden",
    },
  },
  defaultVariants: {
    size: "medium",
    theme: "minimal",
  },
});

const titleVariants = cva("mb-2 font-semibold", {
  variants: {
    size: {
      small: "text-2xl lg:text-3xl",
      medium: "text-3xl lg:text-4xl",
      large: "text-3xl lg:text-5xl",
    },
    theme: {
      minimal: "",
      classic: "bg-gradient-to-r from-foreground to-muted-foreground bg-clip-text text-transparent font-bold",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const descriptionVariants = cva("text-muted-foreground", {
  variants: {
    size: {
      small: "text-sm lg:text-base",
      medium: "text-base lg:text-lg",
      large: "lg:text-lg",
    },
    theme: {
      minimal: "",
      classic: "text-center max-w-2xl mx-auto",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const toggleWrapperVariants = cva("flex justify-center items-center gap-3", {
  variants: {
    size: {
      small: "mt-6",
      medium: "mt-7",
      large: "mt-8",
    },
    theme: {
      minimal: "",
      classic: "mt-10",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const toggleLabelVariants = cva("font-medium text-sm transition-all", {
  variants: {
    size: {
      small: "text-xs",
      medium: "text-sm",
      large: "text-sm",
    },
    theme: {
      minimal: "",
      classic: "font-semibold",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const switchScaleVariants = cva("transition-all", {
  variants: {
    size: {
      small: "scale-90",
      medium: "scale-95",
      large: "",
    },
    theme: {
      minimal: "",
      classic: "data-[state=checked]:bg-primary",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const plansWrapperVariants = cva("flex", {
  variants: {
    size: {
      small: "mt-6",
      medium: "mt-8",
      large: "mt-10",
    },
    theme: {
      minimal: "",
      classic: "mt-12",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const cardVariants = cva(
  "bg-card text-card-foreground border shadow-sm flex w-full flex-col justify-between text-center rounded-xl md:rounded-none transition-all duration-300",
  {
    variants: {
      size: {
        small: "py-4 gap-6",
        medium: "py-5 gap-7",
        large: "py-6 gap-8",
      },
      theme: {
        minimal: "",
        classic: "hover:shadow-xl backdrop-blur-sm bg-card/50 border-border/50",
      },
      highlight: {
        true: "",
        false: "",
      },
    },
    compoundVariants: [
      {
        theme: "classic",
        highlight: true,
        className: "bg-gradient-to-b from-primary/5 to-transparent relative overflow-hidden shadow-2xl",
      },
      {
        theme: "minimal",
        highlight: true,
        className: "bg-muted/30 shadow-lg",
      },
    ],
    defaultVariants: {
      size: "large",
      theme: "minimal",
      highlight: false,
    },
  }
);

const priceTextVariants = cva("font-bold", {
  variants: {
    size: {
      small: "text-3xl",
      medium: "text-4xl",
      large: "text-5xl",
    },
    theme: {
      minimal: "",
      classic: "text-6xl font-extrabold bg-gradient-to-r from-foreground to-muted-foreground bg-clip-text text-transparent",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const priceSubTextVariants = cva("text-muted-foreground", {
  variants: {
    size: {
      small: "mt-2",
      medium: "mt-3",
      large: "mt-3",
    },
    theme: {
      minimal: "",
      classic: "font-medium",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const tableWrapperVariants = cva("relative w-full overflow-x-auto", {
  variants: {
    size: {
      small: "mt-6",
      medium: "mt-8",
      large: "mt-10",
    },
    theme: {
      minimal: "",
      classic: "mt-16 bg-card/30 backdrop-blur-sm rounded-xl border border-border/50 shadow-sm",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const featureIconVariants = cva("mx-auto", {
  variants: {
    size: {
      small: "size-4",
      medium: "size-5",
      large: "size-5",
    },
    theme: {
      minimal: "",
      classic: "text-emerald-500",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const firstColWidthVariants = cva("", {
  variants: {
    size: {
      small: "w-[140px]",
      medium: "w-[180px]",
      large: "w-[200px]",
    },
  },
  defaultVariants: {
    size: "large",
  },
});

const buttonVariants = cva("w-full hover:cursor-pointer transition-all duration-300", {
  variants: {
    theme: {
      minimal: "",
      classic: "hover:shadow-xl active:scale-95",
    },
  },
  defaultVariants: {
    theme: "minimal",
  },
});

interface PricingTableTwoProps extends VariantProps<typeof sectionVariants> {
  className?: string;
  plans: Plan[];
  title?: string;
  description?: string;
  onPlanSelect?: (planId: string) => void;
}

export function PricingTableTwo({
  className,
  plans,
  title,
  description,
  onPlanSelect,
  size,
  theme = "minimal"
}: PricingTableTwoProps) {
  const [isAnnually, setIsAnnually] = useState(false);

  function calculateDiscount(monthlyPrice: string, yearlyPrice: string): number {
    const monthly = parseFloat(monthlyPrice);
    const yearly = parseFloat(yearlyPrice);

    if (
      monthlyPrice.toLowerCase() === "custom" ||
      yearlyPrice.toLowerCase() === "custom" ||
      isNaN(monthly) ||
      isNaN(yearly) ||
      monthly === 0
    ) {
      return 0;
    }

    const discount = ((monthly * 12 - yearly) / (monthly * 12)) * 100;
    return Math.round(discount);
  }

  const yearlyPriceDiscount = plans.length
    ? Math.max(
      ...plans.map((plan) =>
        calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)
      )
    )
    : 0;

  return (
    <section className={cn(sectionVariants({ size, theme }), className)}>
      {/* Classic theme background elements */}
      {theme === "classic" && (
        <>
          <div className="absolute inset-0 bg-grid-pattern opacity-5" />
          <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-primary/5 rounded-full blur-3xl" />
          <div className="absolute top-1/4 right-1/4 w-64 h-64 bg-secondary/5 rounded-full blur-2xl" />
        </>
      )}

      <div className="container max-w-5xl relative">
        <motion.div
          className={cn(
            "flex flex-col items-center gap-4",
            theme === "classic" ? "text-center" : ""
          )}
          initial={{ opacity: 0 }}
          whileInView={{ opacity: 1 }}
          viewport={{ once: true }}
          transition={{ duration: 0.6, ease: "easeOut" }}
        >
          <h2 className={cn(titleVariants({ size, theme }))}>
            {title || "We offer 3 plans"}
          </h2>

          <p className={cn(descriptionVariants({ size, theme }))}>
            {description || "Lorem ipsum dolor sit amet consectetur adipisicing."}
          </p>
        </motion.div>

        {/* Monthly/Yearly Toggle */}
        <div className={cn(toggleWrapperVariants({ size, theme }))}>
          <span className={cn(
            toggleLabelVariants({ size, theme }),
            !isAnnually ? "text-foreground" : "text-muted-foreground"
          )}>
            Monthly
          </span>
          <Switch
            checked={isAnnually}
            onCheckedChange={setIsAnnually}
            className={cn(switchScaleVariants({ size, theme }))}
          />
          <span className={cn(
            toggleLabelVariants({ size, theme }),
            isAnnually ? "text-foreground" : "text-muted-foreground"
          )}>
            Yearly
          </span>
        </div>

        <div className="flex justify-center">
          {yearlyPriceDiscount > 0 && (
            <motion.span
              className={cn(
                "text-xs mt-2 text-muted-foreground",
                theme === "classic" && "text-emerald-500 font-medium"
              )}
              initial={{ opacity: 0 }}
              whileInView={{ opacity: 1 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.2 }}
            >
              Save upto {yearlyPriceDiscount}% with yearly plan
            </motion.span>
          )}
        </div>

        <div className={cn(
          plansWrapperVariants({ size, theme }),
          "gap-4 md:gap-0",
          plans.length === 1 && "flex-col max-w-md mx-auto",
          plans.length === 2 && "flex-col md:flex-row max-w-4xl mx-auto",
          plans.length >= 3 && "flex-col lg:flex-row max-w-7xl mx-auto"
        )}>
          {plans.map((plan: Plan, index: number) => (
            <motion.div
              key={plan.id}
              className={cn(
                cardVariants({
                  size,
                  theme,
                  highlight: plan.highlight
                }),
                index === 0 && "md:rounded-l-xl md:border-r-0",
                index === plans.length - 1 && "md:rounded-r-xl md:border-l-0",
                index > 0 && index < plans.length - 1 && "md:border-l-0 md:border-r-0",
                plans.length === 1 && "rounded-xl"
              )}
              initial={{ opacity: 0 }}
              whileInView={{ opacity: 1 }}
              viewport={{ once: true }}
              transition={{ duration: 0.6, ease: "easeOut", delay: index * 0.15 }}
            >
              <div className="grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6">
                <div className="flex items-center gap-2 justify-center">
                  <div className={cn(
                    "leading-none font-semibold",
                    theme === "classic" && "text-lg font-bold"
                  )}>
                    {plan.title}
                  </div>
                </div>
                <p className={cn(
                  "text-muted-foreground text-center",
                  theme === "classic" && "text-foreground/80"
                )}>
                  {plan.description}
                </p>
              </div>

              <div className="px-6">
                <AnimatePresence mode="wait">
                  {isAnnually ? (
                    <motion.div
                      key="yearly"
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      transition={{ duration: 0.3 }}
                    >
                      <span className={cn(priceTextVariants({ size, theme }))}>
                        {parseFloat(plan.yearlyPrice) >= 0 && (
                          <>{plan.currency}</>
                        )}
                        {plan.yearlyPrice}
                        {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice) > 0 && (
                          <span className={cn(
                            "text-xs ml-2",
                            theme === "classic" ? "text-emerald-500 font-semibold" : "underline"
                          )}>
                            {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)}% off
                          </span>
                        )}
                      </span>
                      <p className={cn(priceSubTextVariants({ size, theme }))}>per year</p>
                    </motion.div>
                  ) : (
                    <motion.div
                      key="monthly"
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      transition={{ duration: 0.3 }}
                    >
                      <span className={cn(priceTextVariants({ size, theme }))}>
                        {parseFloat(plan.monthlyPrice) >= 0 && (
                          <>{plan.currency}</>
                        )}
                        {plan.monthlyPrice}
                      </span>
                      <p className={cn(priceSubTextVariants({ size, theme }))}>per month</p>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>

              <div className="flex items-center px-6">
                <Button
                  className={cn(
                    buttonVariants({ theme }),
                    plan.highlight && theme === "minimal" && "gap-2 whitespace-nowrap focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 shadow hover:bg-primary/90 h-9 py-2 group bg-primary text-primary-foreground ring-primary before:from-primary-foreground/20 after:from-primary-foreground/10 relative isolate inline-flex w-full items-center justify-center overflow-hidden rounded-md px-3 text-left text-sm font-medium ring-1 transition duration-300 ease-[cubic-bezier(0.4,0.36,0,1)] before:pointer-events-none before:absolute before:inset-0 before:-z-10 before:rounded-md before:bg-gradient-to-b before:opacity-80 before:transition-opacity before:duration-300 before:ease-[cubic-bezier(0.4,0.36,0,1)] after:pointer-events-none after:absolute after:inset-0 after:-z-10 after:rounded-md after:bg-gradient-to-b after:to-transparent after:mix-blend-overlay",
                    plan.highlight && theme === "classic" && "relative overflow-hidden bg-gradient-to-r from-primary to-primary/80 text-primary-foreground font-semibold py-3 px-6 rounded-lg border border-primary/20"
                  )}
                  variant={plan.highlight ? "default" : "secondary"}
                  onClick={() => onPlanSelect?.(plan.id)}
                >
                  {theme === "classic" && plan.highlight && (
                    <Zap className="w-4 h-4 mr-1" />
                  )}
                  {plan.buttonText}
                  {theme === "classic" && plan.highlight && (
                    <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/10 to-white/0 translate-x-[-100%] hover:translate-x-[100%] transition-transform duration-700" />
                  )}
                </Button>
              </div>
            </motion.div>
          ))}
        </div>

        <motion.div
          className={cn(tableWrapperVariants({ size, theme }))}
          initial={{ opacity: 0 }}
          whileInView={{ opacity: 1 }}
          viewport={{ once: true }}
          transition={{ duration: 0.7, ease: "easeOut" }}
        >
          <Table className={cn(theme === "classic" && "bg-transparent")}>
            <TableHeader>
              <TableRow className={cn(theme === "classic" && "border-border/30")}>
                <TableHead className={firstColWidthVariants({ size })}></TableHead>
                {plans.map((plan: Plan) => (
                  <TableHead key={plan.id} className={cn(
                    "text-center font-bold text-primary",
                    theme === "classic" && "text-lg"
                  )}>
                    {plan.title}
                  </TableHead>
                ))}
              </TableRow>
            </TableHeader>
            <TableBody>
              {(() => {
                const allFeatures = new Set<string>();
                plans.forEach(plan => {
                  plan.features.forEach(feature => {
                    allFeatures.add(feature.name);
                  });
                });
                return Array.from(allFeatures).map((featureName, featureIndex) => (
                  <TableRow key={featureIndex} className={cn(
                    theme === "classic" && "border-border/20 hover:bg-muted/30"
                  )}>
                    <TableCell className={cn(
                      "font-medium text-left",
                      theme === "classic" && "font-semibold text-foreground/90"
                    )}>
                      {featureName}
                    </TableCell>
                    {plans.map((plan: Plan) => {
                      const feature = plan.features.find(f => f.name === featureName);
                      return (
                        <TableCell key={plan.id} className="text-center">
                          {feature ? (
                            feature.icon === "check" ? (
                              <Check className={cn(featureIconVariants({ size, theme }))} />
                            ) : feature.icon === "minus" ? (
                              <Minus className={cn(featureIconVariants({ size, theme }))} />
                            ) : (
                              <span className={cn(
                                "text-sm text-muted-foreground",
                                theme === "classic" && "font-medium text-foreground/70"
                              )}>
                                {feature.name}
                              </span>
                            )
                          ) : (
                            <Minus className={cn(featureIconVariants({ size, theme }))} />
                          )}
                        </TableCell>
                      );
                    })}
                  </TableRow>
                ));
              })()}
            </TableBody>
          </Table>
        </motion.div>
      </div>
    </section>
  );
}
</file>

<file path="src/registry/billingsdk/subscription-management.tsx">
"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { Calendar, CreditCard } from "lucide-react"
import { CurrentPlan } from "@/lib/billingsdk-config"
import { cn } from "@/lib/utils"
import { CancelSubscriptionDialog, type CancelSubscriptionDialogProps } from "@/components/billingsdk/cancel-subscription-dialog"
import { UpdatePlanDialog, type UpdatePlanDialogProps } from "@/components/billingsdk/update-plan-dialog"

interface SubscriptionManagementProps {
    className?: string
    currentPlan: CurrentPlan
    cancelSubscription: CancelSubscriptionDialogProps
    updatePlan: UpdatePlanDialogProps
}

export function SubscriptionManagement({ className, currentPlan, cancelSubscription, updatePlan }: SubscriptionManagementProps) {

    return (<div className={cn("text-left w-full", className)}>
        <Card className="shadow-lg">
            <CardHeader className="pb-4 sm:pb-6 px-4 sm:px-6">
                <CardTitle className="flex items-center gap-2 sm:gap-3 text-lg sm:text-xl">
                    <div className="p-1.5 sm:p-2 rounded-lg bg-primary/10 ring-1 ring-primary/20">
                        <CreditCard className="h-4 w-4 sm:h-5 sm:w-5 text-primary" />
                    </div>
                    Current Subscription
                </CardTitle>
                <CardDescription className="text-sm sm:text-base">Manage your billing and subscription settings</CardDescription>
            </CardHeader>

            <CardContent className="space-y-6 sm:space-y-8 px-4 sm:px-6">
                {/* Current Plan Details with highlighted styling */}
                <div className="relative p-3 sm:p-4 rounded-xl bg-gradient-to-r from-muted/30 via-muted/20 to-muted/30 border border-border/50 overflow-hidden">
                    <div className="relative">
                        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:gap-0">
                            <div className="w-full">
                                <div className="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-3 mb-2">
                                    <div className="flex items-center gap-2">
                                        <h3 className="text-lg sm:text-xl font-semibold">{currentPlan.plan.title} Plan</h3>
                                    </div>
                                    <div className="flex flex-wrap items-center gap-2">
                                        <Badge
                                            variant={currentPlan.status === "active" ? "default" : "outline"}
                                            className="shadow-sm text-xs sm:text-sm bg-primary/90 hover:bg-primary border-0 font-medium"
                                        >
                                            {currentPlan.type === `monthly` ? `${currentPlan.plan.currency}${currentPlan.plan.monthlyPrice}/month` : currentPlan.type === `yearly` ? `${currentPlan.plan.yearlyPrice}/year` : `${currentPlan.price}`}
                                        </Badge>
                                        <Badge
                                            variant="outline"
                                            className="shadow-sm text-xs sm:text-sm border-border/60 bg-background/50 backdrop-blur-sm"
                                        >
                                            {currentPlan.status}
                                        </Badge>
                                    </div>
                                </div>
                                <div className="relative">
                                    <p className="text-xs sm:text-sm text-muted-foreground relative z-10">
                                        {currentPlan.plan.description}
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <Separator className="my-4 sm:my-6 bg-gradient-to-r from-transparent via-border to-transparent" />

                <div className="space-y-3 sm:space-y-4">
                    <h4 className="font-medium flex items-center gap-2 text-base sm:text-lg">
                        <div className="p-1 sm:p-1.5 rounded-md bg-muted ring-1 ring-border/50">
                            <Calendar className="h-3 w-3 sm:h-4 sm:w-4" />
                        </div>
                        Billing Information
                    </h4>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-6">
                        <div className="group p-2.5 sm:p-3 rounded-lg md:bg-gradient-to-tl bg-gradient-to-b from-muted to-background/10 border border-border/30 hover:border-border/60 transition-all duration-200">
                            <span className="text-xs sm:text-sm text-muted-foreground block mb-1">Next billing date</span>
                            <div className="font-medium text-sm sm:text-base group-hover:text-primary transition-colors duration-200">{currentPlan.nextBillingDate}</div>
                        </div>
                        <div className="group p-2.5 sm:p-3 rounded-lg md:bg-gradient-to-tr bg-gradient-to-b from-muted to-background/10 border border-border/30 hover:border-border/60 transition-all duration-200">
                            <span className="text-xs sm:text-sm text-muted-foreground block mb-1">Payment method</span>
                            <div className="font-medium text-sm sm:text-base group-hover:text-primary transition-colors duration-200">{currentPlan.paymentMethod}</div>
                        </div>
                    </div>
                </div>

                <Separator className="my-4 sm:my-6 bg-gradient-to-r from-transparent via-border to-transparent" />

                <div className="flex flex-col sm:flex-row gap-3">
                    <UpdatePlanDialog
                        className="mx-0 shadow-lg hover:shadow-xl transition-all duration-200"
                        {...updatePlan}
                    />

                    <CancelSubscriptionDialog
                        className="mx-0 shadow-lg hover:shadow-xl transition-all duration-200"
                        {...cancelSubscription}
                    />
                </div>

                <div className="pt-4 sm:pt-6">
                    <h4 className="font-medium mb-3 sm:mb-4 text-base sm:text-lg">Current Plan Features</h4>
                    <div className="flex flex-wrap gap-2 sm:gap-3">
                        {currentPlan.plan.features.map((feature, index) => (
                            <div
                                key={index}
                                className="group flex items-center gap-2 p-2 sm:p-2 rounded-lg border border-border/80 hover:border-primary/30 hover:bg-primary/5 transition-all duration-200"
                            >
                                <div className="w-1 h-1 sm:w-1.5 sm:h-1.5 rounded-full bg-primary flex-shrink-0 group-hover:bg-primary group-hover:scale-125 transition-all duration-200"></div>
                                <span className="text-xs sm:text-sm text-muted-foreground group-hover:text-foreground transition-colors duration-200">{feature.name}</span>
                            </div>
                        ))}
                    </div>
                </div>
            </CardContent>
        </Card>
    </div>
    )
}
</file>

<file path=".github/workflows/ci.yml">
name: CI

permissions:
  contents: read

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Typecheck and Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci
      
      - name: Lint
        run: npm run lint

      - name: Type check
        run: npm run typecheck

      - name: Build
        run: npm run build
</file>

<file path="content/docs/components/cancel-subscription/cancel-subscription-card.mdx">
---
title: Cancel Subscription Card
description: The Cancel Subscription Card component provides a comprehensive and user-friendly interface for handling subscription cancellations. It features a two-step confirmation process, loading states, error handling, and full customization options.
---

<Tabs items={['Preview', 'Code']} className="bg-transparent border-none">
  <Tab value="Preview" className="border-none bg-transparent p-0 mt-3">
    <PreviewComponents registryName="cancel-subscription-card">
      <CancelSubscriptionCardDemo />
    </PreviewComponents>
  </Tab>

  <Tab value="Code" className="mt-3">
  <include cwd lang="tsx" meta='title="src/components/cancel-subscription-card-demo.tsx"'>src/components/cancel-subscription-card-demo.tsx</include>

  </Tab>
</Tabs>

## Installation

<Tabs items={['npx', 'pnpm', 'yarn']} defaultValue="npx" groupId="installation-tabs">
  <Tab value="npx">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/cancel-subscription-card.json
    ```
  </Tab>
  <Tab value="pnpm">
    ```bash
    pnpm dlx shadcn@latest add https://billingsdk.com/r/cancel-subscription-card.json
    ```
  </Tab>
  <Tab value="yarn">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/cancel-subscription-card.json
    ```
  </Tab>
</Tabs>

## Usage

```tsx
import { CancelSubscriptionCard } from "@/components/billingsdk/cancel-subscription-card";
import { plans } from "@/lib/billingsdk-config";
```

```tsx
<CancelSubscriptionCard
  title="We're sorry to see you go..."
  description="Before you cancel, let us know what we could do better."
  plan={plans[1]}
  onCancel={async (planId) => {
    // Handle cancellation
    await cancelSubscription(planId);
  }}
/>
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `title` | `string` | ✅ | Main card title |
| `description` | `string` | ✅ | Card description text |
| `plan` | `Plan` | ✅ | Plan object containing subscription details. The `plans` array in the `lib/billingsdk-config.ts` file. |
| `onCancel` | `(planId: string) => Promise<void> \| void` | ✅ | Callback when subscription is cancelled |
| `leftPanelImageUrl` | `string` | ❌ | Background image URL for left panel |
| `warningTitle` | `string` | ❌ | Title for warning section |
| `warningText` | `string` | ❌ | Warning message text |
| `keepButtonText` | `string` | ❌ | Text for keep subscription button |
| `continueButtonText` | `string` | ❌ | Text for continue cancellation button |
| `finalTitle` | `string` | ❌ | Title for final confirmation step |
| `finalSubtitle` | `string` | ❌ | Subtitle for final confirmation step |
| `finalWarningText` | `string` | ❌ | Final warning message |
| `goBackButtonText` | `string` | ❌ | Text for go back button |
| `confirmButtonText` | `string` | ❌ | Text for final confirm button |
| `onKeepSubscription` | `(planId: string) => Promise<void> \| void` | ❌ | Callback when user keeps subscription |
| `className` | `string` | ❌ | Additional CSS classes |

## Theming

The cancel subscription card component is styled using the `shadcn/ui` library. You can customize the colors and fonts by overriding the CSS variables. You can also get the theme from the [Theming](/docs/theming) page.


## Example
<include cwd lang="tsx" meta='title="src/components/cancel-subscription-card-demo.tsx"'>src/components/cancel-subscription-card-demo.tsx</include>
</file>

<file path="content/docs/components/cancel-subscription/cancel-subscription-dialog.mdx">
---
title: Cancel Subscription Dialog
description: The Cancel Subscription Dialog component provides a comprehensive and user-friendly interface for handling subscription cancellations. It features a two-step confirmation process, loading states, error handling, and full customization options.
---

<Tabs items={['Preview', 'Code']} className="bg-transparent border-none">
  <Tab value="Preview" className="border-none bg-transparent p-0 mt-3">
    <PreviewComponents registryName="cancel-subscription-dialog">
      <CancelSubscriptionDialogDemo />
    </PreviewComponents>
  </Tab>

  <Tab value="Code" className="mt-3">
  <include cwd lang="tsx" meta='title="src/components/cancel-subscription-dialog-demo.tsx"'>src/components/cancel-subscription-dialog-demo.tsx</include>

  </Tab>
</Tabs>

## Installation

<Tabs items={['npx', 'pnpm', 'yarn']} defaultValue="npx" groupId="installation-tabs">
  <Tab value="npx">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/cancel-subscription-dialog.json
    ```
  </Tab>
  <Tab value="pnpm">
    ```bash
    pnpm dlx shadcn@latest add https://billingsdk.com/r/cancel-subscription-dialog.json
    ```
  </Tab>
  <Tab value="yarn">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/cancel-subscription-dialog.json
    ```
  </Tab>
</Tabs>

## Usage

```tsx
import { CancelSubscriptionDialog } from "@/components/billingsdk/cancel-subscription-dialog";
import { plans } from "@/lib/billingsdk-config";
```

```tsx
<CancelSubscriptionDialog
  title="We're sorry to see you go..."
  description="Before you cancel, let us know what we could do better."
  plan={plans[1]}
  onCancel={async (planId) => {
    // Handle cancellation
    await cancelSubscription(planId);
  }}
/>
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `title` | `string` | ✅ | Main dialog title |
| `description` | `string` | ✅ | Dialog description text |
| `plan` | `Plan` | ✅ | Plan object containing subscription details. The `plans` array in the `lib/billingsdk-config.ts` file. |
| `onCancel` | `(planId: string) => Promise<void> \| void` | ✅ | Callback when subscription is cancelled |
| `triggerButtonText` | `string` | ❌ | Text for the trigger button (default: "Cancel Subscription") |
| `leftPanelImageUrl` | `string` | ❌ | Background image URL for left panel |
| `warningTitle` | `string` | ❌ | Title for warning section |
| `warningText` | `string` | ❌ | Warning message text |
| `keepButtonText` | `string` | ❌ | Text for keep subscription button |
| `continueButtonText` | `string` | ❌ | Text for continue cancellation button |
| `finalTitle` | `string` | ❌ | Title for final confirmation step |
| `finalSubtitle` | `string` | ❌ | Subtitle for final confirmation step |
| `finalWarningText` | `string` | ❌ | Final warning message |
| `goBackButtonText` | `string` | ❌ | Text for go back button |
| `confirmButtonText` | `string` | ❌ | Text for final confirm button |
| `onKeepSubscription` | `(planId: string) => Promise<void> \| void` | ❌ | Callback when user keeps subscription |
| `onDialogClose` | `() => void` | ❌ | Callback when dialog is closed |
| `className` | `string` | ❌ | Additional CSS classes |

## Theming

The cancel subscription dialog component is styled using the `shadcn/ui` library. You can customize the colors and fonts by overriding the CSS variables. You can also get the theme from the [Theming](/docs/theming) page.


## Example
<include cwd lang="tsx" meta='title="src/components/cancel-subscription-dialog-demo.tsx"'>src/components/cancel-subscription-dialog-demo.tsx</include>
</file>

<file path="content/docs/components/pricing-table/pricing-table-one.mdx">
---
title: Pricing Table One
description: The Pricing Table One component provides a clean and modern design for displaying pricing plans. You can use this component to display your pricing plans in a clean and modern way.
---

## Classic Theme

<Tabs items={['Preview', 'Code']} className="bg-transparent border-none">
  <Tab value="Preview" className="border-none bg-transparent p-0 mt-3">
    <PreviewComponents registryName="pricing-table-one">
      <PricingTableOneDemo />
    </PreviewComponents>
  </Tab>

  <Tab value="Code" className="mt-3">
  <include cwd lang="tsx" meta='title="src/components/pricing-table-one-demo.tsx"'>src/components/pricing-table-one-demo.tsx</include>
  </Tab>

</Tabs>

## Minimal Theme

<Tabs items={['Preview', 'Code']} className="bg-transparent border-none">
  <Tab value="Preview" className="border-none bg-transparent p-0 mt-3">
    <PreviewComponents registryName="pricing-table-one">
      <PricingTableOneMinimalDemo />
    </PreviewComponents>
  </Tab>

  <Tab value="Code" className="mt-3">
    <include cwd lang="tsx" meta='title="src/components/pricing-table-one-minimal-demo.tsx"'>src/components/pricing-table-one-minimal-demo.tsx</include>
  </Tab>
</Tabs>

## Installation

<Tabs items={['npx', 'pnpm', 'yarn']} defaultValue="npx" groupId="installation-tabs">
  <Tab value="npx">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/pricing-table-one.json
    ```
  </Tab>
  <Tab value="pnpm">
    ```bash
    pnpm dlx shadcn@latest add https://billingsdk.com/r/pricing-table-one.json
    ```
  </Tab>
  <Tab value="yarn">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/pricing-table-one.json
    ```
  </Tab>
</Tabs>

## Usage

```tsx
import { PricingTableOne } from "@/components/billingsdk/pricing-table-one";
import { plans } from "@/lib/billingsdk-config";
```

```tsx
<PricingTableOne 
  plans={plans}
  title="Pricing"
  description="Choose the plan that's right for you"
  onPlanSelect={(planId) => console.log('Selected plan:', planId)}
  size="small" // small, medium, large
  theme="classic" // minimal or classic
/>
```

## Props

| Prop | Type | Description |
|------|------|-------------|
| `plans` | `Plan[]` | Array of pricing plans (see [Plan interface](/docs/interfaces#plan-interface)) |
| `title` | `string` | Main title for the pricing section |
| `description` | `string` | Subtitle description |
| `onPlanSelect` | `(planId: string) => void` | Callback when a plan is selected |
| `size` | `"small" \| "medium" \|  "large"` | Size variant of the pricing table |
| `theme` | `"minimal" \| "classic"` | Theme variant of the pricing table |


## Theming

The pricing table component is styled using the `shadcn/ui` library. You can customize the colors and fonts by overriding the CSS variables. You can also get the theme from the [Theming](/docs/theming) page.


## Example
<include cwd lang="tsx" meta='title="src/components/pricing-table-one-demo.tsx"'>src/components/pricing-table-one-demo.tsx</include>
</file>

<file path="content/docs/components/pricing-table/pricing-table-three.mdx">
---
title: Pricing Table Three
description: The Pricing Table Three component provides a third design option for pricing displays. You can use this component to display your pricing plans in a third way.  
---

<Tabs items={['Preview', 'Code']} className="bg-transparent border-none">
  <Tab value="Preview" className="border-none bg-transparent p-0 mt-3">
    <PreviewComponents registryName="pricing-table-three">
      <PricingTableThreeDemo />
    </PreviewComponents>
  </Tab>

  <Tab value="Code" className="mt-3">
    <include cwd lang="tsx" meta='title="src/components/pricing-table-three-demo.tsx"'>src/components/pricing-table-three-demo.tsx</include>
  </Tab>  
</Tabs>

## Installation

<Tabs items={['npx', 'pnpm', 'yarn']} defaultValue="npx" groupId="installation-tabs">
  <Tab value="npx">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/pricing-table-three.json
    ``` 
  </Tab>
  <Tab value="pnpm">
    ```bash
    pnpm dlx shadcn@latest add https://billingsdk.com/r/pricing-table-three.json
    ```
  </Tab>
  <Tab value="yarn">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/pricing-table-three.json
    ```
  </Tab>
</Tabs>

## Usage

```tsx
import { PricingTableThree } from "@/components/billingsdk/pricing-table-three";
import { plans } from "@/lib/billingsdk-config";

<PricingTableThree 
  plans={plans}
  title="Pricing Plans"
  description="Find the right plan for your business"
  onPlanSelect={(planId) => console.log('Selected plan:', planId)}
/>
```

## Props

| Prop | Type | Description |
|------|------|-------------|
| `plans` | `Plan[]` | Array of pricing plans (see [Plan interface](/docs/interfaces#plan-interface)) |
| `title` | `string` | Main title for the pricing section |
| `description` | `string` | Subtitle description |
| `onPlanSelect` | `(planId: string) => void` | Callback when a plan is selected |
| `variant` | `"small" \| "medium" \|  "large"` | Size variant of the pricing table |

## Theming

The pricing table component is styled using the `shadcn/ui` library. You can customize the colors and fonts by overriding the CSS variables. You can also get the theme from the [Theming](/docs/theming) page.


## Example
<include cwd lang="tsx" meta='title="src/components/pricing-table-three-demo.tsx"'>src/components/pricing-table-three-demo.tsx</include>
</file>

<file path="content/docs/components/pricing-table/pricing-table-two.mdx">
---
title: Pricing Table Two
description: The Pricing Table Two component offers an alternative design approach for pricing displays. You can use this component to display your pricing plans in an alternative way.

---

## Classic Theme

<Tabs items={['Preview', 'Code']} className="bg-transparent border-none">
  <Tab value="Preview" className="border-none bg-transparent p-0 mt-3">
    <PreviewComponents registryName="pricing-table-two">
      <PricingTableTwoDemo />
    </PreviewComponents>
  </Tab>

  <Tab value="Code" className="mt-3">
    <include cwd lang="tsx" meta='title="src/components/pricing-table-two-demo.tsx"'>src/components/pricing-table-two-demo.tsx</include>
  </Tab>
</Tabs>

## Minimal Theme

<Tabs items={['Preview', 'Code']} className="bg-transparent border-none">
  <Tab value="Preview" className="border-none bg-transparent p-0 mt-3">
    <PreviewComponents registryName="pricing-table-two">
      <PricingTableTwoMinimalDemo />
    </PreviewComponents>
  </Tab>


  <Tab value="Code" className="mt-3">
    <include cwd lang="tsx" meta='title="src/components/pricing-table-two-minimal-demo.tsx"'>src/components/pricing-table-two-minimal-demo.tsx</include>
  </Tab>
</Tabs>


## Installation

<Tabs items={['npx', 'pnpm', 'yarn']} defaultValue="npx" groupId="installation-tabs">
  <Tab value="npx">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/pricing-table-two.json
    ```
  </Tab>
  <Tab value="pnpm">
    ```bash
    pnpm dlx shadcn@latest add https://billingsdk.com/r/pricing-table-two.json
    ```
  </Tab>
  <Tab value="yarn">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/pricing-table-two.json  
    ```
  </Tab>
</Tabs>


## Usage

```tsx
import { PricingTableTwo } from "@/components/billingsdk/pricing-table-two";
import { plans } from "@/lib/billingsdk-config";
```

```tsx
<PricingTableTwo 
  plans={plans}
  title="Choose Your Plan"
  description="Select the perfect plan for your needs"
  onPlanSelect={(planId) => console.log('Selected plan:', planId)}
  size="small" // small, medium, large
  theme="classic" // minimal or classic
/>
```

## Props

| Prop | Type | Description |
|------|------|-------------|
| `plans` | `Plan[]` | Array of pricing plans (see [Plan interface](/docs/interfaces#plan-interface)) |
| `title` | `string` | Main title for the pricing section |
| `description` | `string` | Subtitle description |
| `onPlanSelect` | `(planId: string) => void` | Callback when a plan is selected |
| `variant` | `"small" \| "medium" \|  "large"` | Size variant of the pricing table |

## Theming

The pricing table component is styled using the `shadcn/ui` library. You can customize the colors and fonts by overriding the CSS variables. You can also get the theme from the [Theming](/docs/theming) page.



## Example
<include cwd lang="tsx" meta='title="src/components/pricing-table-two-demo.tsx"'>src/components/pricing-table-two-demo.tsx</include>
</file>

<file path="content/docs/components/update-plan/update-plan-card.mdx">
---
title: Update Plan Card
description: The Update Plan Card component provides a compact, card-based interface for users to upgrade or change their subscription plan. It's perfect for embedding in dashboards or sidebars where space is limited.
---

<Tabs items={['Preview', 'Code']} className="bg-transparent border-none">
  <Tab value="Preview" className="border-none bg-transparent p-0 mt-3">
    <PreviewComponents registryName="update-plan-card">
      <UpdatePlanCardDemo />
    </PreviewComponents>
  </Tab>

  <Tab value="Code" className="mt-3">
  <include cwd lang="tsx" meta='title="src/components/update-plan-card-demo.tsx"'>src/components/update-plan-card-demo.tsx</include>

  </Tab>
</Tabs>

## Installation

<Tabs items={['npx', 'pnpm', 'yarn']} defaultValue="npx" groupId="installation-tabs">
  <Tab value="npx">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/update-plan-card.json
    ```
  </Tab>
  <Tab value="pnpm">
    ```bash
    pnpm dlx shadcn@latest add https://billingsdk.com/r/update-plan-card.json
    ```
  </Tab>
  <Tab value="yarn">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/update-plan-card.json
    ```
  </Tab>
</Tabs>

## Usage

```tsx
import { UpdatePlanCard } from "@/components/billingsdk/update-plan-card";
import { plans } from "@/lib/billingsdk-config";
```

```tsx
<UpdatePlanCard
  currentPlan={plans[0]}
  plans={plans}
  onPlanChange={(planId) => {
    // Handle plan change
    console.log('Plan changed to:', planId);
  }}
  title="Upgrade Your Plan"
/>
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `currentPlan` | `Plan` | ✅ | The user's current plan object |
| `plans` | `Plan[]` | ✅ | Array of available plans to choose from |
| `onPlanChange` | `(planId: string) => void` | ✅ | Callback function when a plan is selected |
| `className` | `string` | ❌ | Additional CSS classes for styling |
| `title` | `string` | ❌ | Custom title for the card (default: "Upgrade Plan") |

## Theming

The update plan card component is styled using the `shadcn/ui` library. You can customize the colors and fonts by overriding the CSS variables. You can also get the theme from the [Theming](/docs/theming) page.


## Example
<include cwd lang="tsx" meta='title="src/components/update-plan-card-demo.tsx"'>src/components/update-plan-card-demo.tsx</include>
</file>

<file path="content/docs/components/update-plan/update-plan-dialog.mdx">
---
title: Update Plan Dialog
description: The Update Plan Dialog component provides an interactive interface for users to upgrade or change their subscription plan. It features plan comparison, monthly/yearly toggle, and smooth animations for a seamless user experience.
---

<Tabs items={['Preview', 'Code']} className="bg-transparent border-none">
  <Tab value="Preview" className="border-none bg-transparent p-0 mt-3">
    <PreviewComponents registryName="update-plan-dialog">
      <UpdatePlanDialogDemo />
    </PreviewComponents>
  </Tab>

  <Tab value="Code" className="mt-3">
  <include cwd lang="tsx" meta='title="src/components/update-plan-dialog-demo.tsx"'>src/components/update-plan-dialog-demo.tsx</include>

  </Tab>
</Tabs>

## Installation

<Tabs items={['npx', 'pnpm', 'yarn']} defaultValue="npx" groupId="installation-tabs">
  <Tab value="npx">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/update-plan-dialog.json
    ```
  </Tab>
  <Tab value="pnpm">
    ```bash
    pnpm dlx shadcn@latest add https://billingsdk.com/r/update-plan-dialog.json
    ```
  </Tab>
  <Tab value="yarn">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/update-plan-dialog.json
    ```
  </Tab>
</Tabs>

## Usage

```tsx
import { UpdatePlanDialog } from "@/components/billingsdk/update-plan-dialog";
import { plans } from "@/lib/billingsdk-config";
```

```tsx
<UpdatePlanDialog
  currentPlan={plans[0]}
  plans={plans}
  triggerText="Upgrade Plan"
  onPlanChange={(planId) => {
    // Handle plan change
    console.log('Plan changed to:', planId);
  }}
  title="Choose Your Plan"
/>
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `currentPlan` | `Plan` | ✅ | The user's current plan object |
| `plans` | `Plan[]` | ✅ | Array of available plans to choose from |
| `triggerText` | `string` | ✅ | Text displayed on the trigger button |
| `onPlanChange` | `(planId: string) => void` | ✅ | Callback function when a plan is selected |
| `className` | `string` | ❌ | Additional CSS classes for styling |
| `title` | `string` | ❌ | Custom title for the dialog (default: "Upgrade Plan") |

## Theming

The update plan dialog component is styled using the `shadcn/ui` library. You can customize the colors and fonts by overriding the CSS variables. You can also get the theme from the [Theming](/docs/theming) page.

## Example
<include cwd lang="tsx" meta='title="src/components/update-plan-dialog-demo.tsx"'>src/components/update-plan-dialog-demo.tsx</include>
</file>

<file path="content/docs/components/usage-meter/usage-meter-circle.mdx">
---
title: Usage Meter Circle
description: Displays usage progress in a circular meter with an animated ring, status badges, and size variants.
---

<Tabs items={['Preview', 'Code']} className="bg-transparent border-none">
  <Tab value="Preview" className="border-none bg-transparent p-0 mt-3">
    <PreviewComponents registryName="usage-meter-circle">
      <UsageMeterCircleDemo />
    </PreviewComponents>
  </Tab>

  <Tab value="Code" className="mt-3">
  <include cwd lang="tsx" meta='title="src/components/usage-meter-circle-demo.tsx"'>src/components/usage-meter-circle-demo.tsx</include>

  </Tab>
</Tabs>

## Installation

<Tabs items={['npx', 'pnpm', 'yarn']} defaultValue="npx" groupId="installation-tabs">
  <Tab value="npx">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/usage-meter-circle.json
    ```
  </Tab>
  <Tab value="pnpm">
    ```bash
    pnpm dlx shadcn@latest add https://billingsdk.com/r/usage-meter-circle.json
    ```
  </Tab>
  <Tab value="yarn">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/usage-meter-circle.json
    ```
  </Tab>
</Tabs>

## Usage

```tsx
import { UsageMeter } from "@/components/billingsdk/usage-meter";
```
```tsx
<UsageMeter
  usage={75}
  limit={100}
  title="Usage"
  description="You have used 75% of your limit"
  progressColor="usage"
  variant="circle"
  size="md"
  className="mx-auto"
/>
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `usage` | `number` | ✅ | The usage of the user |
| `limit` | `number` | ✅ | The limit of the user |
| `className` | `string` | ❌ | Additional CSS classes for styling |
| `title` | `string` | ❌ | Custom title for the usage meter |
| `description` | `string` | ❌ | Custom description for the usage meter |
| `variant` | `"linear" \| "circle"` | ❌ | Variant of the usage meter (default: "linear") |
| `size` | `"sm" \| "md" \| "lg"` | ❌ | Size of the usage meter (default: "md") |
| `progressColor` | `"default" \| "usage"` | ❌ | Color of the progress bar (default: "default") |

## Theming

The usage meter circle component is styled using the `shadcn/ui` library. You can customize the colors and fonts by overriding the CSS variables. You can also get the theme from the [Theming](/docs/theming) page.


## Example
<include cwd lang="tsx" meta='title="src/components/usage-meter-circle-demo.tsx"'>src/components/usage-meter-circle-demo.tsx</include>
</file>

<file path="content/docs/components/usage-meter/usage-meter-linear.mdx">
---
title: Usage Meter Linear
description: Displays usage progress with an animated linear bar, remaining quota, status badges, and size variants.
---

<Tabs items={['Preview', 'Code']} className="bg-transparent border-none">
  <Tab value="Preview" className="border-none bg-transparent p-0 mt-3">
    <PreviewComponents registryName="usage-meter-linear">
      <UsageMeterLinearDemo />
    </PreviewComponents>
  </Tab>

  <Tab value="Code" className="mt-3">
  <include cwd lang="tsx" meta='title="src/components/usage-meter-linear-demo.tsx"'>src/components/usage-meter-linear-demo.tsx</include>

  </Tab>
</Tabs>

## Installation

<Tabs items={['npx', 'pnpm', 'yarn']} defaultValue="npx" groupId="installation-tabs">
  <Tab value="npx">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/usage-meter-linear.json
    ```
  </Tab>
  <Tab value="pnpm">
    ```bash
    pnpm dlx shadcn@latest add https://billingsdk.com/r/usage-meter-linear.json
    ```
  </Tab>
  <Tab value="yarn">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/usage-meter-linear.json
    ```
  </Tab>
</Tabs>

## Usage

```tsx
import { UsageMeter } from "@/components/billingsdk/usage-meter";
```
```tsx
<UsageMeter
  usage={75}
  limit={100}
  title="Usage"
  description="You have used 75% of your limit"
  variant="linear"
  size="md"
  className="mx-auto"
/>
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `usage` | `number` | ✅ | The usage of the user |
| `limit` | `number` | ✅ | The limit of the user |
| `className` | `string` | ❌ | Additional CSS classes for styling |
| `title` | `string` | ❌ | Custom title for the usage meter |
| `description` | `string` | ❌ | Custom description for the usage meter |
| `variant` | `"linear" \| "circle"` | ❌ | Variant of the usage meter (default: "linear") |
| `size` | `"sm" \| "md" \| "lg"` | ❌ | Size of the usage meter (default: "md") |
| `progressColor` | `"default" \| "usage"` | ❌ | Color of the progress bar (default: "default") |

## Theming

The usage meter linear component is styled using the `shadcn/ui` library. You can customize the colors and fonts by overriding the CSS variables. You can also get the theme from the [Theming](/docs/theming) page.


## Example
<include cwd lang="tsx" meta='title="src/components/usage-meter-linear-demo.tsx"'>src/components/usage-meter-linear-demo.tsx</include>
</file>

<file path="content/docs/index.mdx">
---
title: Introduction
description: A comprehensive collection of modern billing and subscription management components built with React, TypeScript, and Tailwind CSS.
---

import { Cards, Card } from 'fumadocs-ui/components/card'
import { Callout } from 'fumadocs-ui/components/callout'

Billing SDK is a **comprehensive collection** of modern billing and subscription management components built with React, TypeScript, and Tailwind CSS, designed to be fast, flexible, and composes seamlessly into your Next.js applications.

<Callout title="Built on shadcn/ui">
  All components are built on top of shadcn/ui primitives for consistent design and seamless integration with your existing projects.
</Callout>

## Components Overview

Billing SDK has different parts:

<Cards>
  <Card title="Pricing Tables">
    Beautiful pricing table designs with multiple themes and size variants, perfect for conversion-optimized landing pages.
  </Card>

  <Card title="Subscription Management">
    Complete interfaces for managing subscriptions, plan upgrades, billing details, and user account information.
  </Card>

  <Card title="Usage Monitoring">
    Linear and circular usage meters with animated progress indicators to display quota consumption and limits.
  </Card>

  <Card title="Cancellation Flow">
    User-friendly cancellation experiences with retention features and two-step confirmation processes.
  </Card>
</Cards>

### Key Features

- 🎨 **Multiple Themes** - Support for classic, minimal, and custom themes
- 📱 **Responsive Design** - Works seamlessly across all device sizes
- ⚡ **Easy Integration** - Single command installation with shadcn/ui
- 🔧 **Fully Customizable** - Modify colors, fonts, and styling through CSS variables
- 🛡️ **TypeScript Ready** - Built with TypeScript for better development experience

### Terminology

**[Plan Interface](/docs/interfaces):** The core data structure that defines pricing plans with features, pricing tiers, and billing information used across all components.

### LLMs-full.txt
Billing SDK provides an LLMs.txt file that helps AI models understand how to interact with these components. You can find it at https://billingsdk.com/llms-full.txt

Although not required, some basic knowledge of React and TypeScript would be useful for further customizations.
</file>

<file path="content/docs/interfaces.mdx">
---
title: TypeScript Interfaces
description: Complete TypeScript definitions for all Billing SDK components and data structures
---

## Plan Interface

The `Plan` interface is used to define the structure of a pricing plan and is shared across all the `PricingTable` components.

```tsx
interface Plan {
    id: string
    title: string
    description: string
    highlight?: boolean
    type?: 'monthly' | 'yearly'
    currency?: string
    monthlyPrice: string
    yearlyPrice: string
    buttonText: string
    badge?: string
    features: {
        name: string
        icon: string
        iconColor?: string
    }[],
    benefits?: string[]
}
```

Whenever you add a new component which uses the `Plan` interface, a file `/lib/billingsdk-config.ts` will be created with the `plans` array.

## CurrentPlan Interface

The `CurrentPlan` interface is used to define the structure of a user's current subscription plan and billing information. It combines plan details with subscription-specific data.

```tsx
interface CurrentPlan {
    plan: Plan
    type: 'monthly' | 'yearly' | 'custom'
    price?: string
    nextBillingDate: string
    paymentMethod: string
    status: 'active' | 'inactive' | 'past_due' | 'cancelled'
}
```

### Properties

- **plan**: The complete `Plan` object containing plan details
- **type**: The billing cycle type (`monthly`, `yearly`, or `custom`)
- **price**: Optional current price (useful for custom pricing)
- **nextBillingDate**: The date when the next billing cycle starts
- **paymentMethod**: The payment method used for the subscription
- **status**: The current status of the subscription plan

A sample of the `/lib/billingsdk-config.ts` file is:

```ts
// lib/billingsdk-config.ts
export interface Plan {
    id: string
    title: string
    description: string
    highlight?: boolean
    type?: 'monthly' | 'yearly'
    currency?: string
    monthlyPrice: string
    yearlyPrice: string
    buttonText: string
    badge?: string
    features: {
        name: string
        icon: string
        iconColor?: string
    }[]
}

export interface CurrentPlan {
    plan: Plan
    type: 'monthly' | 'yearly' | 'custom'
    price?: string
    nextBillingDate: string
    paymentMethod: string
    status: 'active' | 'inactive' | 'past_due' | 'cancelled'
}

export const plans: Plan[] = [
    {
        id: 'starter',
        title: 'Starter',
        description: 'For developers testing out Liveblocks locally.',
        currency: '$',
        monthlyPrice: '0',
        yearlyPrice: '0',
        buttonText: 'Start today for free',
        features: [
            {
                name: 'Presence',
                icon: "check",
                iconColor: 'text-green-500'
            },
            {
                name: 'Comments',
                icon: "check",
                iconColor: 'text-orange-500'
            },
            {
                name: 'Notifications',
                icon: "check",
                iconColor: 'text-teal-500'
            },
            {
                name: 'Text Editor',
                icon: "check",
                iconColor: 'text-blue-500'
            },
            {
                name: 'Sync Datastore',
                icon: "check",
                iconColor: 'text-zinc-500'
            }
        ],
    },
    {
        id: 'pro',
        title: 'Pro',
        description: 'For companies adding collaboration in production.',
        currency: '$',
        monthlyPrice: '20',
        yearlyPrice: '199',
        buttonText: 'Sign up',
        badge: 'Most popular',
        highlight: true,
        features: [
            {
                name: 'Presence',
                icon: "check",
                iconColor: 'text-green-500'
            },
            {
                name: 'Comments',
                icon: "check",
                iconColor: 'text-orange-500'
            },
            {
                name: 'Notifications',
                icon: "check",
                iconColor: 'text-teal-500'
            },
            {
                name: 'Text Editor',
                icon: "check",
                iconColor: 'text-blue-500'
            },
            {
                name: 'Sync Datastore',
                icon: "check",
                iconColor: 'text-zinc-500'
            }
        ],
    },
    {
        id: 'enterprise',
        title: 'Enterprise',
        description: 'For organizations that need more support and compliance features.',
        currency: '$',
        monthlyPrice: 'Custom',
        yearlyPrice: 'Custom',
        buttonText: 'Contact sales',
        features: [
            {
                name: 'Presence',
                icon: "check",
                iconColor: 'text-green-500'
            },
            {
                name: 'Comments',
                icon: "check",
                iconColor: 'text-orange-500'
            },
            {
                name: 'Notifications',
                icon: "check",
                iconColor: 'text-teal-500'
            },
            {
                name: 'Text Editor',
                icon: "check",
                iconColor: 'text-blue-500'
            },
            {
                name: 'Sync Datastore',
                icon: "check",
                iconColor: 'text-zinc-500'
            }
        ],
    }
];
```
</file>

<file path="content/docs/meta.json">
{
  "pages": [
    "---Getting Started---",
    "index",
    "quick-start",
    "contribution-open-source", 
    "---Pricing Tables---",
    "components/pricing-table/pricing-table-one",
    "components/pricing-table/pricing-table-two",
    "components/pricing-table/pricing-table-three",
    "---Subscription Management---",
    "components/manage-subscription/index",
    "---Update Plan---",
    "components/update-plan/update-plan-card",
    "components/update-plan/update-plan-dialog",
    "---Cancel Subscription---",
    "components/cancel-subscription/cancel-subscription-card",
    "components/cancel-subscription/cancel-subscription-dialog",
    "---Usage Meter---",
    "components/usage-meter/usage-meter-circle",
    "components/usage-meter/usage-meter-linear",
  "---Banner---",
  "components/banner/index",
  "---Payment Method Manager---",
  "components/payment-method-manager/index",
  "---Configuration---",
  "interfaces",
  "theming"
  ]
}
</file>

<file path="public/r/banner.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "banner",
  "type": "registry:block",
  "title": "Top Banner",
  "description": "A banner component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/banner.tsx",
      "content": "\"use client\"\r\n\r\nimport type React from \"react\"\r\n\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { X } from \"lucide-react\"\r\nimport { useState, useEffect } from \"react\"\r\nimport { motion, AnimatePresence } from \"motion/react\"\r\n\r\ninterface BannerProps {\r\n  variant?: \"default\" | \"minimal\" | \"popup\"\r\n  title: string\r\n  description?: string\r\n  buttonText?: string\r\n  buttonIcon?: React.ReactNode\r\n  buttonLink?: string\r\n  className?: string\r\n  autoDismiss?: number // in ms\r\n  onDismiss?: () => void\r\n  gradientColors?: string[]\r\n}\r\n\r\nexport function Banner({\r\n  variant = \"default\",\r\n  title,\r\n  description,\r\n  buttonText,\r\n  buttonIcon,\r\n  buttonLink,\r\n  className,\r\n  autoDismiss,\r\n  onDismiss,\r\n  gradientColors,\r\n}: BannerProps) {\r\n  const [isVisible, setIsVisible] = useState(true)\r\n\r\n  useEffect(() => {\r\n    if (isVisible && autoDismiss) {\r\n      const timer = setTimeout(() => handleDismiss(), autoDismiss)\r\n      return () => clearTimeout(timer)\r\n    }\r\n  }, [isVisible, autoDismiss])\r\n\r\n  const handleDismiss = () => {\r\n    setIsVisible(false)\r\n    onDismiss?.()\r\n  }\r\n\r\n  const getVariantStyles = () => {\r\n    const hasGradient = gradientColors && gradientColors.length > 0\r\n\r\n    switch (variant) {\r\n      case \"minimal\":\r\n        return {\r\n          container: hasGradient\r\n            ? \"sticky top-0 z-50 w-full border-b backdrop-blur supports-[backdrop-filter]:bg-card/60\"\r\n            : \"sticky top-0 z-50 w-full border-b bg-card/95 backdrop-blur supports-[backdrop-filter]:bg-card/60\",\r\n          wrapper:\r\n            \"relative container mx-auto flex flex-col sm:flex-row items-start sm:items-center justify-center px-3 sm:px-4 py-2 gap-2 sm:gap-4 max-w-2xl\",\r\n          content: \"flex flex-col sm:flex-row items-start sm:items-center gap-1 sm:gap-2\",\r\n          title: \"text-sm font-medium text-card-foreground leading-tight\",\r\n          description: \"text-xs text-muted-foreground sm:ml-2\",\r\n          actions: \"flex items-center gap-2 self-end sm:self-auto\",\r\n        }\r\n      case \"popup\":\r\n        return {\r\n          container: hasGradient\r\n            ? \"fixed top-4 left-1/2 -translate-x-1/2 z-50 max-w-sm sm:max-w-md w-[90%] sm:w-auto border border-border rounded-lg shadow-lg backdrop-blur\"\r\n            : \"fixed top-4 left-1/2 -translate-x-1/2 z-50 max-w-sm sm:max-w-md w-[90%] sm:w-auto bg-popover border border-border rounded-lg shadow-lg backdrop-blur\",\r\n          wrapper:\r\n            \"relative flex flex-col sm:flex-row items-start sm:items-center justify-between px-3 sm:px-4 py-3 gap-3 sm:gap-4\",\r\n          content: \"flex flex-col sm:flex-row items-start sm:items-center gap-2 flex-1\",\r\n          title:\"text-sm font-medium text-popover-foreground leading-snug\",\r\n          description:\"text-xs text-muted-foreground\",\r\n          actions: \"flex items-center gap-2 self-end sm:self-auto flex-shrink-0 pr-8\",\r\n        }\r\n      default:\r\n        return {\r\n          container: hasGradient\r\n            ? \"sticky top-0 z-50 w-full border-b text-primary-foreground shadow-sm text-left backdrop-blur\"\r\n            : \"sticky top-0 z-50 w-full border-b bg-primary text-primary-foreground shadow-sm text-left backdrop-blur\",\r\n          wrapper:\r\n            \"relative container mx-auto flex flex-col sm:flex-row items-start sm:items-center justify-between px-3 sm:px-4 py-2 sm:py-3 gap-2 sm:gap-4\",\r\n          content: \"flex flex-col sm:flex-row items-start sm:items-center gap-2 w-full\",\r\n          title: hasGradient\r\n            ? \"text-sm font-medium text-foreground leading-tight\"\r\n            : \"text-sm font-medium text-primary-foreground leading-tight\",\r\n          description: hasGradient\r\n            ? \"text-xs text-foreground/80\"\r\n            : \"text-xs text-primary-foreground/80\",\r\n          actions: \"flex items-center gap-2 self-end sm:self-auto pr-8\",\r\n        }\r\n    }\r\n  }\r\n\r\n  const styles = getVariantStyles()\r\n\r\n  const getGradientBackground = () => {\r\n    if (!gradientColors || gradientColors.length === 0) return null\r\n\r\n    // Use the exact gradient from the example or custom colors with proper spacing\r\n    let gradientStops\r\n    if (gradientColors.length === 4) {\r\n      // Match the original example exactly\r\n      gradientStops = `${gradientColors[0]} 0%, ${gradientColors[1]} 12.5%, ${gradientColors[2]} 25%, ${gradientColors[3]} 37.5%, ${gradientColors[0]} 50%`\r\n    } else {\r\n      // For other numbers of colors, use equal spacing\r\n      gradientStops = gradientColors.map((color, index) => {\r\n        const percentage = (index / gradientColors.length) * 100\r\n        return `${color} ${percentage}%`\r\n      }).join(', ')\r\n    }\r\n\r\n    // Use consistent filter for better visibility\r\n    const filterValue = 'saturate(1.8) brightness(1.2)'\r\n\r\n    return (\r\n      <div\r\n        className=\"absolute inset-0 z-[-1]\"\r\n        style={{\r\n          maskImage: 'linear-gradient(to bottom, white, transparent), radial-gradient(circle at top center, white, transparent)',\r\n          maskComposite: 'intersect',\r\n          animation: 'fd-moving-banner 30s linear infinite',\r\n          backgroundImage: `repeating-linear-gradient(70deg, ${gradientStops})`,\r\n          backgroundSize: '200% 100%',\r\n          filter: filterValue\r\n        }}\r\n      />\r\n    )\r\n  }\r\n\r\n  const getAnimationProps = () => {\r\n    switch (variant) {\r\n      case \"popup\":\r\n        return {\r\n          initial: { opacity: 0, scale: 0.95, y: -20 },\r\n          animate: { opacity: 1, scale: 1, y: 0 },\r\n          exit: { opacity: 0, scale: 0.95, y: -20 },\r\n        }\r\n      default:\r\n        return {\r\n          initial: { opacity: 0, y: -12 },\r\n          animate: { opacity: 1, y: 0 },\r\n          exit: { opacity: 0, y: -12 },\r\n        }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <AnimatePresence>\r\n      {isVisible && (\r\n        <motion.div\r\n          {...getAnimationProps()}\r\n          transition={{ duration: 0.15, ease: \"easeOut\" }}\r\n          className={cn(styles.container, className)}\r\n        >\r\n          {getGradientBackground()}\r\n          <div className={styles.wrapper}>\r\n            {/* Content */}\r\n            <div className={styles.content}>\r\n              <div className={variant === \"minimal\" ? \"flex flex-col md:flex-row gap-0.5 md:gap-2\" : \"\"}>\r\n                <p className={styles.title}>{title}</p>\r\n                {description && <p className={styles.description}>{description}</p>}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Actions */}\r\n            <div className={styles.actions}>\r\n              {buttonText && variant !== \"minimal\" && (\r\n                <Button\r\n                  variant={variant === \"default\" ? \"secondary\" : \"default\"}\r\n                  size=\"sm\"\r\n                  onClick={() => window.open(buttonLink, \"_blank\")}\r\n                  className={\"h-8\"}\r\n                >\r\n                  {buttonIcon && <div className=\"flex-shrink-0 mr-1\">{buttonIcon}</div>}\r\n                  {buttonText}\r\n                </Button>\r\n              )}\r\n            </div>\r\n\r\n            {/* Close button (always top-right) */}\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"icon\"\r\n              onClick={handleDismiss}\r\n              className={cn(\r\n                \"absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8\",\r\n                gradientColors && gradientColors.length > 0\r\n                  ? \"hover:bg-foreground/20 text-foreground\"\r\n                  : variant === \"default\" && \"hover:bg-primary-foreground/20 text-primary-foreground\",\r\n                variant === \"popup\" && !gradientColors && \"hover:bg-accent text-popover-foreground\",\r\n                variant === \"minimal\" && !gradientColors && \"hover:bg-accent text-card-foreground\",\r\n              )}\r\n            >\r\n              <X className=\"h-4 w-4\" />\r\n              <span className=\"sr-only\">Dismiss</span>\r\n            </Button>\r\n          </div>\r\n        </motion.div>\r\n      )}\r\n    </AnimatePresence>\r\n  )\r\n}\r\n\r\n// Add CSS keyframes for the moving banner animation\r\nif (typeof document !== 'undefined') {\r\n  const styleSheet = document.createElement('style')\r\n  styleSheet.textContent = `\r\n    @keyframes fd-moving-banner {\r\n      0% {\r\n        background-position: 0% 50%;\r\n      }\r\n      50% {\r\n        background-position: 100% 50%;\r\n      }\r\n      100% {\r\n        background-position: 0% 50%;\r\n      }\r\n    }\r\n  `\r\n  document.head.appendChild(styleSheet)\r\n}\r\n",
      "type": "registry:component",
      "target": "components/billingsdk/banner.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/banner-demo.tsx",
      "content": "import { Banner } from \"@/components/billingsdk/banner\"\r\n\r\nexport default function FreeTrialBannerDemo() {\r\n    return (\r\n        <div className=\"w-full h-full flex flex-col gap-6 min-h-[500px] rounded-lg overflow-hidden bg-background-secondary border-2\">\r\n            <Banner\r\n                title=\"🎉 Start your free trial today!\"\r\n                description=\"Get 30 days free access to all premium features\"\r\n                buttonText=\"Start Free Trial\"\r\n                buttonLink=\"https://example.com/signup\"\r\n                variant=\"default\" // default, minimal, popup\r\n            />\r\n\r\n            {/* minimal hero example */}\r\n            <section className=\"flex flex-col items-center justify-center text-center gap-4 py-16\">\r\n                <h1 className=\"text-3xl font-bold tracking-tight text-foreground-secondary\">\r\n                    Create next-generation digital products\r\n                </h1>\r\n                <div className=\"flex flex-col gap-2\">\r\n\r\n                    <p className=\"text-muted-foreground max-w-md\">\r\n                        Build faster with our platform\r\n                    </p>\r\n                    <a\r\n                        className=\"underline underline-offset-4 hover:text-primary transition\"\r\n                    >\r\n                        Get Started →\r\n                    </a>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/banner-demo.tsx"
    }
  ]
}
</file>

<file path="public/r/cancel-subscription-card.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cancel-subscription-card",
  "type": "registry:block",
  "title": "Cancel Subscription Card",
  "description": "A cancel subscription card component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "badge",
    "card",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/cancel-subscription-card.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { type Plan } from \"@/lib/billingsdk-config\";\nimport { cn } from \"@/lib/utils\";\nimport { Circle } from \"lucide-react\";\n\nexport interface CancelSubscriptionCardProps {\n    title: string;\n    description: string;\n    plan: Plan;\n    leftPanelImageUrl?: string;\n    warningTitle?: string;\n    warningText?: string;\n    keepButtonText?: string;\n    continueButtonText?: string;\n    finalTitle?: string;\n    finalSubtitle?: string;\n    finalWarningText?: string;\n    goBackButtonText?: string;\n    confirmButtonText?: string;\n    onCancel: (planId: string) => Promise<void> | void;\n    onKeepSubscription?: (planId: string) => Promise<void> | void;\n    className?: string;\n}\n\nexport function CancelSubscriptionCard({\n    title,\n    description,\n    plan,\n    leftPanelImageUrl,\n    warningTitle,\n    warningText,\n    keepButtonText,\n    continueButtonText,\n    finalTitle,\n    finalSubtitle,\n    finalWarningText,\n    goBackButtonText,\n    confirmButtonText,\n    onCancel,\n    onKeepSubscription,\n    className,\n}: CancelSubscriptionCardProps) {\n    const [showConfirmation, setShowConfirmation] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n\n    const handleContinueCancellation = () => {\n        setShowConfirmation(true);\n        setError(null);\n    };\n\n    const handleConfirmCancellation = async () => {\n        try {\n            setIsLoading(true);\n            setError(null);\n            await onCancel(plan.id);\n        } catch (err) {\n            setError(err instanceof Error ? err.message : 'Failed to cancel subscription');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleKeepSubscription = async () => {\n        try {\n            setIsLoading(true);\n            setError(null);\n            if (onKeepSubscription) {\n                await onKeepSubscription(plan.id);\n            }\n        } catch (err) {\n            setError(err instanceof Error ? err.message : 'Failed to keep subscription');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleGoBack = () => {\n        setShowConfirmation(false);\n        setError(null);\n    };\n\n    return (\n        <Card className={cn(\"sm:max-w-[1000px] flex flex-col md:flex-row p-0 overflow-hidden w-full\", leftPanelImageUrl ? \"\" : \"sm:max-w-[500px]\", className)}>\n            {leftPanelImageUrl && (\n                <div className=\"w-full md:w-1/2 min-h-[500px] relative hidden md:block overflow-hidden\">\n                    <img src={leftPanelImageUrl} alt=\"Cancel Subscription\" className=\"absolute inset-0 w-full h-full object-cover\" />\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-background/30 to-background/90 dark:block hidden\"></div>\n                    <div className=\"absolute inset-0 bg-gradient-to-t from-background/80 via-transparent to-background/20 dark:block hidden\"></div>\n                </div>\n            )}\n            <CardContent className={cn(\"py-6 px-4 flex flex-col gap-4\", leftPanelImageUrl ? \"w-full md:w-1/2\" : \"w-full\")}>\n                <div className=\"flex flex-col gap-2 text-center md:text-left\">\n                    <h2 className=\"md:text-2xl text-xl font-semibold\">{title}</h2>\n                    <p className=\"md:text-sm text-xs text-muted-foreground\">{description}</p>\n                    {error && (\n                        <div className=\"p-3 bg-destructive/10 border border-destructive/20 rounded-md\">\n                            <p className=\"text-sm text-destructive\">{error}</p>\n                        </div>\n                    )}\n                </div>\n\n                {/* Plan Details */}\n                {!showConfirmation && (\n                    <div className=\"flex flex-col gap-4 p-4 bg-muted/50 rounded-lg\">\n                        <div className=\"flex items-center justify-between\">\n                            <div className=\"flex flex-col gap-1\">\n                                <span className=\"font-semibold text-lg\">{plan.title} Plan</span>\n                                <span className=\"text-sm text-muted-foreground\">Current subscription</span>\n                            </div>\n                            <Badge variant=\"secondary\">\n                                {parseFloat(plan.monthlyPrice) >= 0 ? `${plan.currency}${plan.monthlyPrice}/monthly` : `${plan.monthlyPrice}/monthly`}\n                            </Badge>\n                        </div>\n                        <div className=\"flex flex-col gap-2\">\n                            {plan.features.slice(0, 4).map((feature, index) => (\n                                <div key={index} className=\"flex items-center gap-2\">\n                                    <Circle className=\"w-2 h-2 fill-primary text-primary\" />\n                                    <span className=\"text-sm text-muted-foreground\">{feature.name}</span>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                )}\n\n                {/* Warning Section */}\n                {!showConfirmation && (warningTitle || warningText) && (\n                    <div className=\"p-4 bg-muted/30 border border-border rounded-lg\">\n                        {warningTitle && (\n                            <h3 className=\"font-semibold text-foreground mb-2\">\n                                {warningTitle}\n                            </h3>\n                        )}\n                        {warningText && (\n                            <p className=\"text-sm text-muted-foreground\">\n                                {warningText}\n                            </p>\n                        )}\n                    </div>\n                )}\n                {/* Action Buttons */}\n                {!showConfirmation ? (\n                    <div className=\"flex flex-col sm:flex-row gap-3 mt-auto\">\n                        <Button\n                            className=\"flex-1\"\n                            onClick={handleKeepSubscription}\n                            disabled={isLoading}\n                        >\n                            {isLoading ? \"Processing...\" : (keepButtonText || \"Keep My Subscription\")}\n                        </Button>\n                        <Button\n                            variant=\"destructive\"\n                            className=\"flex-1\"\n                            onClick={handleContinueCancellation}\n                            disabled={isLoading}\n                        >\n                            {continueButtonText || \"Continue Cancellation\"}\n                        </Button>\n                    </div>\n                ) : (\n                    <div className=\"flex flex-col gap-4 mt-auto\">\n                        <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n                            <h3 className=\"font-semibold mb-2 text-foreground\">\n                                {finalTitle || \"Final Confirmation\"}\n                            </h3>\n                            <p className=\"text-sm text-muted-foreground mb-2\">\n                                {finalSubtitle || \"Are you sure you want to cancel your subscription?\"}\n                            </p>\n                            <p className=\"text-sm text-destructive\">\n                                {finalWarningText || \"This action cannot be undone and you'll lose access to all premium features.\"}\n                            </p>\n                        </div>\n                        <div className=\"flex flex-col sm:flex-row gap-3\">\n                            <Button\n                                variant=\"outline\"\n                                className=\"flex-1\"\n                                onClick={handleGoBack}\n                                disabled={isLoading}\n                            >\n                                {goBackButtonText || \"Go Back\"}\n                            </Button>\n                            <Button\n                                variant=\"destructive\"\n                                className=\"flex-1\"\n                                onClick={handleConfirmCancellation}\n                                disabled={isLoading}\n                            >\n                                {isLoading ? \"Cancelling...\" : (confirmButtonText || \"Yes, Cancel Subscription\")}\n                            </Button>\n                        </div>\n                    </div>\n                )}\n            </CardContent>\n        </Card>\n    )\n}\n",
      "type": "registry:component",
      "target": "components/billingsdk/cancel-subscription-card.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/cancel-subscription-card-demo.tsx",
      "content": "\"use client\";\n\nimport { CancelSubscriptionCard } from \"@/components/billingsdk/cancel-subscription-card\";\nimport { plans } from \"@/lib/billingsdk-config\";\n\nexport function CancelSubscriptionCardDemo() {\n    return(\n\n      <div className=\"flex flex-col w-full\">\n      <CancelSubscriptionCard\n        title=\"We're sorry to see you go...\"\n        description={`Before you cancel, we hope you'll consider upgrading to a ${plans[1].title} plan again.`}\n        plan={plans[1]}\n        leftPanelImageUrl=\"https://framerusercontent.com/images/GWE8vop9hubsuh3uWWn0vyuxEg.webp\"\n        warningTitle=\"You will lose access to your account\"\n        warningText=\"If you cancel your subscription, you will lose access to your account and all your data will be deleted.\"\n        keepButtonText={`Keep My ${plans[1].title} Plan`}\n        continueButtonText=\"Continue with Cancellation\"\n        finalTitle=\"Final Step - Confirm Cancellation\"\n        finalSubtitle=\"This action will immediately cancel your subscription\"\n        finalWarningText=\"You'll lose access to all Pro features and your data will be permanently deleted after 30 days.\"\n        goBackButtonText=\"Wait, Go Back\"\n        confirmButtonText=\"Yes, Cancel My Subscription\"\n        onCancel={async (planId) => {\n          console.log('Cancelling subscription for plan:', planId);\n          return new Promise((resolve) => {\n            setTimeout(() => {\n              resolve(void 0);\n            }, 1000);\n          });\n        }}\n        onKeepSubscription={async (planId) => {\n          console.log('Keeping subscription for plan:', planId);\n        }}\n        className=\"max-w-4xl\"\n      />\n    </div>\n    )\n}\n",
      "type": "registry:component",
      "target": "components/cancel-subscription-card-demo.tsx"
    },
    {
      "path": "src/registry/lib/billingsdk-config.ts",
      "content": "export interface Plan {\n    id: string\n    title: string\n    description: string\n    highlight?: boolean\n    type?: 'monthly' | 'yearly'\n    currency?: string\n    monthlyPrice: string\n    yearlyPrice: string\n    buttonText: string\n    badge?: string\n    features: {\n        name: string\n        icon: string\n        iconColor?: string\n    }[]\n}\n\nexport interface CurrentPlan {\n    plan: Plan\n    type: 'monthly' | 'yearly' | 'custom'\n    price?: string\n    nextBillingDate: string\n    paymentMethod: string\n    status: 'active' | 'inactive' | 'past_due' | 'cancelled'\n}\n\nexport const plans: Plan[] = [\n    {\n        id: 'starter',\n        title: 'Starter',\n        description: 'For developers testing out Liveblocks locally.',\n        currency: '$',\n        monthlyPrice: '0',\n        yearlyPrice: '0',\n        buttonText: 'Start today for free',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    },\n    {\n        id: 'pro',\n        title: 'Pro',\n        description: 'For companies adding collaboration in production.',\n        currency: '$',\n        monthlyPrice: '20',\n        yearlyPrice: '199',\n        buttonText: 'Sign up',\n        badge: 'Most popular',\n        highlight: true,\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    },\n    {\n        id: 'enterprise',\n        title: 'Enterprise',\n        description: 'For organizations that need more support and compliance features.',\n        currency: '$',\n        monthlyPrice: 'Custom',\n        yearlyPrice: 'Custom',\n        buttonText: 'Contact sales',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    }\n];\n",
      "type": "registry:lib",
      "target": "lib/billingsdk-config.ts"
    }
  ]
}
</file>

<file path="public/r/cancel-subscription-dialog.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cancel-subscription-dialog",
  "type": "registry:block",
  "title": "Cancel Subscription Dialog",
  "description": "A cancel subscription dialog component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "badge",
    "dialog",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/cancel-subscription-dialog.tsx",
      "content": "\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport {\r\n    Dialog,\r\n    DialogClose,\r\n    DialogContent,\r\n    DialogTitle,\r\n    DialogTrigger,\r\n} from \"@/components/ui/dialog\"\r\nimport { type Plan } from \"@/lib/billingsdk-config\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { X, Circle } from \"lucide-react\";\r\nimport { useTheme } from \"@/contexts/theme-context\";\r\nimport { getThemeStyles } from \"@/lib/themes\";\r\n\r\nexport interface CancelSubscriptionDialogProps {\r\n    title: string;\r\n    description: string;\r\n    plan: Plan;\r\n    triggerButtonText?: string;\r\n    leftPanelImageUrl?: string;\r\n    warningTitle?: string;\r\n    warningText?: string;\r\n    keepButtonText?: string;\r\n    continueButtonText?: string;\r\n    finalTitle?: string;\r\n    finalSubtitle?: string;\r\n    finalWarningText?: string;\r\n    goBackButtonText?: string;\r\n    confirmButtonText?: string;\r\n    onCancel: (planId: string) => Promise<void> | void;\r\n    onKeepSubscription?: (planId: string) => Promise<void> | void;\r\n    onDialogClose?: () => void;\r\n    className?: string;\r\n}\r\n\r\nexport function CancelSubscriptionDialog({\r\n    title,\r\n    description,\r\n    plan,\r\n    triggerButtonText,\r\n    leftPanelImageUrl,\r\n    warningTitle,\r\n    warningText,\r\n    keepButtonText,\r\n    continueButtonText,\r\n    finalTitle,\r\n    finalSubtitle,\r\n    finalWarningText,\r\n    goBackButtonText,\r\n    confirmButtonText,\r\n    onCancel,\r\n    onKeepSubscription,\r\n    onDialogClose,\r\n    className,\r\n}: CancelSubscriptionDialogProps) {\r\n    const [showConfirmation, setShowConfirmation] = useState(false);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const { currentTheme, previewDarkMode } = useTheme();\r\n    const themeStyles = getThemeStyles(currentTheme, previewDarkMode);\r\n\r\n    const handleContinueCancellation = () => {\r\n        setShowConfirmation(true);\r\n        setError(null);\r\n    };\r\n\r\n    const handleConfirmCancellation = async () => {\r\n        try {\r\n            setIsLoading(true);\r\n            setError(null);\r\n            await onCancel(plan.id);\r\n            handleDialogClose();\r\n        } catch (err) {\r\n            setError(err instanceof Error ? err.message : 'Failed to cancel subscription');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleKeepSubscription = async () => {\r\n        try {\r\n            setIsLoading(true);\r\n            setError(null);\r\n            if (onKeepSubscription) {\r\n                await onKeepSubscription(plan.id);\r\n            }\r\n            handleDialogClose();\r\n        } catch (err) {\r\n            setError(err instanceof Error ? err.message : 'Failed to keep subscription');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleDialogClose = () => {\r\n        setIsOpen(false);\r\n        setShowConfirmation(false);\r\n        setError(null);\r\n        setIsLoading(false);\r\n        onDialogClose?.();\r\n    };\r\n\r\n    const handleGoBack = () => {\r\n        setShowConfirmation(false);\r\n        setError(null);\r\n    };\r\n\r\n    // Handle keyboard shortcuts\r\n    useEffect(() => {\r\n        const handleKeyDown = (event: KeyboardEvent) => {\r\n            if (!isOpen) return;\r\n\r\n            if (event.key === 'Escape') {\r\n                event.preventDefault();\r\n                handleDialogClose();\r\n            }\r\n        };\r\n\r\n        document.addEventListener('keydown', handleKeyDown);\r\n        return () => document.removeEventListener('keydown', handleKeyDown);\r\n    }, [isOpen]);\r\n\r\n    return (\r\n        <Dialog open={isOpen} onOpenChange={(open) => {\r\n            if (open) {\r\n                setIsOpen(true);\r\n            } else {\r\n                handleDialogClose();\r\n            }\r\n        }}>\r\n            <DialogTrigger asChild>\r\n                <Button variant=\"outline\">{triggerButtonText || \"Cancel Subscription\"}</Button>\r\n            </DialogTrigger>\r\n            <DialogContent className={cn(\"sm:max-w-[1000px] flex flex-col md:flex-row p-0 overflow-hidden text-foreground w-[95%] md:w-[100%]\", leftPanelImageUrl ? \"\" : \"sm:max-w-[500px]\", className)} style={themeStyles}>\r\n                <DialogTitle className=\"sr-only\">{title}</DialogTitle>\r\n                <DialogClose\r\n                    className=\"absolute right-4 top-4 z-10 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\"\r\n                    onClick={handleDialogClose}\r\n                >\r\n                    <X className=\"h-4 w-4\" />\r\n                    <span className=\"sr-only\">Close</span>\r\n                </DialogClose>\r\n                {leftPanelImageUrl && (\r\n                    <div className=\"w-full md:w-1/2 min-h-[500px] relative hidden md:block overflow-hidden\">\r\n                        <img src={leftPanelImageUrl} alt=\"Cancel Subscription\" className=\"absolute inset-0 w-full h-full object-cover\" />\r\n                        <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-background/30 to-background/90 dark:block hidden\"></div>\r\n                        <div className=\"absolute inset-0 bg-gradient-to-t from-background/80 via-transparent to-background/20 dark:block hidden\"></div>\r\n                    </div>\r\n                )}\r\n                <div className={cn(\"py-6 px-4 flex flex-col gap-4\", leftPanelImageUrl ? \"w-full md:w-1/2\" : \"w-full\")}>\r\n                    <div className=\"flex flex-col gap-2 text-center md:text-left\">\r\n                        <h2 className=\"md:text-2xl text-xl font-semibold\">{title}</h2>\r\n                        <p className=\"md:text-sm text-xs text-muted-foreground\">{description}</p>\r\n                        {error && (\r\n                            <div className=\"p-3 bg-destructive/10 border border-destructive/20 rounded-md\">\r\n                                <p className=\"text-sm text-destructive\">{error}</p>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* Plan Details */}\r\n                    {!showConfirmation && (\r\n                        <div className=\"flex flex-col gap-4 p-4 bg-muted/50 rounded-lg\">\r\n                            <div className=\"flex items-center justify-between\">\r\n                                <div className=\"flex flex-col gap-1\">\r\n                                    <span className=\"font-semibold text-lg\">{plan.title} Plan</span>\r\n                                    <span className=\"text-sm text-muted-foreground\">Current subscription</span>\r\n                                </div>\r\n                                <Badge variant=\"secondary\">\r\n                                    {\r\n                                        parseFloat(plan.monthlyPrice) >= 0 ?\r\n                                            `${plan.currency}${plan.monthlyPrice}/monthly` :\r\n                                            `${plan.monthlyPrice}/monthly`\r\n                                    }\r\n                                </Badge>\r\n                            </div>\r\n                            <div className=\"flex flex-col gap-2\">\r\n                                {plan.features.slice(0, 4).map((feature, index) => (\r\n                                    <div key={index} className=\"flex items-center gap-2\">\r\n                                        <Circle className=\"w-2 h-2 fill-primary text-primary\" />\r\n                                        <span className=\"text-sm text-muted-foreground\">{feature.name}</span>\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Warning Section */}\r\n                    {!showConfirmation && (warningTitle || warningText) && (\r\n                        <div className=\"p-4 bg-muted/30 border border-border rounded-lg\">\r\n                            {warningTitle && (\r\n                                <h3 className=\"font-semibold text-foreground mb-2\">\r\n                                    {warningTitle}\r\n                                </h3>\r\n                            )}\r\n                            {warningText && (\r\n                                <p className=\"text-sm text-muted-foreground\">\r\n                                    {warningText}\r\n                                </p>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n                    {/* Action Buttons */}\r\n                    {!showConfirmation ? (\r\n                        <div className=\"flex flex-col sm:flex-row gap-3 mt-auto\">\r\n                            <Button\r\n                                className=\"flex-1\"\r\n                                onClick={handleKeepSubscription}\r\n                                disabled={isLoading}\r\n                            >\r\n                                {isLoading ? \"Processing...\" : (keepButtonText || \"Keep My Subscription\")}\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"destructive\"\r\n                                className=\"flex-1\"\r\n                                onClick={handleContinueCancellation}\r\n                                disabled={isLoading}\r\n                            >\r\n                                {continueButtonText || \"Continue Cancellation\"}\r\n                            </Button>\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"flex flex-col gap-4 mt-auto\">\r\n                            <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\r\n                                <h3 className=\"font-semibold mb-2 text-foreground\">\r\n                                    {finalTitle || \"Final Confirmation\"}\r\n                                </h3>\r\n                                <p className=\"text-sm text-muted-foreground mb-2\">\r\n                                    {finalSubtitle || \"Are you sure you want to cancel your subscription?\"}\r\n                                </p>\r\n                                <p className=\"text-sm text-destructive\">\r\n                                    {finalWarningText || \"This action cannot be undone and you'll lose access to all premium features.\"}\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"flex flex-col sm:flex-row gap-3\">\r\n                                <Button\r\n                                    variant=\"outline\"\r\n                                    className=\"flex-1\"\r\n                                    onClick={handleGoBack}\r\n                                    disabled={isLoading}\r\n                                >\r\n                                    {goBackButtonText || \"Go Back\"}\r\n                                </Button>\r\n                                <Button\r\n                                    variant=\"destructive\"\r\n                                    className=\"flex-1\"\r\n                                    onClick={handleConfirmCancellation}\r\n                                    disabled={isLoading}\r\n                                >\r\n                                    {isLoading ? \"Cancelling...\" : (confirmButtonText || \"Yes, Cancel Subscription\")}\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </DialogContent>\r\n        </Dialog>\r\n    )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/billingsdk/cancel-subscription-dialog.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/cancel-subscription-dialog-demo.tsx",
      "content": "\"use client\";\r\n\r\nimport { CancelSubscriptionDialog } from \"@/components/billingsdk/cancel-subscription-dialog\";\r\nimport { plans } from \"@/lib/billingsdk-config\";\r\n\r\nexport function CancelSubscriptionDialogDemo() {\r\n    return(\r\n\r\n      <div className=\"flex flex-1 flex-col justify-center text-center p-4 mx-auto min-h-[300px]\">\r\n      <CancelSubscriptionDialog\r\n        title=\"We're sorry to see you go...\"\r\n        description={`Before you cancel, we hope you'll consider upgrading to a ${plans[1].title} plan again.`}\r\n        plan={plans[1]}\r\n        triggerButtonText=\"Cancel Subscription\"\r\n        leftPanelImageUrl=\"https://framerusercontent.com/images/GWE8vop9hubsuh3uWWn0vyuxEg.webp\"\r\n        warningTitle=\"You will lose access to your account\"\r\n        warningText=\"If you cancel your subscription, you will lose access to your account and all your data will be deleted.\"\r\n        keepButtonText={`Keep My ${plans[1].title} Plan`}\r\n        continueButtonText=\"Continue with Cancellation\"\r\n        finalTitle=\"Final Step - Confirm Cancellation\"\r\n        finalSubtitle=\"This action will immediately cancel your subscription\"\r\n        finalWarningText=\"You'll lose access to all Pro features and your data will be permanently deleted after 30 days.\"\r\n        goBackButtonText=\"Wait, Go Back\"\r\n        confirmButtonText=\"Yes, Cancel My Subscription\"\r\n        onCancel={async (planId) => {\r\n          console.log('Cancelling subscription for plan:', planId);\r\n          return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n              resolve(void 0);\r\n            }, 1000);\r\n          });\r\n        }}\r\n        onKeepSubscription={async (planId) => {\r\n          console.log('Keeping subscription for plan:', planId);\r\n        }}\r\n        onDialogClose={() => {\r\n          console.log('Dialog closed');\r\n        }}\r\n        className=\"max-w-4xl\"\r\n      />\r\n    </div>\r\n    )\r\n}",
      "type": "registry:component",
      "target": "components/cancel-subscription-dialog-demo.tsx"
    },
    {
      "path": "src/registry/lib/billingsdk-config.ts",
      "content": "export interface Plan {\r\n    id: string\r\n    title: string\r\n    description: string\r\n    highlight?: boolean\r\n    type?: 'monthly' | 'yearly'\r\n    currency?: string\r\n    monthlyPrice: string\r\n    yearlyPrice: string\r\n    buttonText: string\r\n    badge?: string\r\n    features: {\r\n        name: string\r\n        icon: string\r\n        iconColor?: string\r\n    }[]\r\n}\r\n\r\nexport interface CurrentPlan {\r\n    plan: Plan\r\n    type: 'monthly' | 'yearly' | 'custom'\r\n    price?: string\r\n    nextBillingDate: string\r\n    paymentMethod: string\r\n    status: 'active' | 'inactive' | 'past_due' | 'cancelled'\r\n}\r\n\r\nexport const plans: Plan[] = [\r\n    {\r\n        id: 'starter',\r\n        title: 'Starter',\r\n        description: 'For developers testing out Liveblocks locally.',\r\n        currency: '$',\r\n        monthlyPrice: '0',\r\n        yearlyPrice: '0',\r\n        buttonText: 'Start today for free',\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        id: 'pro',\r\n        title: 'Pro',\r\n        description: 'For companies adding collaboration in production.',\r\n        currency: '$',\r\n        monthlyPrice: '20',\r\n        yearlyPrice: '199',\r\n        buttonText: 'Sign up',\r\n        badge: 'Most popular',\r\n        highlight: true,\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        id: 'enterprise',\r\n        title: 'Enterprise',\r\n        description: 'For organizations that need more support and compliance features.',\r\n        currency: '$',\r\n        monthlyPrice: 'Custom',\r\n        yearlyPrice: 'Custom',\r\n        buttonText: 'Contact sales',\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    }\r\n];\r\n",
      "type": "registry:lib",
      "target": "lib/billingsdk-config.ts"
    }
  ]
}
</file>

<file path="public/r/subscription-management.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "subscription-management",
  "type": "registry:block",
  "title": "Subscription Management",
  "description": "A subscription management component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "card",
    "badge",
    "separator",
    "utils",
    "https://billingsdk.com/r/cancel-subscription-dialog.json",
    "https://billingsdk.com/r/update-plan-dialog.json"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/subscription-management.tsx",
      "content": "\"use client\"\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Calendar, CreditCard } from \"lucide-react\"\nimport { CurrentPlan } from \"@/lib/billingsdk-config\"\nimport { cn } from \"@/lib/utils\"\nimport { CancelSubscriptionDialog, type CancelSubscriptionDialogProps } from \"@/components/billingsdk/cancel-subscription-dialog\"\nimport { UpdatePlanDialog, type UpdatePlanDialogProps } from \"@/components/billingsdk/update-plan-dialog\"\n\ninterface SubscriptionManagementProps {\n    className?: string\n    currentPlan: CurrentPlan\n    cancelSubscription: CancelSubscriptionDialogProps\n    updatePlan: UpdatePlanDialogProps\n}\n\nexport function SubscriptionManagement({ className, currentPlan, cancelSubscription, updatePlan }: SubscriptionManagementProps) {\n\n    return (<div className={cn(\"text-left w-full\", className)}>\n        <Card className=\"shadow-lg\">\n            <CardHeader className=\"pb-4 sm:pb-6 px-4 sm:px-6\">\n                <CardTitle className=\"flex items-center gap-2 sm:gap-3 text-lg sm:text-xl\">\n                    <div className=\"p-1.5 sm:p-2 rounded-lg bg-primary/10 ring-1 ring-primary/20\">\n                        <CreditCard className=\"h-4 w-4 sm:h-5 sm:w-5 text-primary\" />\n                    </div>\n                    Current Subscription\n                </CardTitle>\n                <CardDescription className=\"text-sm sm:text-base\">Manage your billing and subscription settings</CardDescription>\n            </CardHeader>\n\n            <CardContent className=\"space-y-6 sm:space-y-8 px-4 sm:px-6\">\n                {/* Current Plan Details with highlighted styling */}\n                <div className=\"relative p-3 sm:p-4 rounded-xl bg-gradient-to-r from-muted/30 via-muted/20 to-muted/30 border border-border/50 overflow-hidden\">\n                    <div className=\"relative\">\n                        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:gap-0\">\n                            <div className=\"w-full\">\n                                <div className=\"flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-3 mb-2\">\n                                    <div className=\"flex items-center gap-2\">\n                                        <h3 className=\"text-lg sm:text-xl font-semibold\">{currentPlan.plan.title} Plan</h3>\n                                    </div>\n                                    <div className=\"flex flex-wrap items-center gap-2\">\n                                        <Badge\n                                            variant={currentPlan.status === \"active\" ? \"default\" : \"outline\"}\n                                            className=\"shadow-sm text-xs sm:text-sm bg-primary/90 hover:bg-primary border-0 font-medium\"\n                                        >\n                                            {currentPlan.type === `monthly` ? `${currentPlan.plan.currency}${currentPlan.plan.monthlyPrice}/month` : currentPlan.type === `yearly` ? `${currentPlan.plan.yearlyPrice}/year` : `${currentPlan.price}`}\n                                        </Badge>\n                                        <Badge\n                                            variant=\"outline\"\n                                            className=\"shadow-sm text-xs sm:text-sm border-border/60 bg-background/50 backdrop-blur-sm\"\n                                        >\n                                            {currentPlan.status}\n                                        </Badge>\n                                    </div>\n                                </div>\n                                <div className=\"relative\">\n                                    <p className=\"text-xs sm:text-sm text-muted-foreground relative z-10\">\n                                        {currentPlan.plan.description}\n                                    </p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <Separator className=\"my-4 sm:my-6 bg-gradient-to-r from-transparent via-border to-transparent\" />\n\n                <div className=\"space-y-3 sm:space-y-4\">\n                    <h4 className=\"font-medium flex items-center gap-2 text-base sm:text-lg\">\n                        <div className=\"p-1 sm:p-1.5 rounded-md bg-muted ring-1 ring-border/50\">\n                            <Calendar className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                        </div>\n                        Billing Information\n                    </h4>\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-6\">\n                        <div className=\"group p-2.5 sm:p-3 rounded-lg md:bg-gradient-to-tl bg-gradient-to-b from-muted to-background/10 border border-border/30 hover:border-border/60 transition-all duration-200\">\n                            <span className=\"text-xs sm:text-sm text-muted-foreground block mb-1\">Next billing date</span>\n                            <div className=\"font-medium text-sm sm:text-base group-hover:text-primary transition-colors duration-200\">{currentPlan.nextBillingDate}</div>\n                        </div>\n                        <div className=\"group p-2.5 sm:p-3 rounded-lg md:bg-gradient-to-tr bg-gradient-to-b from-muted to-background/10 border border-border/30 hover:border-border/60 transition-all duration-200\">\n                            <span className=\"text-xs sm:text-sm text-muted-foreground block mb-1\">Payment method</span>\n                            <div className=\"font-medium text-sm sm:text-base group-hover:text-primary transition-colors duration-200\">{currentPlan.paymentMethod}</div>\n                        </div>\n                    </div>\n                </div>\n\n                <Separator className=\"my-4 sm:my-6 bg-gradient-to-r from-transparent via-border to-transparent\" />\n\n                <div className=\"flex flex-col sm:flex-row gap-3\">\n                    <UpdatePlanDialog\n                        className=\"mx-0 shadow-lg hover:shadow-xl transition-all duration-200\"\n                        {...updatePlan}\n                    />\n\n                    <CancelSubscriptionDialog\n                        className=\"mx-0 shadow-lg hover:shadow-xl transition-all duration-200\"\n                        {...cancelSubscription}\n                    />\n                </div>\n\n                <div className=\"pt-4 sm:pt-6\">\n                    <h4 className=\"font-medium mb-3 sm:mb-4 text-base sm:text-lg\">Current Plan Features</h4>\n                    <div className=\"flex flex-wrap gap-2 sm:gap-3\">\n                        {currentPlan.plan.features.map((feature, index) => (\n                            <div\n                                key={index}\n                                className=\"group flex items-center gap-2 p-2 sm:p-2 rounded-lg border border-border/80 hover:border-primary/30 hover:bg-primary/5 transition-all duration-200\"\n                            >\n                                <div className=\"w-1 h-1 sm:w-1.5 sm:h-1.5 rounded-full bg-primary flex-shrink-0 group-hover:bg-primary group-hover:scale-125 transition-all duration-200\"></div>\n                                <span className=\"text-xs sm:text-sm text-muted-foreground group-hover:text-foreground transition-colors duration-200\">{feature.name}</span>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </CardContent>\n        </Card>\n    </div>\n    )\n}",
      "type": "registry:component",
      "target": "components/billingsdk/subscription-management.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/subscription-management-demo.tsx",
      "content": "'use client'\n\nimport { SubscriptionManagement } from '@/components/billingsdk/subscription-management';\nimport { type CurrentPlan, plans } from '@/lib/billingsdk-config';\n\nexport function SubscriptionManagementDemo() {\n    const currentPlan: CurrentPlan = {\n        plan: plans[1],\n        type: 'monthly',\n        price: '$121',\n        nextBillingDate: 'January 15, 2025',\n        paymentMethod: 'Credit Card',\n        status: 'active'\n    }\n    return (\n        <div className=\"flex flex-1 flex-col justify-center text-center\">\n            <SubscriptionManagement\n                className=\"max-w-2xl mx-auto\"\n                currentPlan={currentPlan}\n                updatePlan={{\n                    currentPlan: currentPlan.plan,\n                    plans: plans,\n                    onPlanChange: (planId) => { console.log('update plan', planId) },\n                    triggerText: 'Update Plan'\n                }}\n                cancelSubscription={{\n                    title: 'Cancel Subscription',\n                    description: 'Are you sure you want to cancel your subscription?',\n                    leftPanelImageUrl: 'https://img.freepik.com/free-vector/abstract-paper-cut-shape-wave-background_474888-4649.jpg?semt=ais_hybrid&w=740&q=80',\n                    plan: currentPlan.plan,\n                    warningTitle: 'You will lose access to your account',\n                    warningText: 'If you cancel your subscription, you will lose access to your account and all your data will be deleted.',\n                    onCancel: async (planId) => {\n                        console.log('cancel subscription', planId)\n                        return new Promise((resolve) => {\n                            setTimeout(() => {\n                                resolve(void 0);\n                            }, 1000);\n                        });\n                    },\n                    onKeepSubscription: async (planId) => { console.log('keep subscription', planId) },\n                }}\n            />\n\n        </div>\n    );\n}\n",
      "type": "registry:component",
      "target": "components/subscription-management-demo.tsx"
    },
    {
      "path": "src/registry/lib/billingsdk-config.ts",
      "content": "export interface Plan {\n    id: string\n    title: string\n    description: string\n    highlight?: boolean\n    type?: 'monthly' | 'yearly'\n    currency?: string\n    monthlyPrice: string\n    yearlyPrice: string\n    buttonText: string\n    badge?: string\n    features: {\n        name: string\n        icon: string\n        iconColor?: string\n    }[]\n}\n\nexport interface CurrentPlan {\n    plan: Plan\n    type: 'monthly' | 'yearly' | 'custom'\n    price?: string\n    nextBillingDate: string\n    paymentMethod: string\n    status: 'active' | 'inactive' | 'past_due' | 'cancelled'\n}\n\nexport const plans: Plan[] = [\n    {\n        id: 'starter',\n        title: 'Starter',\n        description: 'For developers testing out Liveblocks locally.',\n        currency: '$',\n        monthlyPrice: '0',\n        yearlyPrice: '0',\n        buttonText: 'Start today for free',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    },\n    {\n        id: 'pro',\n        title: 'Pro',\n        description: 'For companies adding collaboration in production.',\n        currency: '$',\n        monthlyPrice: '20',\n        yearlyPrice: '199',\n        buttonText: 'Sign up',\n        badge: 'Most popular',\n        highlight: true,\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    },\n    {\n        id: 'enterprise',\n        title: 'Enterprise',\n        description: 'For organizations that need more support and compliance features.',\n        currency: '$',\n        monthlyPrice: 'Custom',\n        yearlyPrice: 'Custom',\n        buttonText: 'Contact sales',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    }\n];\n",
      "type": "registry:lib",
      "target": "lib/billingsdk-config.ts"
    }
  ]
}
</file>

<file path="public/r/update-plan-card.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "update-plan-card",
  "type": "registry:block",
  "title": "Update Plan Card",
  "description": "A update plan card component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "badge",
    "radio-group",
    "toggle",
    "label",
    "card",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/update-plan-card.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { motion, AnimatePresence } from \"motion/react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\"\nimport { Toggle } from \"@/components/ui/toggle\"\nimport { Label } from \"@/components/ui/label\"\nimport { type Plan } from \"@/lib/billingsdk-config\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface UpdatePlanCardProps {\n    currentPlan: Plan\n    plans: Plan[]\n    onPlanChange: (planId: string) => void\n    className?: string\n    title?: string\n}\n\nexport function UpdatePlanCard({ currentPlan, plans, onPlanChange, className, title }: UpdatePlanCardProps) {\n    const [isYearly, setIsYearly] = useState(false)\n    const [selectedPlan, setSelectedPlan] = useState<string | undefined>(undefined)\n\n    const getCurrentPrice = (plan: Plan) =>\n        isYearly ? `${plan.yearlyPrice}` : `${plan.monthlyPrice}`\n\n    const handlePlanChange = (planId: string) => {\n        setSelectedPlan(planId)\n    }\n\n    return (\n        <Card className={cn(\"max-w-xl mx-auto text-left overflow-hidden shadow-lg w-full\", className)}>\n            <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                <CardTitle className=\"text-base font-semibold\">\n                    {title || \"Upgrade Plan\"}\n                </CardTitle>\n                <div className=\"flex items-center gap-2 text-sm\">\n                    <Toggle\n                        size=\"sm\"\n                        pressed={!isYearly}\n                        onPressedChange={(pressed) => setIsYearly(!pressed)}\n                        className=\"px-3\"\n                    >\n                        Monthly\n                    </Toggle>\n                    <Toggle\n                        pressed={isYearly}\n                        onPressedChange={(pressed) => setIsYearly(pressed)}\n                        className=\"px-3\"\n                    >\n                        Yearly\n                    </Toggle>\n                </div>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n                <RadioGroup value={selectedPlan} onValueChange={handlePlanChange}>\n                    <AnimatePresence mode=\"wait\">\n                        {plans.map((plan) => (\n                            <motion.div\n                                key={plan.id}\n                                onClick={() => handlePlanChange(plan.id)}\n                                className={`p-4 rounded-lg border transition-all duration-300 shadow-sm hover:shadow-md cursor-pointer ${selectedPlan === plan.id\n                                    ? \"border-primary bg-gradient-to-br from-muted/60 to-muted/30 shadow-md\"\n                                    : \"border-border hover:border-primary/50\"\n                                    }`}\n                            >\n                                <div className=\"flex items-start justify-between gap-3\">\n                                    <div className=\"flex gap-3 min-w-0 flex-1\">\n                                        <RadioGroupItem \n                                            value={plan.id} \n                                            id={plan.id} \n                                            className=\"flex-shrink-0 pointer-events-none\" \n                                        />\n                                        <div className=\"min-w-0 flex-1\">\n                                            <div className=\"flex items-center gap-2 flex-wrap\">\n                                                <Label\n                                                    htmlFor={plan.id}\n                                                    className=\"font-medium cursor-pointer\"\n                                                >\n                                                    {plan.title}\n                                                </Label>\n                                                {plan.badge && (\n                                                    <Badge variant=\"secondary\" className=\"flex-shrink-0\">{plan.badge}</Badge>\n                                                )}\n                                            </div>\n                                            <p className=\"text-xs text-muted-foreground mt-1\">\n                                                {plan.description}\n                                            </p>\n                                            {plan.features.length > 0 && (\n                                                <div className=\"pt-3\">\n                                                    <div className=\"flex flex-wrap gap-2\">\n                                                        {plan.features.map((feature, featureIndex) => (\n                                                            <div\n                                                                key={featureIndex}\n                                                                className=\"flex items-center gap-2 px-2 py-1 rounded-lg bg-muted/20 border border-border/30 flex-shrink-0\"\n                                                            >\n                                                                <div className=\"w-1.5 h-1.5 rounded-full bg-primary flex-shrink-0\" />\n                                                                <span className=\"text-xs text-muted-foreground whitespace-nowrap\">\n                                                                    {feature.name}\n                                                                </span>\n                                                            </div>\n                                                        ))}\n                                                    </div>\n                                                </div>\n                                            )}\n                                        </div>\n                                    </div>\n                                    <div className=\"text-right flex-shrink-0\">\n                                        <div className=\"text-xl font-semibold\">\n                                            {\n                                                parseFloat(getCurrentPrice(plan)) >= 0 ?\n                                                    `${plan.currency}${getCurrentPrice(plan)}` :\n                                                    getCurrentPrice(plan)\n                                            }\n                                        </div>\n                                        <div className=\"text-xs text-muted-foreground\">\n                                            /{isYearly ? \"year\" : \"month\"}\n                                        </div>\n                                    </div>\n                                </div>\n                                <AnimatePresence>\n                                    {selectedPlan === plan.id && (\n                                        <motion.div\n                                            initial={{ opacity: 0, height: 0, y: -10 }}\n                                            animate={{ opacity: 1, height: \"auto\", y: 0 }}\n                                            exit={{ opacity: 0, height: 0, y: -10 }}\n                                            transition={{ duration: 0.3, ease: \"easeOut\" }}\n                                        >\n                                            <Button className=\"w-full mt-4\"\n                                                disabled={selectedPlan === currentPlan.id}\n                                                onClick={() => {\n                                                    onPlanChange(plan.id)\n                                                }}\n                                            >{selectedPlan === currentPlan.id ? \"Current Plan\" : \"Upgrade\"}</Button>\n                                        </motion.div>\n                                    )}\n                                </AnimatePresence>\n                            </motion.div>\n                        ))}\n                    </AnimatePresence>\n                </RadioGroup>\n            </CardContent>\n        </Card>\n    )\n}\n",
      "type": "registry:component",
      "target": "components/billingsdk/update-plan-card.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/update-plan-card-demo.tsx",
      "content": "'use client'\n\nimport { UpdatePlanCard } from '@/components/billingsdk/update-plan-card';\nimport { plans } from '@/lib/billingsdk-config';\n\nexport function UpdatePlanCardDemo() {\n\n    return (\n        <main className=\"flex flex-1 flex-col justify-center text-center w-full\">\n            <UpdatePlanCard\n                currentPlan={plans[0]}\n                plans={plans}\n                onPlanChange={(planId) => {\n                    console.log(\"Upgrade plan to\", planId)\n                }}\n            />\n        </main>\n    );\n}\n",
      "type": "registry:component",
      "target": "components/update-plan-card-demo.tsx"
    },
    {
      "path": "src/registry/lib/billingsdk-config.ts",
      "content": "export interface Plan {\n    id: string\n    title: string\n    description: string\n    highlight?: boolean\n    type?: 'monthly' | 'yearly'\n    currency?: string\n    monthlyPrice: string\n    yearlyPrice: string\n    buttonText: string\n    badge?: string\n    features: {\n        name: string\n        icon: string\n        iconColor?: string\n    }[]\n}\n\nexport interface CurrentPlan {\n    plan: Plan\n    type: 'monthly' | 'yearly' | 'custom'\n    price?: string\n    nextBillingDate: string\n    paymentMethod: string\n    status: 'active' | 'inactive' | 'past_due' | 'cancelled'\n}\n\nexport const plans: Plan[] = [\n    {\n        id: 'starter',\n        title: 'Starter',\n        description: 'For developers testing out Liveblocks locally.',\n        currency: '$',\n        monthlyPrice: '0',\n        yearlyPrice: '0',\n        buttonText: 'Start today for free',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    },\n    {\n        id: 'pro',\n        title: 'Pro',\n        description: 'For companies adding collaboration in production.',\n        currency: '$',\n        monthlyPrice: '20',\n        yearlyPrice: '199',\n        buttonText: 'Sign up',\n        badge: 'Most popular',\n        highlight: true,\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    },\n    {\n        id: 'enterprise',\n        title: 'Enterprise',\n        description: 'For organizations that need more support and compliance features.',\n        currency: '$',\n        monthlyPrice: 'Custom',\n        yearlyPrice: 'Custom',\n        buttonText: 'Contact sales',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    }\n];\n",
      "type": "registry:lib",
      "target": "lib/billingsdk-config.ts"
    }
  ]
}
</file>

<file path="src/app/docs/layout.tsx">
import { DocsLayout } from 'fumadocs-ui/layouts/docs';
import type { ReactNode } from 'react';
import { baseOptions } from '@/app/layout.config';
import { source } from '@/lib/source';
import { GithubIcon, FileTextIcon } from 'lucide-react';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <DocsLayout
    {...baseOptions}
    tree={source.pageTree}
    links={[
      ...baseOptions.links || [],
      {
        type: 'button',
        text: 'llms-full.txt',
        url: '/llms-full.txt',
        active: 'none',
        icon: <FileTextIcon />,
      },
      {
        type: 'icon',
        icon: <GithubIcon />,
        text: 'GitHub',
        url: 'https://github.com/dodopayments/billingsdk',
      },
    ]}
    disableThemeSwitch={true}
  >
    {children}
  </DocsLayout>
  );
}
</file>

<file path="src/app/global.css">
@import 'tailwindcss';
@import 'fumadocs-ui/css/vitepress.css';
@import 'fumadocs-ui/css/preset.css';
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --font-body: var(--font-inter);
  --font-display: var(--font-darker-grotesque);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

:root {
  --radius: 0.625rem;
  --background: oklch(16.89% .002 286.18);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* Hide scrollbars while maintaining scroll functionality */
.hide-scrollbars {
  scrollbar-width: none; /* Firefox */
  -ms-overflow-style: none; /* IE and Edge */
}

.hide-scrollbars::-webkit-scrollbar {
  display: none; /* Chrome, Safari, and Opera */
}

/* Hide scrollbars for SyntaxHighlighter specifically */
pre[class*="language-"] {
  scrollbar-width: none !important;
  -ms-overflow-style: none !important;
}

pre[class*="language-"]::-webkit-scrollbar {
  display: none !important;
}

/* Handwritten font style */
.handwritten {
  font-family: var(--font-kalam), 'Comic Sans MS', cursive;
  font-weight: 400;
  letter-spacing: 0.5px;
}
</file>

<file path="src/components/billingsdk/banner.tsx">
"use client"

import type React from "react"

import { Button } from "@/components/ui/button"
import { cn } from "@/lib/utils"
import { X } from "lucide-react"
import { useState, useEffect } from "react"
import { motion, AnimatePresence } from "motion/react"

interface BannerProps {
  variant?: "default" | "minimal" | "popup"
  title: string
  description?: string
  buttonText?: string
  buttonIcon?: React.ReactNode
  buttonLink?: string
  className?: string
  autoDismiss?: number // in ms
  onDismiss?: () => void
  gradientColors?: string[]
}

export function Banner({
  variant = "default",
  title,
  description,
  buttonText,
  buttonIcon,
  buttonLink,
  className,
  autoDismiss,
  onDismiss,
  gradientColors,
}: BannerProps) {
  const [isVisible, setIsVisible] = useState(true)

  useEffect(() => {
    if (isVisible && autoDismiss) {
      const timer = setTimeout(() => handleDismiss(), autoDismiss)
      return () => clearTimeout(timer)
    }
  }, [isVisible, autoDismiss])

  const handleDismiss = () => {
    setIsVisible(false)
    onDismiss?.()
  }

  const getVariantStyles = () => {
    const hasGradient = gradientColors && gradientColors.length > 0

    switch (variant) {
      case "minimal":
        return {
          container: hasGradient
            ? "sticky top-0 z-50 w-full border-b backdrop-blur supports-[backdrop-filter]:bg-card/60"
            : "sticky top-0 z-50 w-full border-b bg-card/95 backdrop-blur supports-[backdrop-filter]:bg-card/60",
          wrapper:
            "relative container mx-auto flex flex-col sm:flex-row items-start sm:items-center justify-center px-3 sm:px-4 py-2 gap-2 sm:gap-4 max-w-2xl",
          content: "flex flex-col sm:flex-row items-start sm:items-center gap-1 sm:gap-2",
          title: "text-sm font-medium text-card-foreground leading-tight",
          description: "text-xs text-muted-foreground sm:ml-2",
          actions: "flex items-center gap-2 self-end sm:self-auto",
        }
      case "popup":
        return {
          container: hasGradient
            ? "fixed top-4 left-1/2 -translate-x-1/2 z-50 max-w-sm sm:max-w-md w-[90%] sm:w-auto border border-border rounded-lg shadow-lg backdrop-blur"
            : "fixed top-4 left-1/2 -translate-x-1/2 z-50 max-w-sm sm:max-w-md w-[90%] sm:w-auto bg-popover border border-border rounded-lg shadow-lg backdrop-blur",
          wrapper:
            "relative flex flex-col sm:flex-row items-start sm:items-center justify-between px-3 sm:px-4 py-3 gap-3 sm:gap-4",
          content: "flex flex-col sm:flex-row items-start sm:items-center gap-2 flex-1",
          title:"text-sm font-medium text-popover-foreground leading-snug",
          description:"text-xs text-muted-foreground",
          actions: "flex items-center gap-2 self-end sm:self-auto flex-shrink-0 pr-8",
        }
      default:
        return {
          container: hasGradient
            ? "sticky top-0 z-50 w-full border-b text-primary-foreground shadow-sm text-left backdrop-blur"
            : "sticky top-0 z-50 w-full border-b bg-primary text-primary-foreground shadow-sm text-left backdrop-blur",
          wrapper:
            "relative container mx-auto flex flex-col sm:flex-row items-start sm:items-center justify-between px-3 sm:px-4 py-2 sm:py-3 gap-2 sm:gap-4",
          content: "flex flex-col sm:flex-row items-start sm:items-center gap-2 w-full",
          title: hasGradient
            ? "text-sm font-medium text-foreground leading-tight"
            : "text-sm font-medium text-primary-foreground leading-tight",
          description: hasGradient
            ? "text-xs text-foreground/80"
            : "text-xs text-primary-foreground/80",
          actions: "flex items-center gap-2 self-end sm:self-auto pr-8",
        }
    }
  }

  const styles = getVariantStyles()

  const getGradientBackground = () => {
    if (!gradientColors || gradientColors.length === 0) return null

    // Use the exact gradient from the example or custom colors with proper spacing
    let gradientStops
    if (gradientColors.length === 4) {
      // Match the original example exactly
      gradientStops = `${gradientColors[0]} 0%, ${gradientColors[1]} 12.5%, ${gradientColors[2]} 25%, ${gradientColors[3]} 37.5%, ${gradientColors[0]} 50%`
    } else {
      // For other numbers of colors, use equal spacing
      gradientStops = gradientColors.map((color, index) => {
        const percentage = (index / gradientColors.length) * 100
        return `${color} ${percentage}%`
      }).join(', ')
    }

    // Use consistent filter for better visibility
    const filterValue = 'saturate(1.8) brightness(1.2)'

    return (
      <div
        className="absolute inset-0 z-[-1]"
        style={{
          maskImage: 'linear-gradient(to bottom, white, transparent), radial-gradient(circle at top center, white, transparent)',
          maskComposite: 'intersect',
          animation: 'fd-moving-banner 30s linear infinite',
          backgroundImage: `repeating-linear-gradient(70deg, ${gradientStops})`,
          backgroundSize: '200% 100%',
          filter: filterValue
        }}
      />
    )
  }

  const getAnimationProps = () => {
    switch (variant) {
      case "popup":
        return {
          initial: { opacity: 0, scale: 0.95, y: -20 },
          animate: { opacity: 1, scale: 1, y: 0 },
          exit: { opacity: 0, scale: 0.95, y: -20 },
        }
      default:
        return {
          initial: { opacity: 0, y: -12 },
          animate: { opacity: 1, y: 0 },
          exit: { opacity: 0, y: -12 },
        }
    }
  }

  return (
    <AnimatePresence>
      {isVisible && (
        <motion.div
          {...getAnimationProps()}
          transition={{ duration: 0.15, ease: "easeOut" }}
          className={cn(styles.container, className)}
        >
          {getGradientBackground()}
          <div className={styles.wrapper}>
            {/* Content */}
            <div className={styles.content}>
              <div className={variant === "minimal" ? "flex flex-col md:flex-row gap-0.5 md:gap-2" : ""}>
                <p className={styles.title}>{title}</p>
                {description && <p className={styles.description}>{description}</p>}
              </div>
            </div>

            {/* Actions */}
            <div className={styles.actions}>
              {buttonText && variant !== "minimal" && (
                <Button
                  variant={variant === "default" ? "secondary" : "default"}
                  size="sm"
                  onClick={() => window.open(buttonLink, "_blank")}
                  className={"h-8"}
                >
                  {buttonIcon && <div className="flex-shrink-0 mr-1">{buttonIcon}</div>}
                  {buttonText}
                </Button>
              )}
            </div>

            {/* Close button (always top-right) */}
            <Button
              variant="ghost"
              size="icon"
              onClick={handleDismiss}
              className={cn(
                "absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8",
                gradientColors && gradientColors.length > 0
                  ? "hover:bg-foreground/20 text-foreground"
                  : variant === "default" && "hover:bg-primary-foreground/20 text-primary-foreground",
                variant === "popup" && !gradientColors && "hover:bg-accent text-popover-foreground",
                variant === "minimal" && !gradientColors && "hover:bg-accent text-card-foreground",
              )}
            >
              <X className="h-4 w-4" />
              <span className="sr-only">Dismiss</span>
            </Button>
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  )
}

// Add CSS keyframes for the moving banner animation
if (typeof document !== 'undefined') {
  const styleSheet = document.createElement('style')
  styleSheet.textContent = `
    @keyframes fd-moving-banner {
      0% {
        background-position: 0% 50%;
      }
      50% {
        background-position: 100% 50%;
      }
      100% {
        background-position: 0% 50%;
      }
    }
  `
  document.head.appendChild(styleSheet)
}
</file>

<file path="src/components/billingsdk/cancel-subscription-card.tsx">
"use client";

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent } from "@/components/ui/card"
import { type Plan } from "@/lib/billingsdk-config";
import { cn } from "@/lib/utils";
import { Circle } from "lucide-react";

export interface CancelSubscriptionCardProps {
    title: string;
    description: string;
    plan: Plan;
    leftPanelImageUrl?: string;
    warningTitle?: string;
    warningText?: string;
    keepButtonText?: string;
    continueButtonText?: string;
    finalTitle?: string;
    finalSubtitle?: string;
    finalWarningText?: string;
    goBackButtonText?: string;
    confirmButtonText?: string;
    onCancel: (planId: string) => Promise<void> | void;
    onKeepSubscription?: (planId: string) => Promise<void> | void;
    className?: string;
}

export function CancelSubscriptionCard({
    title,
    description,
    plan,
    leftPanelImageUrl,
    warningTitle,
    warningText,
    keepButtonText,
    continueButtonText,
    finalTitle,
    finalSubtitle,
    finalWarningText,
    goBackButtonText,
    confirmButtonText,
    onCancel,
    onKeepSubscription,
    className,
}: CancelSubscriptionCardProps) {
    const [showConfirmation, setShowConfirmation] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const handleContinueCancellation = () => {
        setShowConfirmation(true);
        setError(null);
    };

    const handleConfirmCancellation = async () => {
        try {
            setIsLoading(true);
            setError(null);
            await onCancel(plan.id);
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to cancel subscription');
        } finally {
            setIsLoading(false);
        }
    };

    const handleKeepSubscription = async () => {
        try {
            setIsLoading(true);
            setError(null);
            if (onKeepSubscription) {
                await onKeepSubscription(plan.id);
            }
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to keep subscription');
        } finally {
            setIsLoading(false);
        }
    };

    const handleGoBack = () => {
        setShowConfirmation(false);
        setError(null);
    };

    return (
        <Card className={cn("sm:max-w-[1000px] flex flex-col md:flex-row p-0 overflow-hidden w-full", leftPanelImageUrl ? "" : "sm:max-w-[500px]", className)}>
            {leftPanelImageUrl && (
                <div className="w-full md:w-1/2 min-h-[500px] relative hidden md:block overflow-hidden">
                    <img src={leftPanelImageUrl} alt="Cancel Subscription" className="absolute inset-0 w-full h-full object-cover" />
                    <div className="absolute inset-0 bg-gradient-to-r from-transparent via-background/30 to-background/90 dark:block hidden"></div>
                    <div className="absolute inset-0 bg-gradient-to-t from-background/80 via-transparent to-background/20 dark:block hidden"></div>
                </div>
            )}
            <CardContent className={cn("py-6 px-4 flex flex-col gap-4", leftPanelImageUrl ? "w-full md:w-1/2" : "w-full")}>
                <div className="flex flex-col gap-2 text-center md:text-left">
                    <h2 className="md:text-2xl text-xl font-semibold">{title}</h2>
                    <p className="md:text-sm text-xs text-muted-foreground">{description}</p>
                    {error && (
                        <div className="p-3 bg-destructive/10 border border-destructive/20 rounded-md">
                            <p className="text-sm text-destructive">{error}</p>
                        </div>
                    )}
                </div>

                {/* Plan Details */}
                {!showConfirmation && (
                    <div className="flex flex-col gap-4 p-4 bg-muted/50 rounded-lg">
                        <div className="flex items-center justify-between">
                            <div className="flex flex-col gap-1">
                                <span className="font-semibold text-lg">{plan.title} Plan</span>
                                <span className="text-sm text-muted-foreground">Current subscription</span>
                            </div>
                            <Badge variant="secondary">
                                {parseFloat(plan.monthlyPrice) >= 0 ? `${plan.currency}${plan.monthlyPrice}/monthly` : `${plan.monthlyPrice}/monthly`}
                            </Badge>
                        </div>
                        <div className="flex flex-col gap-2">
                            {plan.features.slice(0, 4).map((feature, index) => (
                                <div key={index} className="flex items-center gap-2">
                                    <Circle className="w-2 h-2 fill-primary text-primary" />
                                    <span className="text-sm text-muted-foreground">{feature.name}</span>
                                </div>
                            ))}
                        </div>
                    </div>
                )}

                {/* Warning Section */}
                {!showConfirmation && (warningTitle || warningText) && (
                    <div className="p-4 bg-muted/30 border border-border rounded-lg">
                        {warningTitle && (
                            <h3 className="font-semibold text-foreground mb-2">
                                {warningTitle}
                            </h3>
                        )}
                        {warningText && (
                            <p className="text-sm text-muted-foreground">
                                {warningText}
                            </p>
                        )}
                    </div>
                )}
                {/* Action Buttons */}
                {!showConfirmation ? (
                    <div className="flex flex-col sm:flex-row gap-3 mt-auto">
                        <Button
                            className="flex-1"
                            onClick={handleKeepSubscription}
                            disabled={isLoading}
                        >
                            {isLoading ? "Processing..." : (keepButtonText || "Keep My Subscription")}
                        </Button>
                        <Button
                            variant="destructive"
                            className="flex-1"
                            onClick={handleContinueCancellation}
                            disabled={isLoading}
                        >
                            {continueButtonText || "Continue Cancellation"}
                        </Button>
                    </div>
                ) : (
                    <div className="flex flex-col gap-4 mt-auto">
                        <div className="text-center p-4 bg-muted/50 rounded-lg">
                            <h3 className="font-semibold mb-2 text-foreground">
                                {finalTitle || "Final Confirmation"}
                            </h3>
                            <p className="text-sm text-muted-foreground mb-2">
                                {finalSubtitle || "Are you sure you want to cancel your subscription?"}
                            </p>
                            <p className="text-sm text-destructive">
                                {finalWarningText || "This action cannot be undone and you'll lose access to all premium features."}
                            </p>
                        </div>
                        <div className="flex flex-col sm:flex-row gap-3">
                            <Button
                                variant="outline"
                                className="flex-1"
                                onClick={handleGoBack}
                                disabled={isLoading}
                            >
                                {goBackButtonText || "Go Back"}
                            </Button>
                            <Button
                                variant="destructive"
                                className="flex-1"
                                onClick={handleConfirmCancellation}
                                disabled={isLoading}
                            >
                                {isLoading ? "Cancelling..." : (confirmButtonText || "Yes, Cancel Subscription")}
                            </Button>
                        </div>
                    </div>
                )}
            </CardContent>
        </Card>
    )
}
</file>

<file path="src/components/billingsdk/cancel-subscription-dialog.tsx">
"use client";

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import {
    Dialog,
    DialogClose,
    DialogContent,
    DialogTitle,
    DialogTrigger,
} from "@/components/ui/dialog"
import { type Plan } from "@/lib/billingsdk-config";
import { cn } from "@/lib/utils";
import { X, Circle } from "lucide-react";
import { useTheme } from "@/contexts/theme-context";
import { getThemeStyles } from "@/lib/themes";

export interface CancelSubscriptionDialogProps {
    title: string;
    description: string;
    plan: Plan;
    triggerButtonText?: string;
    leftPanelImageUrl?: string;
    warningTitle?: string;
    warningText?: string;
    keepButtonText?: string;
    continueButtonText?: string;
    finalTitle?: string;
    finalSubtitle?: string;
    finalWarningText?: string;
    goBackButtonText?: string;
    confirmButtonText?: string;
    onCancel: (planId: string) => Promise<void> | void;
    onKeepSubscription?: (planId: string) => Promise<void> | void;
    onDialogClose?: () => void;
    className?: string;
}

export function CancelSubscriptionDialog({
    title,
    description,
    plan,
    triggerButtonText,
    leftPanelImageUrl,
    warningTitle,
    warningText,
    keepButtonText,
    continueButtonText,
    finalTitle,
    finalSubtitle,
    finalWarningText,
    goBackButtonText,
    confirmButtonText,
    onCancel,
    onKeepSubscription,
    onDialogClose,
    className,
}: CancelSubscriptionDialogProps) {
    const [showConfirmation, setShowConfirmation] = useState(false);
    const [isOpen, setIsOpen] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const { currentTheme, previewDarkMode } = useTheme();
    const themeStyles = getThemeStyles(currentTheme, previewDarkMode);

    const handleContinueCancellation = () => {
        setShowConfirmation(true);
        setError(null);
    };

    const handleConfirmCancellation = async () => {
        try {
            setIsLoading(true);
            setError(null);
            await onCancel(plan.id);
            handleDialogClose();
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to cancel subscription');
        } finally {
            setIsLoading(false);
        }
    };

    const handleKeepSubscription = async () => {
        try {
            setIsLoading(true);
            setError(null);
            if (onKeepSubscription) {
                await onKeepSubscription(plan.id);
            }
            handleDialogClose();
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to keep subscription');
        } finally {
            setIsLoading(false);
        }
    };

    const handleDialogClose = () => {
        setIsOpen(false);
        setShowConfirmation(false);
        setError(null);
        setIsLoading(false);
        onDialogClose?.();
    };

    const handleGoBack = () => {
        setShowConfirmation(false);
        setError(null);
    };

    // Handle keyboard shortcuts
    useEffect(() => {
        const handleKeyDown = (event: KeyboardEvent) => {
            if (!isOpen) return;

            if (event.key === 'Escape') {
                event.preventDefault();
                handleDialogClose();
            }
        };

        document.addEventListener('keydown', handleKeyDown);
        return () => document.removeEventListener('keydown', handleKeyDown);
    }, [isOpen]);

    return (
        <Dialog open={isOpen} onOpenChange={(open) => {
            if (open) {
                setIsOpen(true);
            } else {
                handleDialogClose();
            }
        }}>
            <DialogTrigger asChild>
                <Button variant="outline">{triggerButtonText || "Cancel Subscription"}</Button>
            </DialogTrigger>
            <DialogContent className={cn("sm:max-w-[1000px] flex flex-col md:flex-row p-0 overflow-hidden text-foreground w-[95%] md:w-[100%]", leftPanelImageUrl ? "" : "sm:max-w-[500px]", className)} style={themeStyles}>
                <DialogTitle className="sr-only">{title}</DialogTitle>
                <DialogClose
                    className="absolute right-4 top-4 z-10 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground"
                    onClick={handleDialogClose}
                >
                    <X className="h-4 w-4" />
                    <span className="sr-only">Close</span>
                </DialogClose>
                {leftPanelImageUrl && (
                    <div className="w-full md:w-1/2 min-h-[500px] relative hidden md:block overflow-hidden">
                        <img src={leftPanelImageUrl} alt="Cancel Subscription" className="absolute inset-0 w-full h-full object-cover" />
                        <div className="absolute inset-0 bg-gradient-to-r from-transparent via-background/30 to-background/90 dark:block hidden"></div>
                        <div className="absolute inset-0 bg-gradient-to-t from-background/80 via-transparent to-background/20 dark:block hidden"></div>
                    </div>
                )}
                <div className={cn("py-6 px-4 flex flex-col gap-4", leftPanelImageUrl ? "w-full md:w-1/2" : "w-full")}>
                    <div className="flex flex-col gap-2 text-center md:text-left">
                        <h2 className="md:text-2xl text-xl font-semibold">{title}</h2>
                        <p className="md:text-sm text-xs text-muted-foreground">{description}</p>
                        {error && (
                            <div className="p-3 bg-destructive/10 border border-destructive/20 rounded-md">
                                <p className="text-sm text-destructive">{error}</p>
                            </div>
                        )}
                    </div>

                    {/* Plan Details */}
                    {!showConfirmation && (
                        <div className="flex flex-col gap-4 p-4 bg-muted/50 rounded-lg">
                            <div className="flex items-center justify-between">
                                <div className="flex flex-col gap-1">
                                    <span className="font-semibold text-lg">{plan.title} Plan</span>
                                    <span className="text-sm text-muted-foreground">Current subscription</span>
                                </div>
                                <Badge variant="secondary">
                                    {
                                        parseFloat(plan.monthlyPrice) >= 0 ?
                                            `${plan.currency}${plan.monthlyPrice}/monthly` :
                                            `${plan.monthlyPrice}/monthly`
                                    }
                                </Badge>
                            </div>
                            <div className="flex flex-col gap-2">
                                {plan.features.slice(0, 4).map((feature, index) => (
                                    <div key={index} className="flex items-center gap-2">
                                        <Circle className="w-2 h-2 fill-primary text-primary" />
                                        <span className="text-sm text-muted-foreground">{feature.name}</span>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}

                    {/* Warning Section */}
                    {!showConfirmation && (warningTitle || warningText) && (
                        <div className="p-4 bg-muted/30 border border-border rounded-lg">
                            {warningTitle && (
                                <h3 className="font-semibold text-foreground mb-2">
                                    {warningTitle}
                                </h3>
                            )}
                            {warningText && (
                                <p className="text-sm text-muted-foreground">
                                    {warningText}
                                </p>
                            )}
                        </div>
                    )}
                    {/* Action Buttons */}
                    {!showConfirmation ? (
                        <div className="flex flex-col sm:flex-row gap-3 mt-auto">
                            <Button
                                className="flex-1"
                                onClick={handleKeepSubscription}
                                disabled={isLoading}
                            >
                                {isLoading ? "Processing..." : (keepButtonText || "Keep My Subscription")}
                            </Button>
                            <Button
                                variant="destructive"
                                className="flex-1"
                                onClick={handleContinueCancellation}
                                disabled={isLoading}
                            >
                                {continueButtonText || "Continue Cancellation"}
                            </Button>
                        </div>
                    ) : (
                        <div className="flex flex-col gap-4 mt-auto">
                            <div className="text-center p-4 bg-muted/50 rounded-lg">
                                <h3 className="font-semibold mb-2 text-foreground">
                                    {finalTitle || "Final Confirmation"}
                                </h3>
                                <p className="text-sm text-muted-foreground mb-2">
                                    {finalSubtitle || "Are you sure you want to cancel your subscription?"}
                                </p>
                                <p className="text-sm text-destructive">
                                    {finalWarningText || "This action cannot be undone and you'll lose access to all premium features."}
                                </p>
                            </div>
                            <div className="flex flex-col sm:flex-row gap-3">
                                <Button
                                    variant="outline"
                                    className="flex-1"
                                    onClick={handleGoBack}
                                    disabled={isLoading}
                                >
                                    {goBackButtonText || "Go Back"}
                                </Button>
                                <Button
                                    variant="destructive"
                                    className="flex-1"
                                    onClick={handleConfirmCancellation}
                                    disabled={isLoading}
                                >
                                    {isLoading ? "Cancelling..." : (confirmButtonText || "Yes, Cancel Subscription")}
                                </Button>
                            </div>
                        </div>
                    )}
                </div>
            </DialogContent>
        </Dialog>
    )
}
</file>

<file path="src/components/billingsdk/pricing-table-one.tsx">
"use client";

import { Check, Zap } from "lucide-react";
import { useState, useId } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { cva, type VariantProps } from "class-variance-authority";

import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Separator } from "@/components/ui/separator";
import { type Plan } from "@/lib/billingsdk-config";
import { cn } from "@/lib/utils";

const sectionVariants = cva("py-32", {
  variants: {
    size: {
      small: "py-6 md:py-12",
      medium: "py-10 md:py-20",
      large: "py-16 md:py-32",
    },
    theme: {
      minimal: "",
      classic: "bg-gradient-to-b from-background to-muted/20 relative overflow-hidden",
    },
  },
  defaultVariants: {
    size: "medium",
    theme: "minimal",
  },
});

const titleVariants = cva("text-pretty text-left font-bold", {
  variants: {
    size: {
      small: "text-3xl lg:text-4xl",
      medium: "text-4xl lg:text-5xl",
      large: "text-4xl lg:text-6xl",
    },
    theme: {
      minimal: "",
      classic: "text-center bg-gradient-to-r from-foreground to-muted-foreground bg-clip-text text-transparent p-1",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const descriptionVariants = cva("text-muted-foreground max-w-3xl", {
  variants: {
    size: {
      small: "text-base lg:text-lg",
      medium: "text-lg lg:text-xl",
      large: "lg:text-xl",
    },
    theme: {
      minimal: "text-left",
      classic: "text-center mx-auto",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const cardVariants = cva(
  "flex w-full flex-col rounded-lg border text-left h-full transition-all duration-300",
  {
    variants: {
      size: {
        small: "p-4",
        medium: "p-5",
        large: "p-6",
      },
      theme: {
        minimal: "",
        classic: "hover:shadow-xl backdrop-blur-sm bg-card/50 border-border/50",
      },
      highlight: {
        true: "",
        false: "",
      },
    },
    compoundVariants: [
      {
        theme: "classic",
        highlight: true,
        className: "ring-2 ring-primary/20 border-primary/30 bg-gradient-to-b from-primary/5 to-transparent relative overflow-hidden",
      },
      {
        theme: "minimal",
        highlight: true,
        className: "bg-muted",
      },
    ],
    defaultVariants: {
      size: "large",
      theme: "minimal",
      highlight: false,
    },
  }
);

const priceTextVariants = cva("font-medium", {
  variants: {
    size: {
      small: "text-3xl",
      medium: "text-4xl",
      large: "text-4xl",
    },
    theme: {
      minimal: "",
      classic: "text-5xl font-extrabold bg-gradient-to-r from-foreground to-muted-foreground bg-clip-text text-transparent",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const featureIconVariants = cva("", {
  variants: {
    size: {
      small: "size-3",
      medium: "size-4",
      large: "size-4",
    },
    theme: {
      minimal: "text-primary",
      classic: "text-emerald-500",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const highlightBadgeVariants = cva("mb-8 block w-fit", {
  variants: {
    theme: {
      minimal: "",
      classic: "bg-gradient-to-r from-primary to-primary/80 text-primary-foreground border-primary/20 shadow-lg",
    },
  },
  defaultVariants: {
    theme: "minimal",
  },
});

const toggleVariants = cva("flex h-11 w-fit shrink-0 items-center rounded-md p-1 text-lg", {
  variants: {
    theme: {
      minimal: "bg-muted",
      classic: "bg-muted/50 backdrop-blur-sm border border-border/50 shadow-lg",
    },
  },
  defaultVariants: {
    theme: "minimal",
  },
});

const buttonVariants = cva(
  "gap-2 whitespace-nowrap focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 transition-all duration-300",
  {
    variants: {
      theme: {
        minimal: "shadow hover:bg-primary/90 h-9 py-2 group bg-primary text-primary-foreground ring-primary before:from-primary-foreground/20 after:from-primary-foreground/10 relative isolate inline-flex w-full items-center justify-center overflow-hidden rounded-md px-3 text-left text-sm font-medium ring-1 before:pointer-events-none before:absolute before:inset-0 before:-z-10 before:rounded-md before:bg-gradient-to-b before:opacity-80 before:transition-opacity before:duration-300 before:ease-[cubic-bezier(0.4,0.36,0,1)] after:pointer-events-none after:absolute after:inset-0 after:-z-10 after:rounded-md after:bg-gradient-to-b after:to-transparent after:mix-blend-overlay hover:cursor-pointer",
        classic: "relative overflow-hidden bg-gradient-to-r from-primary to-primary/80 text-primary-foreground font-semibold py-3 px-6 rounded-lg hover:shadow-xl active:scale-95 border border-primary/20",
      },
    },
    defaultVariants: {
      theme: "minimal",
    },
  }
);

interface PricingTableOneProps extends VariantProps<typeof sectionVariants> {
  className?: string;
  plans: Plan[];
  title?: string;
  description?: string;
  onPlanSelect?: (planId: string) => void;
}

export function PricingTableOne({ 
  className, 
  plans, 
  title, 
  description, 
  onPlanSelect, 
  size,
  theme = "minimal"
}: PricingTableOneProps) {
  const [isAnnually, setIsAnnually] = useState(false);
  const uniqueId = useId(); // Generate unique ID automatically

  function calculateDiscount(monthlyPrice: string, yearlyPrice: string): number {
    const monthly = parseFloat(monthlyPrice);
    const yearly = parseFloat(yearlyPrice);

    if (
      monthlyPrice.toLowerCase() === "custom" ||
      yearlyPrice.toLowerCase() === "custom" ||
      isNaN(monthly) ||
      isNaN(yearly) ||
      monthly === 0
    ) {
      return 0;
    }

    const discount = ((monthly * 12 - yearly) / (monthly * 12)) * 100;
    return Math.round(discount);
  }

  const yearlyPriceDiscount = plans.length
    ? Math.max(
      ...plans.map((plan) =>
        calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)
      )
    )
    : 0;

  return (
    <section className={cn(sectionVariants({ size, theme }), className)}>
      {/* Classic theme background elements */}
      {theme === "classic" && (
        <>
          <div className="absolute inset-0 bg-grid-pattern opacity-5" />
          <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-primary/5 rounded-full blur-3xl" />
          <div className="absolute top-1/4 right-1/4 w-64 h-64 bg-secondary/5 rounded-full blur-2xl" />
        </>
      )}
      
      <div className={cn("container relative", "p-0 md:p-[1rem]")}>
        <div className="mx-auto flex max-w-7xl flex-col gap-6">
          <div className={cn("flex flex-col gap-4", theme === "classic" && "text-center")}>
            <h2 className={cn(titleVariants({ size, theme }))}>
              {title || "Pricing"}
            </h2>
          </div>

          <div className={cn(
            "flex flex-col justify-between gap-5 md:gap-10",
            theme === "classic" ? "md:flex-col md:items-center" : "md:flex-row"
          )}>
            <p className={cn(descriptionVariants({ size, theme }))}>
              {description || "Transparent pricing with no hidden fees. Upgrade or downgrade anytime."}
            </p>
            <div className={cn(toggleVariants({ theme }), theme === "classic" && "mx-auto")}>
              <RadioGroup
                defaultValue="monthly"
                className="h-full grid-cols-2"
                onValueChange={(value) => {
                  setIsAnnually(value === "annually");
                }}
              >
                <div className='has-[button[data-state="checked"]]:bg-background h-full rounded-md transition-all'>
                  <RadioGroupItem
                    value="monthly"
                    id={`${uniqueId}-monthly`}
                    className="peer sr-only"
                  />
                  <Label
                    htmlFor={`${uniqueId}-monthly`}
                    className="text-muted-foreground peer-data-[state=checked]:text-primary flex h-full cursor-pointer items-center justify-center px-2 md:px-7 font-semibold transition-all hover:text-foreground"
                  >
                    Monthly
                  </Label>
                </div>
                <div className='has-[button[data-state="checked"]]:bg-background h-full rounded-md transition-all'>
                  <RadioGroupItem
                    value="annually"
                    id={`${uniqueId}-annually`}
                    className="peer sr-only"
                  />
                  <Label
                    htmlFor={`${uniqueId}-annually`}
                    className="text-muted-foreground peer-data-[state=checked]:text-primary flex h-full cursor-pointer items-center justify-center gap-1 px-2 md:px-7 font-semibold transition-all hover:text-foreground"
                  >
                    Yearly
                    {yearlyPriceDiscount > 0 && (
                      <span className="ml-1 rounded bg-primary/10 px-2 py-0.5 text-xs text-primary border border-primary/20 font-medium">
                        Save {yearlyPriceDiscount}%
                      </span>
                    )}
                  </Label>
                </div>
              </RadioGroup>
            </div>
          </div>

          <div className="flex w-full flex-col items-stretch gap-6 md:flex-row md:items-stretch">
            {plans.map((plan, index) => (
              <motion.div
                key={plan.id}
                layout
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.3, delay: index * 0.1 }}
                className={cn(
                  cardVariants({ 
                    size, 
                    theme, 
                    highlight: plan.highlight 
                  })
                )}
              >
                {/* Classic theme highlight effect */}
                {theme === "classic" && plan.highlight && (
                  <>
                    <div className="absolute -top-px left-1/2 -translate-x-1/2 w-32 h-px bg-gradient-to-r from-transparent via-primary to-transparent" />
                    <div className="absolute top-4 right-4">
                      <Badge className={highlightBadgeVariants({ theme })}>
                        Most Popular
                      </Badge>
                    </div>
                  </>
                )}
                
                <Badge className={cn(
                  theme === "classic" && !plan.highlight 
                    ? "bg-muted text-muted-foreground border-border/50 mb-8" 
                    : highlightBadgeVariants({ theme })
                )}>
                  {plan.title}
                </Badge>
                
                <AnimatePresence mode="wait">
                  <motion.div
                    key={isAnnually ? "year" : "month"}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -10 }}
                    transition={{ duration: 0.2 }}
                  >
                    {isAnnually ? (
                      <>
                        <span className={cn("my-auto", priceTextVariants({ size, theme }))}>
                          {parseFloat(plan.yearlyPrice) >= 0 && (
                            <>
                              {plan.currency}
                            </>
                          )}
                          {plan.yearlyPrice}
                          {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice) > 0 && (
                            <span className={cn(
                              "text-xs ml-2",
                              theme === "classic" ? "text-emerald-500 font-semibold" : "underline"
                            )}>
                              {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)}% off
                            </span>
                          )}
                        </span>
                        <p className="text-muted-foreground">per year</p>
                      </>
                    ) : (
                      <>
                        <span className={cn(priceTextVariants({ size, theme }))}>
                          {parseFloat(plan.monthlyPrice) >= 0 && (
                            <>
                              {plan.currency}
                            </>
                          )}
                          {plan.monthlyPrice}
                        </span>
                        <p className="text-muted-foreground">per month</p>
                      </>
                    )}
                  </motion.div>
                </AnimatePresence>

                <Separator className={cn(
                  "my-6",
                  theme === "classic" && "bg-gradient-to-r from-transparent via-border to-transparent"
                )} />
                
                <div className="flex h-full flex-col justify-between gap-10">
                  <ul className="text-muted-foreground space-y-4">
                    {plan.features.map((feature, featureIndex) => (
                      <motion.li 
                        key={featureIndex} 
                        className="flex items-center gap-3"
                        initial={{ opacity: 0, x: -10 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.3, delay: featureIndex * 0.05 }}
                      >
                        <Check className={cn(featureIconVariants({ size, theme }))} />
                        <span className={cn(
                          theme === "classic" && "text-foreground/90"
                        )}>
                          {feature.name}
                        </span>
                      </motion.li>
                    ))}
                  </ul>

                  <Button
                    className={buttonVariants({ theme })}
                    onClick={() => onPlanSelect?.(plan.id)}
                    aria-label={`Select ${plan.title} plan`}
                  >
                    {theme === "classic" && plan.highlight && (
                      <Zap className="w-4 h-4 mr-1" />
                    )}
                    {plan.buttonText}
                    {theme === "classic" && (
                      <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/10 to-white/0 translate-x-[-100%] hover:translate-x-[100%] transition-transform duration-700" />
                    )}
                  </Button>
                </div>
              </motion.div>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/components/billingsdk/pricing-table-three.tsx">
'use client'

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Check } from "lucide-react"
import { cn } from "@/lib/utils"
import { type Plan } from "@/lib/billingsdk-config"
import { useState } from "react"
import { Label } from "@/components/ui/label"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { cva, type VariantProps } from "class-variance-authority"
import { AnimatePresence, motion } from "motion/react"

const sectionVariants = cva("mt-10 max-w-7xl mx-auto", {
  variants: {
    variant: {
      small: "mt-6",
      medium: "mt-8",
      large: "mt-10",
    },
  },
  defaultVariants: {
    variant: "small",
  },
})

const toggleContainerVariants = cva(
  "bg-muted flex h-11 w-fit shrink-0 items-center rounded-md p-1 text-lg",
  {
    variants: {
      variant: {
        small: "h-9 text-base",
        medium: "h-10 text-lg",
        large: "h-11 text-lg",
      },
    },
    defaultVariants: {
      variant: "large",
    },
  }
)

const labelPaddingVariants = cva("px-7", {
  variants: {
    variant: {
      small: "px-5",
      medium: "px-6",
      large: "px-7",
    },
  },
  defaultVariants: {
    variant: "large",
  },
})

const cardTitleVariants = cva("text-xl", {
  variants: {
    variant: {
      small: "text-lg",
      medium: "text-xl",
      large: "text-xl",
    },
  },
  defaultVariants: {
    variant: "large",
  },
})

const cardDescriptionVariants = cva("text-sm", {
  variants: {
    variant: {
      small: "text-xs",
      medium: "text-sm",
      large: "text-sm",
    },
  },
  defaultVariants: {
    variant: "large",
  },
})

const priceTextVariants = cva("text-4xl font-medium", {
  variants: {
    variant: {
      small: "text-3xl",
      medium: "text-4xl",
      large: "text-4xl",
    },
  },
  defaultVariants: {
    variant: "large",
  },
})

const featureIconVariants = cva("w-4 h-4", {
  variants: {
    variant: {
      small: "w-3 h-3",
      medium: "w-4 h-4",
      large: "w-4 h-4",
    },
  },
  defaultVariants: {
    variant: "large",
  },
})

const footerWrapperVariants = cva(
  "flex items-center justify-between bg-muted/50 p-6 border-t border-border",
  {
    variants: {
      variant: {
        small: "p-4",
        medium: "p-5",
        large: "p-6",
      },
    },
    defaultVariants: {
      variant: "large",
    },
  }
)

const footerTextVariants = cva("text-lg font-medium text-card-foreground text-left w-full my-auto", {
  variants: {
    variant: {
      small: "text-base",
      medium: "text-lg",
      large: "text-lg",
    },
  },
  defaultVariants: {
    variant: "large",
  },
})

interface PricingTableProps extends VariantProps<typeof sectionVariants> {
  className?: string
  plans: Plan[]
  onPlanSelect?: (planId: string) => void
  showFooter?: boolean
  footerText?: string
  footerButtonText?: string
  onFooterButtonClick?: () => void
}

export function PricingTableThree({ className, plans, onPlanSelect, showFooter, footerText, footerButtonText, onFooterButtonClick, variant }: PricingTableProps) {
  const [isAnnually, setIsAnnually] = useState(false);

  function calculateDiscount(monthlyPrice: string, yearlyPrice: string): number {
    const monthly = parseFloat(monthlyPrice);
    const yearly = parseFloat(yearlyPrice);

    if (
      monthlyPrice.toLowerCase() === "custom" ||
      yearlyPrice.toLowerCase() === "custom" ||
      isNaN(monthly) ||
      isNaN(yearly) ||
      monthly === 0
    ) {
      return 0;
    }

    const discount = ((monthly * 12 - yearly) / (monthly * 12)) * 100;
    return Math.round(discount);
  }

  const yearlyPriceDiscount = plans.length
    ? Math.max(
      ...plans.map((plan) =>
        calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)
      )
    )
    : 0;

  return (
    <div className={cn(sectionVariants({ variant }), className)}>
      {/* Header Section with Toggle */}
      <div className="flex flex-col justify-between md:gap-10 gap-4 md:flex-row mb-8 items-center md:items-start">
        <div className={cn(toggleContainerVariants({ variant }))}>
          <RadioGroup
            defaultValue="monthly"
            className="h-full grid-cols-2"
            onValueChange={(value) => {
              setIsAnnually(value === "annually");
            }}
          >
            <div className='has-[button[data-state="checked"]]:bg-background h-full rounded-md transition-all'>
              <RadioGroupItem
                value="monthly"
                id="monthly"
                className="peer sr-only"
              />
              <Label
                htmlFor="monthly"
                className={cn(
                  "text-muted-foreground peer-data-[state=checked]:text-primary flex h-full cursor-pointer items-center justify-center font-semibold",
                  labelPaddingVariants({ variant })
                )}
              >
                Monthly
              </Label>
            </div>
            <div className='has-[button[data-state="checked"]]:bg-background h-full rounded-md transition-all'>
              <RadioGroupItem
                value="annually"
                id="annually"
                className="peer sr-only"
              />
              <Label
                htmlFor="annually"
                className={cn(
                  "text-muted-foreground peer-data-[state=checked]:text-primary flex h-full cursor-pointer items-center justify-center gap-1 font-semibold",
                  labelPaddingVariants({ variant })
                )}
              >
                Yearly
              </Label>
            </div>
          </RadioGroup>
        </div>
        <div className="flex justify-center">
          {yearlyPriceDiscount > 0 && (
            <span className="text-xs mt-2 text-muted-foreground">
              Save upto {yearlyPriceDiscount}% with yearly plan
            </span>
          )}
        </div>
      </div>

      <div className={cn(
        "grid gap-4 md:gap-0",
        plans.length === 1 && "grid-cols-1 max-w-md mx-auto",
        plans.length === 2 && "grid-cols-1 md:grid-cols-2 max-w-4xl mx-auto",
        plans.length === 3 && "grid-cols-1 md:grid-cols-3",
        plans.length === 4 && "grid-cols-1 md:grid-cols-2 lg:grid-cols-4",
        plans.length >= 5 && "grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"
      )}>
        {plans.map((plan) => (
          <Card key={plan.id} className={cn(
            "border rounded-xl md:border-none md:rounded-none text-card-foreground flex flex-col relative transition-all duration-200 shadow-sm md:shadow-none",
            plan.highlight === true
              ? "bg-muted/30 md:-mt-8 shadow-lg z-10 md:border-t md:rounded-md border-border"
              : "bg-card"
          )}>
            {plan.badge && (
              <Badge className="absolute -top-3 left-1/2 transform -translate-x-1/2 bg-secondary text-secondary-foreground px-3 py-1 text-xs">
                {plan.badge}
              </Badge>
            )}
            <CardHeader className="pb-4">
              <div className="space-y-2">
                <h3 className={cn(cardTitleVariants({ variant }), "font-semibold text-left")}>{plan.title}</h3>
                <p className={cn(cardDescriptionVariants({ variant }), "w-full text-left text-muted-foreground")}>{plan.description}</p>
              </div>
              <div className="space-y-1 text-left">
                <AnimatePresence mode="wait">
                  {isAnnually ? (
                    <motion.div
                      key="yearly"
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      transition={{ duration: 0.3 }}
                    >
                      <span className={cn(priceTextVariants({ variant }), "text-left")}>
                        {parseFloat(plan.yearlyPrice) >= 0 && (
                          <>
                            {plan.currency}
                          </>
                        )}
                        {plan.yearlyPrice}
                        {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice) > 0 && (
                          <span className="text-xs ml-2 underline">
                            {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)}% off
                          </span>
                        )}
                      </span>
                      <p className="text-muted-foreground">Per year</p>
                    </motion.div>
                  ) : (
                    <motion.div
                      key="monthly"
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      transition={{ duration: 0.3 }}
                    >
                      <span className={cn(priceTextVariants({ variant }), "text-left")}>
                        {parseFloat(plan.monthlyPrice) >= 0 && (
                          <>
                            {plan.currency}
                          </>
                        )}
                        {plan.monthlyPrice}
                      </span>
                      <p className="text-muted-foreground">Per month</p>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
            </CardHeader>
            <CardContent className="space-y-6 flex-1 flex flex-col">
              <div className="space-y-4 flex-1">
                {plan.features.map((feature, index) => (
                  <div key={index} className="flex items-center gap-3">
                    {feature.icon === "check" ? (
                      <div className="w-2 h-2 bg-primary rounded-sm"></div>
                    ) : (
                      <div className={cn(featureIconVariants({ variant }), feature.iconColor || "text-muted-foreground")}>
                        <Check className={cn(featureIconVariants({ variant }))} />
                      </div>
                    )}
                    <span className="text-sm">{feature.name}</span>
                    <span className="ml-auto text-sm text-muted-foreground">Included</span>
                  </div>
                ))}
              </div>

              <Button
                className={cn(
                  "w-full mt-auto hover:cursor-pointer",
                  plan.highlight === true
                    ? "gap-2 whitespace-nowrap focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 shadow hover:bg-primary/90 h-9 py-2 group bg-primary text-primary-foreground ring-primary before:from-primary-foreground/20 after:from-primary-foreground/10 relative isolate inline-flex w-full items-center justify-center overflow-hidden rounded-md px-3 text-left text-sm font-medium ring-1 transition duration-300 ease-[cubic-bezier(0.4,0.36,0,1)] before:pointer-events-none before:absolute before:inset-0 before:-z-10 before:rounded-md before:bg-gradient-to-b before:opacity-80 before:transition-opacity before:duration-300 before:ease-[cubic-bezier(0.4,0.36,0,1)] after:pointer-events-none after:absolute after:inset-0 after:-z-10 after:rounded-md after:bg-gradient-to-b after:to-transparent after:mix-blend-overlay"
                    : "bg-secondary hover:bg-secondary/80 text-secondary-foreground"
                )}
                onClick={() => onPlanSelect?.(plan.id)}
              >
                {plan.buttonText}
              </Button>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Footer Section */}
      {showFooter !== false && (
        <div className={cn(
          footerWrapperVariants({ variant }),
          plans.length === 1 && "max-w-md mx-auto",
          plans.length === 2 && "max-w-4xl mx-auto"
        )}>
          <div className="flex flex-col md:flex-row gap-4 justify-between w-full">

              <p className={cn(footerTextVariants({ variant }))}>{footerText || "Pre-negotiated discounts are available to early-stage startups and nonprofits."}</p>
            <Button
              className="bg-secondary hover:bg-secondary/80 text-secondary-foreground px-6"
              onClick={onFooterButtonClick}
            >
              {footerButtonText || "Apply now"}
            </Button>
          </div>
        </div>
      )}
    </div>
  )
}
</file>

<file path="src/components/landing/footer2.tsx">
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Github, Heart } from "lucide-react";
import { BsTwitterX } from "react-icons/bs";

export function Footer2() {
    return (
        <footer className="bg-background border-t border-border w-full">
            <div className="py-12 px-4">
                <div className="max-w-6xl mx-auto">
                    {/* Top Section */}
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-8">
                        <div className="lg:col-span-1">
                            <div className="flex items-center mb-4">
                                <div className="flex items-center justify-center">
                                    <img src="/logo/Logo.svg" alt="BillingSDK Logo" className="h-8 w-40" />
                                </div>
                            </div>
                            <p className="text-sm text-muted-foreground mb-4">
                                Open-source React components for modern billing and subscription management.
                            </p>
                            <div className="flex">
                                <Button variant="ghost" size="sm" asChild>
                                    <Link href="https://github.com/dodopayments/billingsdk" target="_blank" rel="noopener noreferrer">
                                        <Github className="h-4 w-4" />
                                    </Link>
                                </Button>
                                <Button variant="ghost" size="sm" asChild>
                                    <Link href="https://dodopayments.com/" target="_blank" rel="noopener noreferrer">
                                        <img src="/logo/logo-dodo.svg" alt="Dodo Payments" className="h-4 w-4" />
                                    </Link>
                                </Button>
                                <Button variant="ghost" size="sm" asChild>
                                    <Link href="https://x.com/dodopayments" target="_blank" rel="noopener noreferrer">
                                        <BsTwitterX className="h-4 w-4" />
                                    </Link>
                                </Button>
                            </div>
                        </div>

                        <div>
                            <h4 className="font-semibold text-foreground mb-4">Components</h4>
                            <ul className="space-y-3 text-sm">
                                <li>
                                    <Link href="/docs/components/pricing-table/pricing-table-one" className="text-muted-foreground hover:text-foreground transition-colors">
                                        Pricing Tables
                                    </Link>
                                </li>
                                <li>
                                    <Link href="/docs/components/usage-meter/usage-meter-linear" className="text-muted-foreground hover:text-foreground transition-colors">
                                        Usage Meters
                                    </Link>
                                </li>
                                <li>
                                    <Link href="/docs/components/manage-subscription" className="text-muted-foreground hover:text-foreground transition-colors">
                                        Subscription Management
                                    </Link>
                                </li>
                                <li>
                                    <Link href="/docs/components/banner" className="text-muted-foreground hover:text-foreground transition-colors">
                                        Banners
                                    </Link>
                                </li>
                            </ul>
                        </div>

                        <div>
                            <h4 className="font-semibold text-foreground mb-4">Resources</h4>
                            <ul className="space-y-3 text-sm">
                                <li>
                                    <Link href="/docs" className="text-muted-foreground hover:text-foreground transition-colors">
                                        Documentation
                                    </Link>
                                </li>
                                <li>
                                    <Link href="/docs/quick-start" className="text-muted-foreground hover:text-foreground transition-colors">
                                        Quick Start
                                    </Link>
                                </li>
                                <li>
                                    <Link href="/docs/theming" className="text-muted-foreground hover:text-foreground transition-colors">
                                        Theming Guide
                                    </Link>
                                </li>
                                <li>
                                    <Link href="/docs/interfaces" className="text-muted-foreground hover:text-foreground transition-colors">
                                        Interfaces
                                    </Link>
                                </li>
                            </ul>
                        </div>

                        <div>
                            <h4 className="font-semibold text-foreground mb-4">Community</h4>
                            <ul className="space-y-3 text-sm">
                                <li>
                                    <Link href="https://github.com/dodopayments/billingsdk/issues" className="text-muted-foreground hover:text-foreground transition-colors">
                                        GitHub Issues
                                    </Link>
                                </li>
                                <li>
                                    <Link href="https://discord.com/invite/bYqAp4ayYh" className="text-muted-foreground hover:text-foreground transition-colors">
                                        Discord Server
                                    </Link>
                                </li>
                                <li>
                                    <Link href="/docs/contribution-open-source" className="text-muted-foreground hover:text-foreground transition-colors">
                                        Contributing
                                    </Link>
                                </li>
                                <li>
                                    <Link href="https://github.com/dodopayments" className="text-muted-foreground hover:text-foreground transition-colors">
                                        Dodo Payments Github
                                    </Link>
                                </li>
                            </ul>
                        </div>
                    </div>

                    {/* Bottom Section */}
                    <div className="border-t border-border/50 pt-8">
                        <div className="flex flex-col md:flex-row justify-between items-center">
                            <div className="flex flex-col md:flex-row items-center gap-4 mb-4 md:mb-0">
                                <p className="text-sm text-muted-foreground">
                                    © {new Date().getFullYear()} BillingSDK. Made with{" "}
                                    <Heart className="inline h-3 w-3 text-red-500 fill-current" />{" "}
                                    by developers at Dodo Payments, for developers.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
    )
}
</file>

<file path="src/components/landing/NavBar.tsx">
"use client";
import Image from "next/image";
import React, { useEffect, useState } from "react";
import { Button } from "../ui/button";
import Link from "next/link";
import { Github } from "lucide-react";
import { cn } from "@/lib/utils";


export const Logo = () => {
  return (
    <div className="flex items-center justify-center gap-2 mr-8">
    <Image
      src="/logo/logo-dodo.svg"
      alt="Billing SDK"
      width={28}
      height={28}
    />
    <span className="text-3xl font-display">/</span>
      <Image src="/logo/Logo.svg" alt="Billing SDK" width={120} height={120} />

  </div>
  );
};

const NavBar = () => {
  const [isScrolled, setIsScrolled] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 20);
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  return (
    <nav
      className={cn(
        `fixed top-0 left-0 right-0 z-55 flex justify-center ${
          isScrolled ? "py-0" : "p-5"} transition-all duration-300`
      )}
    >
      <div className="max-w-[1920px] mx-auto w-full">
        <div
          className={cn(
            `flex items-center w-full justify-between px-6 py-3 transition-all duration-300 ${
              isScrolled && "bg-white/10 backdrop-blur-md border border-white/20 rounded-b-lg"
            }`
          )}
        >
        <Logo />

        {/* Join Beta Button */}
        <div className="flex items-center gap-2">
          <Button variant="ghost" size="sm" asChild>
            <Link
              href="https://github.com/dodopayments/billingsdk"
              target="_blank"
              rel="noopener noreferrer"
            >
              <Github className="h-4 w-4" />
            </Link>
          </Button>
          <Button size="sm" className='bg-primary text-primary-foreground ring-primary before:from-primary-foreground/20 after:from-primary-foreground/10 relative isolate inline-flex items-center justify-center overflow-hidden rounded-md px-3 text-left text-sm font-medium ring-1 before:pointer-events-none before:absolute before:inset-0 before:-z-10 before:rounded-md before:bg-gradient-to-b before:opacity-80 before:transition-opacity before:duration-300 before:ease-[cubic-bezier(0.4,0.36,0,1)] after:pointer-events-none after:absolute after:inset-0 after:-z-10 after:rounded-md after:bg-gradient-to-b after:to-transparent after:mix-blend-overlay hover:cursor-pointer' asChild>
            <Link href="/docs">Get Started</Link>
          </Button>
          </div>
        </div>
      </div>
    </nav>
  );
};

export default NavBar;
</file>

<file path="src/components/banner-demo.tsx">
import { Banner } from "@/components/billingsdk/banner"

export default function FreeTrialBannerDemo() {
    return (
        <div className="w-full h-full flex flex-col gap-6 min-h-[500px] rounded-lg overflow-hidden bg-background-secondary border-2">
            <Banner
                title="🎉 Start your free trial today!"
                description="Get 30 days free access to all premium features"
                buttonText="Start Free Trial"
                buttonLink="https://example.com/signup"
                variant="default" // default, minimal, popup
            />

            {/* minimal hero example */}
            <section className="flex flex-col items-center justify-center text-center gap-4 py-16">
                <h1 className="text-3xl font-bold tracking-tight text-foreground-secondary">
                    Create next-generation digital products
                </h1>
                <div className="flex flex-col gap-2">

                    <p className="text-muted-foreground max-w-md">
                        Build faster with our platform
                    </p>
                    <a
                        className="underline underline-offset-4 hover:text-primary transition"
                    >
                        Get Started →
                    </a>
                </div>
            </section>
        </div>
    )
}
</file>

<file path="src/registry/billingsdk/banner.tsx">
"use client"

import type React from "react"

import { Button } from "@/components/ui/button"
import { cn } from "@/lib/utils"
import { X } from "lucide-react"
import { useState, useEffect } from "react"
import { motion, AnimatePresence } from "motion/react"

interface BannerProps {
  variant?: "default" | "minimal" | "popup"
  title: string
  description?: string
  buttonText?: string
  buttonIcon?: React.ReactNode
  buttonLink?: string
  className?: string
  autoDismiss?: number // in ms
  onDismiss?: () => void
  gradientColors?: string[]
}

export function Banner({
  variant = "default",
  title,
  description,
  buttonText,
  buttonIcon,
  buttonLink,
  className,
  autoDismiss,
  onDismiss,
  gradientColors,
}: BannerProps) {
  const [isVisible, setIsVisible] = useState(true)

  useEffect(() => {
    if (isVisible && autoDismiss) {
      const timer = setTimeout(() => handleDismiss(), autoDismiss)
      return () => clearTimeout(timer)
    }
  }, [isVisible, autoDismiss])

  const handleDismiss = () => {
    setIsVisible(false)
    onDismiss?.()
  }

  const getVariantStyles = () => {
    const hasGradient = gradientColors && gradientColors.length > 0

    switch (variant) {
      case "minimal":
        return {
          container: hasGradient
            ? "sticky top-0 z-50 w-full border-b backdrop-blur supports-[backdrop-filter]:bg-card/60"
            : "sticky top-0 z-50 w-full border-b bg-card/95 backdrop-blur supports-[backdrop-filter]:bg-card/60",
          wrapper:
            "relative container mx-auto flex flex-col sm:flex-row items-start sm:items-center justify-center px-3 sm:px-4 py-2 gap-2 sm:gap-4 max-w-2xl",
          content: "flex flex-col sm:flex-row items-start sm:items-center gap-1 sm:gap-2",
          title: "text-sm font-medium text-card-foreground leading-tight",
          description: "text-xs text-muted-foreground sm:ml-2",
          actions: "flex items-center gap-2 self-end sm:self-auto",
        }
      case "popup":
        return {
          container: hasGradient
            ? "fixed top-4 left-1/2 -translate-x-1/2 z-50 max-w-sm sm:max-w-md w-[90%] sm:w-auto border border-border rounded-lg shadow-lg backdrop-blur"
            : "fixed top-4 left-1/2 -translate-x-1/2 z-50 max-w-sm sm:max-w-md w-[90%] sm:w-auto bg-popover border border-border rounded-lg shadow-lg backdrop-blur",
          wrapper:
            "relative flex flex-col sm:flex-row items-start sm:items-center justify-between px-3 sm:px-4 py-3 gap-3 sm:gap-4",
          content: "flex flex-col sm:flex-row items-start sm:items-center gap-2 flex-1",
          title:"text-sm font-medium text-popover-foreground leading-snug",
          description:"text-xs text-muted-foreground",
          actions: "flex items-center gap-2 self-end sm:self-auto flex-shrink-0 pr-8",
        }
      default:
        return {
          container: hasGradient
            ? "sticky top-0 z-50 w-full border-b text-primary-foreground shadow-sm text-left backdrop-blur"
            : "sticky top-0 z-50 w-full border-b bg-primary text-primary-foreground shadow-sm text-left backdrop-blur",
          wrapper:
            "relative container mx-auto flex flex-col sm:flex-row items-start sm:items-center justify-between px-3 sm:px-4 py-2 sm:py-3 gap-2 sm:gap-4",
          content: "flex flex-col sm:flex-row items-start sm:items-center gap-2 w-full",
          title: hasGradient
            ? "text-sm font-medium text-foreground leading-tight"
            : "text-sm font-medium text-primary-foreground leading-tight",
          description: hasGradient
            ? "text-xs text-foreground/80"
            : "text-xs text-primary-foreground/80",
          actions: "flex items-center gap-2 self-end sm:self-auto pr-8",
        }
    }
  }

  const styles = getVariantStyles()

  const getGradientBackground = () => {
    if (!gradientColors || gradientColors.length === 0) return null

    // Use the exact gradient from the example or custom colors with proper spacing
    let gradientStops
    if (gradientColors.length === 4) {
      // Match the original example exactly
      gradientStops = `${gradientColors[0]} 0%, ${gradientColors[1]} 12.5%, ${gradientColors[2]} 25%, ${gradientColors[3]} 37.5%, ${gradientColors[0]} 50%`
    } else {
      // For other numbers of colors, use equal spacing
      gradientStops = gradientColors.map((color, index) => {
        const percentage = (index / gradientColors.length) * 100
        return `${color} ${percentage}%`
      }).join(', ')
    }

    // Use consistent filter for better visibility
    const filterValue = 'saturate(1.8) brightness(1.2)'

    return (
      <div
        className="absolute inset-0 z-[-1]"
        style={{
          maskImage: 'linear-gradient(to bottom, white, transparent), radial-gradient(circle at top center, white, transparent)',
          maskComposite: 'intersect',
          animation: 'fd-moving-banner 30s linear infinite',
          backgroundImage: `repeating-linear-gradient(70deg, ${gradientStops})`,
          backgroundSize: '200% 100%',
          filter: filterValue
        }}
      />
    )
  }

  const getAnimationProps = () => {
    switch (variant) {
      case "popup":
        return {
          initial: { opacity: 0, scale: 0.95, y: -20 },
          animate: { opacity: 1, scale: 1, y: 0 },
          exit: { opacity: 0, scale: 0.95, y: -20 },
        }
      default:
        return {
          initial: { opacity: 0, y: -12 },
          animate: { opacity: 1, y: 0 },
          exit: { opacity: 0, y: -12 },
        }
    }
  }

  return (
    <AnimatePresence>
      {isVisible && (
        <motion.div
          {...getAnimationProps()}
          transition={{ duration: 0.15, ease: "easeOut" }}
          className={cn(styles.container, className)}
        >
          {getGradientBackground()}
          <div className={styles.wrapper}>
            {/* Content */}
            <div className={styles.content}>
              <div className={variant === "minimal" ? "flex flex-col md:flex-row gap-0.5 md:gap-2" : ""}>
                <p className={styles.title}>{title}</p>
                {description && <p className={styles.description}>{description}</p>}
              </div>
            </div>

            {/* Actions */}
            <div className={styles.actions}>
              {buttonText && variant !== "minimal" && (
                <Button
                  variant={variant === "default" ? "secondary" : "default"}
                  size="sm"
                  onClick={() => window.open(buttonLink, "_blank")}
                  className={"h-8"}
                >
                  {buttonIcon && <div className="flex-shrink-0 mr-1">{buttonIcon}</div>}
                  {buttonText}
                </Button>
              )}
            </div>

            {/* Close button (always top-right) */}
            <Button
              variant="ghost"
              size="icon"
              onClick={handleDismiss}
              className={cn(
                "absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8",
                gradientColors && gradientColors.length > 0
                  ? "hover:bg-foreground/20 text-foreground"
                  : variant === "default" && "hover:bg-primary-foreground/20 text-primary-foreground",
                variant === "popup" && !gradientColors && "hover:bg-accent text-popover-foreground",
                variant === "minimal" && !gradientColors && "hover:bg-accent text-card-foreground",
              )}
            >
              <X className="h-4 w-4" />
              <span className="sr-only">Dismiss</span>
            </Button>
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  )
}

// Add CSS keyframes for the moving banner animation
if (typeof document !== 'undefined') {
  const styleSheet = document.createElement('style')
  styleSheet.textContent = `
    @keyframes fd-moving-banner {
      0% {
        background-position: 0% 50%;
      }
      50% {
        background-position: 100% 50%;
      }
      100% {
        background-position: 0% 50%;
      }
    }
  `
  document.head.appendChild(styleSheet)
}
</file>

<file path="src/registry/billingsdk/cancel-subscription-card.tsx">
"use client";

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent } from "@/components/ui/card"
import { type Plan } from "@/lib/billingsdk-config";
import { cn } from "@/lib/utils";
import { Circle } from "lucide-react";

export interface CancelSubscriptionCardProps {
    title: string;
    description: string;
    plan: Plan;
    leftPanelImageUrl?: string;
    warningTitle?: string;
    warningText?: string;
    keepButtonText?: string;
    continueButtonText?: string;
    finalTitle?: string;
    finalSubtitle?: string;
    finalWarningText?: string;
    goBackButtonText?: string;
    confirmButtonText?: string;
    onCancel: (planId: string) => Promise<void> | void;
    onKeepSubscription?: (planId: string) => Promise<void> | void;
    className?: string;
}

export function CancelSubscriptionCard({
    title,
    description,
    plan,
    leftPanelImageUrl,
    warningTitle,
    warningText,
    keepButtonText,
    continueButtonText,
    finalTitle,
    finalSubtitle,
    finalWarningText,
    goBackButtonText,
    confirmButtonText,
    onCancel,
    onKeepSubscription,
    className,
}: CancelSubscriptionCardProps) {
    const [showConfirmation, setShowConfirmation] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const handleContinueCancellation = () => {
        setShowConfirmation(true);
        setError(null);
    };

    const handleConfirmCancellation = async () => {
        try {
            setIsLoading(true);
            setError(null);
            await onCancel(plan.id);
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to cancel subscription');
        } finally {
            setIsLoading(false);
        }
    };

    const handleKeepSubscription = async () => {
        try {
            setIsLoading(true);
            setError(null);
            if (onKeepSubscription) {
                await onKeepSubscription(plan.id);
            }
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to keep subscription');
        } finally {
            setIsLoading(false);
        }
    };

    const handleGoBack = () => {
        setShowConfirmation(false);
        setError(null);
    };

    return (
        <Card className={cn("sm:max-w-[1000px] flex flex-col md:flex-row p-0 overflow-hidden w-full", leftPanelImageUrl ? "" : "sm:max-w-[500px]", className)}>
            {leftPanelImageUrl && (
                <div className="w-full md:w-1/2 min-h-[500px] relative hidden md:block overflow-hidden">
                    <img src={leftPanelImageUrl} alt="Cancel Subscription" className="absolute inset-0 w-full h-full object-cover" />
                    <div className="absolute inset-0 bg-gradient-to-r from-transparent via-background/30 to-background/90 dark:block hidden"></div>
                    <div className="absolute inset-0 bg-gradient-to-t from-background/80 via-transparent to-background/20 dark:block hidden"></div>
                </div>
            )}
            <CardContent className={cn("py-6 px-4 flex flex-col gap-4", leftPanelImageUrl ? "w-full md:w-1/2" : "w-full")}>
                <div className="flex flex-col gap-2 text-center md:text-left">
                    <h2 className="md:text-2xl text-xl font-semibold">{title}</h2>
                    <p className="md:text-sm text-xs text-muted-foreground">{description}</p>
                    {error && (
                        <div className="p-3 bg-destructive/10 border border-destructive/20 rounded-md">
                            <p className="text-sm text-destructive">{error}</p>
                        </div>
                    )}
                </div>

                {/* Plan Details */}
                {!showConfirmation && (
                    <div className="flex flex-col gap-4 p-4 bg-muted/50 rounded-lg">
                        <div className="flex items-center justify-between">
                            <div className="flex flex-col gap-1">
                                <span className="font-semibold text-lg">{plan.title} Plan</span>
                                <span className="text-sm text-muted-foreground">Current subscription</span>
                            </div>
                            <Badge variant="secondary">
                                {parseFloat(plan.monthlyPrice) >= 0 ? `${plan.currency}${plan.monthlyPrice}/monthly` : `${plan.monthlyPrice}/monthly`}
                            </Badge>
                        </div>
                        <div className="flex flex-col gap-2">
                            {plan.features.slice(0, 4).map((feature, index) => (
                                <div key={index} className="flex items-center gap-2">
                                    <Circle className="w-2 h-2 fill-primary text-primary" />
                                    <span className="text-sm text-muted-foreground">{feature.name}</span>
                                </div>
                            ))}
                        </div>
                    </div>
                )}

                {/* Warning Section */}
                {!showConfirmation && (warningTitle || warningText) && (
                    <div className="p-4 bg-muted/30 border border-border rounded-lg">
                        {warningTitle && (
                            <h3 className="font-semibold text-foreground mb-2">
                                {warningTitle}
                            </h3>
                        )}
                        {warningText && (
                            <p className="text-sm text-muted-foreground">
                                {warningText}
                            </p>
                        )}
                    </div>
                )}
                {/* Action Buttons */}
                {!showConfirmation ? (
                    <div className="flex flex-col sm:flex-row gap-3 mt-auto">
                        <Button
                            className="flex-1"
                            onClick={handleKeepSubscription}
                            disabled={isLoading}
                        >
                            {isLoading ? "Processing..." : (keepButtonText || "Keep My Subscription")}
                        </Button>
                        <Button
                            variant="destructive"
                            className="flex-1"
                            onClick={handleContinueCancellation}
                            disabled={isLoading}
                        >
                            {continueButtonText || "Continue Cancellation"}
                        </Button>
                    </div>
                ) : (
                    <div className="flex flex-col gap-4 mt-auto">
                        <div className="text-center p-4 bg-muted/50 rounded-lg">
                            <h3 className="font-semibold mb-2 text-foreground">
                                {finalTitle || "Final Confirmation"}
                            </h3>
                            <p className="text-sm text-muted-foreground mb-2">
                                {finalSubtitle || "Are you sure you want to cancel your subscription?"}
                            </p>
                            <p className="text-sm text-destructive">
                                {finalWarningText || "This action cannot be undone and you'll lose access to all premium features."}
                            </p>
                        </div>
                        <div className="flex flex-col sm:flex-row gap-3">
                            <Button
                                variant="outline"
                                className="flex-1"
                                onClick={handleGoBack}
                                disabled={isLoading}
                            >
                                {goBackButtonText || "Go Back"}
                            </Button>
                            <Button
                                variant="destructive"
                                className="flex-1"
                                onClick={handleConfirmCancellation}
                                disabled={isLoading}
                            >
                                {isLoading ? "Cancelling..." : (confirmButtonText || "Yes, Cancel Subscription")}
                            </Button>
                        </div>
                    </div>
                )}
            </CardContent>
        </Card>
    )
}
</file>

<file path="src/registry/billingsdk/cancel-subscription-dialog.tsx">
"use client";

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import {
    Dialog,
    DialogClose,
    DialogContent,
    DialogTitle,
    DialogTrigger,
} from "@/components/ui/dialog"
import { type Plan } from "@/lib/billingsdk-config";
import { cn } from "@/lib/utils";
import { X, Circle } from "lucide-react";
import { useTheme } from "@/contexts/theme-context";
import { getThemeStyles } from "@/lib/themes";

export interface CancelSubscriptionDialogProps {
    title: string;
    description: string;
    plan: Plan;
    triggerButtonText?: string;
    leftPanelImageUrl?: string;
    warningTitle?: string;
    warningText?: string;
    keepButtonText?: string;
    continueButtonText?: string;
    finalTitle?: string;
    finalSubtitle?: string;
    finalWarningText?: string;
    goBackButtonText?: string;
    confirmButtonText?: string;
    onCancel: (planId: string) => Promise<void> | void;
    onKeepSubscription?: (planId: string) => Promise<void> | void;
    onDialogClose?: () => void;
    className?: string;
}

export function CancelSubscriptionDialog({
    title,
    description,
    plan,
    triggerButtonText,
    leftPanelImageUrl,
    warningTitle,
    warningText,
    keepButtonText,
    continueButtonText,
    finalTitle,
    finalSubtitle,
    finalWarningText,
    goBackButtonText,
    confirmButtonText,
    onCancel,
    onKeepSubscription,
    onDialogClose,
    className,
}: CancelSubscriptionDialogProps) {
    const [showConfirmation, setShowConfirmation] = useState(false);
    const [isOpen, setIsOpen] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const { currentTheme, previewDarkMode } = useTheme();
    const themeStyles = getThemeStyles(currentTheme, previewDarkMode);

    const handleContinueCancellation = () => {
        setShowConfirmation(true);
        setError(null);
    };

    const handleConfirmCancellation = async () => {
        try {
            setIsLoading(true);
            setError(null);
            await onCancel(plan.id);
            handleDialogClose();
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to cancel subscription');
        } finally {
            setIsLoading(false);
        }
    };

    const handleKeepSubscription = async () => {
        try {
            setIsLoading(true);
            setError(null);
            if (onKeepSubscription) {
                await onKeepSubscription(plan.id);
            }
            handleDialogClose();
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to keep subscription');
        } finally {
            setIsLoading(false);
        }
    };

    const handleDialogClose = () => {
        setIsOpen(false);
        setShowConfirmation(false);
        setError(null);
        setIsLoading(false);
        onDialogClose?.();
    };

    const handleGoBack = () => {
        setShowConfirmation(false);
        setError(null);
    };

    // Handle keyboard shortcuts
    useEffect(() => {
        const handleKeyDown = (event: KeyboardEvent) => {
            if (!isOpen) return;

            if (event.key === 'Escape') {
                event.preventDefault();
                handleDialogClose();
            }
        };

        document.addEventListener('keydown', handleKeyDown);
        return () => document.removeEventListener('keydown', handleKeyDown);
    }, [isOpen]);

    return (
        <Dialog open={isOpen} onOpenChange={(open) => {
            if (open) {
                setIsOpen(true);
            } else {
                handleDialogClose();
            }
        }}>
            <DialogTrigger asChild>
                <Button variant="outline">{triggerButtonText || "Cancel Subscription"}</Button>
            </DialogTrigger>
            <DialogContent className={cn("sm:max-w-[1000px] flex flex-col md:flex-row p-0 overflow-hidden text-foreground w-[95%] md:w-[100%]", leftPanelImageUrl ? "" : "sm:max-w-[500px]", className)} style={themeStyles}>
                <DialogTitle className="sr-only">{title}</DialogTitle>
                <DialogClose
                    className="absolute right-4 top-4 z-10 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground"
                    onClick={handleDialogClose}
                >
                    <X className="h-4 w-4" />
                    <span className="sr-only">Close</span>
                </DialogClose>
                {leftPanelImageUrl && (
                    <div className="w-full md:w-1/2 min-h-[500px] relative hidden md:block overflow-hidden">
                        <img src={leftPanelImageUrl} alt="Cancel Subscription" className="absolute inset-0 w-full h-full object-cover" />
                        <div className="absolute inset-0 bg-gradient-to-r from-transparent via-background/30 to-background/90 dark:block hidden"></div>
                        <div className="absolute inset-0 bg-gradient-to-t from-background/80 via-transparent to-background/20 dark:block hidden"></div>
                    </div>
                )}
                <div className={cn("py-6 px-4 flex flex-col gap-4", leftPanelImageUrl ? "w-full md:w-1/2" : "w-full")}>
                    <div className="flex flex-col gap-2 text-center md:text-left">
                        <h2 className="md:text-2xl text-xl font-semibold">{title}</h2>
                        <p className="md:text-sm text-xs text-muted-foreground">{description}</p>
                        {error && (
                            <div className="p-3 bg-destructive/10 border border-destructive/20 rounded-md">
                                <p className="text-sm text-destructive">{error}</p>
                            </div>
                        )}
                    </div>

                    {/* Plan Details */}
                    {!showConfirmation && (
                        <div className="flex flex-col gap-4 p-4 bg-muted/50 rounded-lg">
                            <div className="flex items-center justify-between">
                                <div className="flex flex-col gap-1">
                                    <span className="font-semibold text-lg">{plan.title} Plan</span>
                                    <span className="text-sm text-muted-foreground">Current subscription</span>
                                </div>
                                <Badge variant="secondary">
                                    {
                                        parseFloat(plan.monthlyPrice) >= 0 ?
                                            `${plan.currency}${plan.monthlyPrice}/monthly` :
                                            `${plan.monthlyPrice}/monthly`
                                    }
                                </Badge>
                            </div>
                            <div className="flex flex-col gap-2">
                                {plan.features.slice(0, 4).map((feature, index) => (
                                    <div key={index} className="flex items-center gap-2">
                                        <Circle className="w-2 h-2 fill-primary text-primary" />
                                        <span className="text-sm text-muted-foreground">{feature.name}</span>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}

                    {/* Warning Section */}
                    {!showConfirmation && (warningTitle || warningText) && (
                        <div className="p-4 bg-muted/30 border border-border rounded-lg">
                            {warningTitle && (
                                <h3 className="font-semibold text-foreground mb-2">
                                    {warningTitle}
                                </h3>
                            )}
                            {warningText && (
                                <p className="text-sm text-muted-foreground">
                                    {warningText}
                                </p>
                            )}
                        </div>
                    )}
                    {/* Action Buttons */}
                    {!showConfirmation ? (
                        <div className="flex flex-col sm:flex-row gap-3 mt-auto">
                            <Button
                                className="flex-1"
                                onClick={handleKeepSubscription}
                                disabled={isLoading}
                            >
                                {isLoading ? "Processing..." : (keepButtonText || "Keep My Subscription")}
                            </Button>
                            <Button
                                variant="destructive"
                                className="flex-1"
                                onClick={handleContinueCancellation}
                                disabled={isLoading}
                            >
                                {continueButtonText || "Continue Cancellation"}
                            </Button>
                        </div>
                    ) : (
                        <div className="flex flex-col gap-4 mt-auto">
                            <div className="text-center p-4 bg-muted/50 rounded-lg">
                                <h3 className="font-semibold mb-2 text-foreground">
                                    {finalTitle || "Final Confirmation"}
                                </h3>
                                <p className="text-sm text-muted-foreground mb-2">
                                    {finalSubtitle || "Are you sure you want to cancel your subscription?"}
                                </p>
                                <p className="text-sm text-destructive">
                                    {finalWarningText || "This action cannot be undone and you'll lose access to all premium features."}
                                </p>
                            </div>
                            <div className="flex flex-col sm:flex-row gap-3">
                                <Button
                                    variant="outline"
                                    className="flex-1"
                                    onClick={handleGoBack}
                                    disabled={isLoading}
                                >
                                    {goBackButtonText || "Go Back"}
                                </Button>
                                <Button
                                    variant="destructive"
                                    className="flex-1"
                                    onClick={handleConfirmCancellation}
                                    disabled={isLoading}
                                >
                                    {isLoading ? "Cancelling..." : (confirmButtonText || "Yes, Cancel Subscription")}
                                </Button>
                            </div>
                        </div>
                    )}
                </div>
            </DialogContent>
        </Dialog>
    )
}
</file>

<file path="src/registry/billingsdk/pricing-table-one.tsx">
"use client";

import { Check, Zap } from "lucide-react";
import { useState, useId } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { cva, type VariantProps } from "class-variance-authority";

import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Separator } from "@/components/ui/separator";
import { type Plan } from "@/lib/billingsdk-config";
import { cn } from "@/lib/utils";

const sectionVariants = cva("py-32", {
  variants: {
    size: {
      small: "py-6 md:py-12",
      medium: "py-10 md:py-20",
      large: "py-16 md:py-32",
    },
    theme: {
      minimal: "",
      classic: "bg-gradient-to-b from-background to-muted/20 relative overflow-hidden",
    },
  },
  defaultVariants: {
    size: "medium",
    theme: "minimal",
  },
});

const titleVariants = cva("text-pretty text-left font-bold", {
  variants: {
    size: {
      small: "text-3xl lg:text-4xl",
      medium: "text-4xl lg:text-5xl",
      large: "text-4xl lg:text-6xl",
    },
    theme: {
      minimal: "",
      classic: "text-center bg-gradient-to-r from-foreground to-muted-foreground bg-clip-text text-transparent p-1",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const descriptionVariants = cva("text-muted-foreground max-w-3xl", {
  variants: {
    size: {
      small: "text-base lg:text-lg",
      medium: "text-lg lg:text-xl",
      large: "lg:text-xl",
    },
    theme: {
      minimal: "text-left",
      classic: "text-center mx-auto",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const cardVariants = cva(
  "flex w-full flex-col rounded-lg border text-left h-full transition-all duration-300",
  {
    variants: {
      size: {
        small: "p-4",
        medium: "p-5",
        large: "p-6",
      },
      theme: {
        minimal: "",
        classic: "hover:shadow-xl backdrop-blur-sm bg-card/50 border-border/50",
      },
      highlight: {
        true: "",
        false: "",
      },
    },
    compoundVariants: [
      {
        theme: "classic",
        highlight: true,
        className: "ring-2 ring-primary/20 border-primary/30 bg-gradient-to-b from-primary/5 to-transparent relative overflow-hidden",
      },
      {
        theme: "minimal",
        highlight: true,
        className: "bg-muted",
      },
    ],
    defaultVariants: {
      size: "large",
      theme: "minimal",
      highlight: false,
    },
  }
);

const priceTextVariants = cva("font-medium", {
  variants: {
    size: {
      small: "text-3xl",
      medium: "text-4xl",
      large: "text-4xl",
    },
    theme: {
      minimal: "",
      classic: "text-5xl font-extrabold bg-gradient-to-r from-foreground to-muted-foreground bg-clip-text text-transparent",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const featureIconVariants = cva("", {
  variants: {
    size: {
      small: "size-3",
      medium: "size-4",
      large: "size-4",
    },
    theme: {
      minimal: "text-primary",
      classic: "text-emerald-500",
    },
  },
  defaultVariants: {
    size: "large",
    theme: "minimal",
  },
});

const highlightBadgeVariants = cva("mb-8 block w-fit", {
  variants: {
    theme: {
      minimal: "",
      classic: "bg-gradient-to-r from-primary to-primary/80 text-primary-foreground border-primary/20 shadow-lg",
    },
  },
  defaultVariants: {
    theme: "minimal",
  },
});

const toggleVariants = cva("flex h-11 w-fit shrink-0 items-center rounded-md p-1 text-lg", {
  variants: {
    theme: {
      minimal: "bg-muted",
      classic: "bg-muted/50 backdrop-blur-sm border border-border/50 shadow-lg",
    },
  },
  defaultVariants: {
    theme: "minimal",
  },
});

const buttonVariants = cva(
  "gap-2 whitespace-nowrap focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 transition-all duration-300",
  {
    variants: {
      theme: {
        minimal: "shadow hover:bg-primary/90 h-9 py-2 group bg-primary text-primary-foreground ring-primary before:from-primary-foreground/20 after:from-primary-foreground/10 relative isolate inline-flex w-full items-center justify-center overflow-hidden rounded-md px-3 text-left text-sm font-medium ring-1 before:pointer-events-none before:absolute before:inset-0 before:-z-10 before:rounded-md before:bg-gradient-to-b before:opacity-80 before:transition-opacity before:duration-300 before:ease-[cubic-bezier(0.4,0.36,0,1)] after:pointer-events-none after:absolute after:inset-0 after:-z-10 after:rounded-md after:bg-gradient-to-b after:to-transparent after:mix-blend-overlay hover:cursor-pointer",
        classic: "relative overflow-hidden bg-gradient-to-r from-primary to-primary/80 text-primary-foreground font-semibold py-3 px-6 rounded-lg hover:shadow-xl active:scale-95 border border-primary/20",
      },
    },
    defaultVariants: {
      theme: "minimal",
    },
  }
);

interface PricingTableOneProps extends VariantProps<typeof sectionVariants> {
  className?: string;
  plans: Plan[];
  title?: string;
  description?: string;
  onPlanSelect?: (planId: string) => void;
}

export function PricingTableOne({ 
  className, 
  plans, 
  title, 
  description, 
  onPlanSelect, 
  size,
  theme = "minimal"
}: PricingTableOneProps) {
  const [isAnnually, setIsAnnually] = useState(false);
  const uniqueId = useId(); // Generate unique ID automatically

  function calculateDiscount(monthlyPrice: string, yearlyPrice: string): number {
    const monthly = parseFloat(monthlyPrice);
    const yearly = parseFloat(yearlyPrice);

    if (
      monthlyPrice.toLowerCase() === "custom" ||
      yearlyPrice.toLowerCase() === "custom" ||
      isNaN(monthly) ||
      isNaN(yearly) ||
      monthly === 0
    ) {
      return 0;
    }

    const discount = ((monthly * 12 - yearly) / (monthly * 12)) * 100;
    return Math.round(discount);
  }

  const yearlyPriceDiscount = plans.length
    ? Math.max(
      ...plans.map((plan) =>
        calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)
      )
    )
    : 0;

  return (
    <section className={cn(sectionVariants({ size, theme }), className)}>
      {/* Classic theme background elements */}
      {theme === "classic" && (
        <>
          <div className="absolute inset-0 bg-grid-pattern opacity-5" />
          <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-primary/5 rounded-full blur-3xl" />
          <div className="absolute top-1/4 right-1/4 w-64 h-64 bg-secondary/5 rounded-full blur-2xl" />
        </>
      )}
      
      <div className={cn("container relative", "p-0 md:p-[1rem]")}>
        <div className="mx-auto flex max-w-7xl flex-col gap-6">
          <div className={cn("flex flex-col gap-4", theme === "classic" && "text-center")}>
            <h2 className={cn(titleVariants({ size, theme }))}>
              {title || "Pricing"}
            </h2>
          </div>

          <div className={cn(
            "flex flex-col justify-between gap-5 md:gap-10",
            theme === "classic" ? "md:flex-col md:items-center" : "md:flex-row"
          )}>
            <p className={cn(descriptionVariants({ size, theme }))}>
              {description || "Transparent pricing with no hidden fees. Upgrade or downgrade anytime."}
            </p>
            <div className={cn(toggleVariants({ theme }), theme === "classic" && "mx-auto")}>
              <RadioGroup
                defaultValue="monthly"
                className="h-full grid-cols-2"
                onValueChange={(value) => {
                  setIsAnnually(value === "annually");
                }}
              >
                <div className='has-[button[data-state="checked"]]:bg-background h-full rounded-md transition-all'>
                  <RadioGroupItem
                    value="monthly"
                    id={`${uniqueId}-monthly`}
                    className="peer sr-only"
                  />
                  <Label
                    htmlFor={`${uniqueId}-monthly`}
                    className="text-muted-foreground peer-data-[state=checked]:text-primary flex h-full cursor-pointer items-center justify-center px-2 md:px-7 font-semibold transition-all hover:text-foreground"
                  >
                    Monthly
                  </Label>
                </div>
                <div className='has-[button[data-state="checked"]]:bg-background h-full rounded-md transition-all'>
                  <RadioGroupItem
                    value="annually"
                    id={`${uniqueId}-annually`}
                    className="peer sr-only"
                  />
                  <Label
                    htmlFor={`${uniqueId}-annually`}
                    className="text-muted-foreground peer-data-[state=checked]:text-primary flex h-full cursor-pointer items-center justify-center gap-1 px-2 md:px-7 font-semibold transition-all hover:text-foreground"
                  >
                    Yearly
                    {yearlyPriceDiscount > 0 && (
                      <span className="ml-1 rounded bg-primary/10 px-2 py-0.5 text-xs text-primary border border-primary/20 font-medium">
                        Save {yearlyPriceDiscount}%
                      </span>
                    )}
                  </Label>
                </div>
              </RadioGroup>
            </div>
          </div>

          <div className="flex w-full flex-col items-stretch gap-6 md:flex-row md:items-stretch">
            {plans.map((plan, index) => (
              <motion.div
                key={plan.id}
                layout
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.3, delay: index * 0.1 }}
                className={cn(
                  cardVariants({ 
                    size, 
                    theme, 
                    highlight: plan.highlight 
                  })
                )}
              >
                {/* Classic theme highlight effect */}
                {theme === "classic" && plan.highlight && (
                  <>
                    <div className="absolute -top-px left-1/2 -translate-x-1/2 w-32 h-px bg-gradient-to-r from-transparent via-primary to-transparent" />
                    <div className="absolute top-4 right-4">
                      <Badge className={highlightBadgeVariants({ theme })}>
                        Most Popular
                      </Badge>
                    </div>
                  </>
                )}
                
                <Badge className={cn(
                  theme === "classic" && !plan.highlight 
                    ? "bg-muted text-muted-foreground border-border/50 mb-8" 
                    : highlightBadgeVariants({ theme })
                )}>
                  {plan.title}
                </Badge>
                
                <AnimatePresence mode="wait">
                  <motion.div
                    key={isAnnually ? "year" : "month"}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -10 }}
                    transition={{ duration: 0.2 }}
                  >
                    {isAnnually ? (
                      <>
                        <span className={cn("my-auto", priceTextVariants({ size, theme }))}>
                          {parseFloat(plan.yearlyPrice) >= 0 && (
                            <>
                              {plan.currency}
                            </>
                          )}
                          {plan.yearlyPrice}
                          {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice) > 0 && (
                            <span className={cn(
                              "text-xs ml-2",
                              theme === "classic" ? "text-emerald-500 font-semibold" : "underline"
                            )}>
                              {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)}% off
                            </span>
                          )}
                        </span>
                        <p className="text-muted-foreground">per year</p>
                      </>
                    ) : (
                      <>
                        <span className={cn(priceTextVariants({ size, theme }))}>
                          {parseFloat(plan.monthlyPrice) >= 0 && (
                            <>
                              {plan.currency}
                            </>
                          )}
                          {plan.monthlyPrice}
                        </span>
                        <p className="text-muted-foreground">per month</p>
                      </>
                    )}
                  </motion.div>
                </AnimatePresence>

                <Separator className={cn(
                  "my-6",
                  theme === "classic" && "bg-gradient-to-r from-transparent via-border to-transparent"
                )} />
                
                <div className="flex h-full flex-col justify-between gap-10">
                  <ul className="text-muted-foreground space-y-4">
                    {plan.features.map((feature, featureIndex) => (
                      <motion.li 
                        key={featureIndex} 
                        className="flex items-center gap-3"
                        initial={{ opacity: 0, x: -10 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.3, delay: featureIndex * 0.05 }}
                      >
                        <Check className={cn(featureIconVariants({ size, theme }))} />
                        <span className={cn(
                          theme === "classic" && "text-foreground/90"
                        )}>
                          {feature.name}
                        </span>
                      </motion.li>
                    ))}
                  </ul>

                  <Button
                    className={buttonVariants({ theme })}
                    onClick={() => onPlanSelect?.(plan.id)}
                    aria-label={`Select ${plan.title} plan`}
                  >
                    {theme === "classic" && plan.highlight && (
                      <Zap className="w-4 h-4 mr-1" />
                    )}
                    {plan.buttonText}
                    {theme === "classic" && (
                      <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/10 to-white/0 translate-x-[-100%] hover:translate-x-[100%] transition-transform duration-700" />
                    )}
                  </Button>
                </div>
              </motion.div>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/registry/billingsdk/update-plan-card.tsx">
"use client"

import { useState } from "react"
import { motion, AnimatePresence } from "motion/react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Toggle } from "@/components/ui/toggle"
import { Label } from "@/components/ui/label"
import { type Plan } from "@/lib/billingsdk-config"
import { cn } from "@/lib/utils"

export interface UpdatePlanCardProps {
    currentPlan: Plan
    plans: Plan[]
    onPlanChange: (planId: string) => void
    className?: string
    title?: string
}

export function UpdatePlanCard({ currentPlan, plans, onPlanChange, className, title }: UpdatePlanCardProps) {
    const [isYearly, setIsYearly] = useState(false)
    const [selectedPlan, setSelectedPlan] = useState<string | undefined>(undefined)

    const getCurrentPrice = (plan: Plan) =>
        isYearly ? `${plan.yearlyPrice}` : `${plan.monthlyPrice}`

    const handlePlanChange = (planId: string) => {
        setSelectedPlan(planId)
    }

    return (
        <Card className={cn("max-w-xl mx-auto text-left overflow-hidden shadow-lg w-full", className)}>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
                <CardTitle className="text-base font-semibold">
                    {title || "Upgrade Plan"}
                </CardTitle>
                <div className="flex items-center gap-2 text-sm">
                    <Toggle
                        size="sm"
                        pressed={!isYearly}
                        onPressedChange={(pressed) => setIsYearly(!pressed)}
                        className="px-3"
                    >
                        Monthly
                    </Toggle>
                    <Toggle
                        pressed={isYearly}
                        onPressedChange={(pressed) => setIsYearly(pressed)}
                        className="px-3"
                    >
                        Yearly
                    </Toggle>
                </div>
            </CardHeader>
            <CardContent className="space-y-3">
                <RadioGroup value={selectedPlan} onValueChange={handlePlanChange}>
                    <AnimatePresence mode="wait">
                        {plans.map((plan) => (
                            <motion.div
                                key={plan.id}
                                onClick={() => handlePlanChange(plan.id)}
                                className={`p-4 rounded-lg border transition-all duration-300 shadow-sm hover:shadow-md cursor-pointer ${selectedPlan === plan.id
                                    ? "border-primary bg-gradient-to-br from-muted/60 to-muted/30 shadow-md"
                                    : "border-border hover:border-primary/50"
                                    }`}
                            >
                                <div className="flex items-start justify-between gap-3">
                                    <div className="flex gap-3 min-w-0 flex-1">
                                        <RadioGroupItem 
                                            value={plan.id} 
                                            id={plan.id} 
                                            className="flex-shrink-0 pointer-events-none" 
                                        />
                                        <div className="min-w-0 flex-1">
                                            <div className="flex items-center gap-2 flex-wrap">
                                                <Label
                                                    htmlFor={plan.id}
                                                    className="font-medium cursor-pointer"
                                                >
                                                    {plan.title}
                                                </Label>
                                                {plan.badge && (
                                                    <Badge variant="secondary" className="flex-shrink-0">{plan.badge}</Badge>
                                                )}
                                            </div>
                                            <p className="text-xs text-muted-foreground mt-1">
                                                {plan.description}
                                            </p>
                                            {plan.features.length > 0 && (
                                                <div className="pt-3">
                                                    <div className="flex flex-wrap gap-2">
                                                        {plan.features.map((feature, featureIndex) => (
                                                            <div
                                                                key={featureIndex}
                                                                className="flex items-center gap-2 px-2 py-1 rounded-lg bg-muted/20 border border-border/30 flex-shrink-0"
                                                            >
                                                                <div className="w-1.5 h-1.5 rounded-full bg-primary flex-shrink-0" />
                                                                <span className="text-xs text-muted-foreground whitespace-nowrap">
                                                                    {feature.name}
                                                                </span>
                                                            </div>
                                                        ))}
                                                    </div>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                    <div className="text-right flex-shrink-0">
                                        <div className="text-xl font-semibold">
                                            {
                                                parseFloat(getCurrentPrice(plan)) >= 0 ?
                                                    `${plan.currency}${getCurrentPrice(plan)}` :
                                                    getCurrentPrice(plan)
                                            }
                                        </div>
                                        <div className="text-xs text-muted-foreground">
                                            /{isYearly ? "year" : "month"}
                                        </div>
                                    </div>
                                </div>
                                <AnimatePresence>
                                    {selectedPlan === plan.id && (
                                        <motion.div
                                            initial={{ opacity: 0, height: 0, y: -10 }}
                                            animate={{ opacity: 1, height: "auto", y: 0 }}
                                            exit={{ opacity: 0, height: 0, y: -10 }}
                                            transition={{ duration: 0.3, ease: "easeOut" }}
                                        >
                                            <Button className="w-full mt-4"
                                                disabled={selectedPlan === currentPlan.id}
                                                onClick={() => {
                                                    onPlanChange(plan.id)
                                                }}
                                            >{selectedPlan === currentPlan.id ? "Current Plan" : "Upgrade"}</Button>
                                        </motion.div>
                                    )}
                                </AnimatePresence>
                            </motion.div>
                        ))}
                    </AnimatePresence>
                </RadioGroup>
            </CardContent>
        </Card>
    )
}
</file>

<file path="eslint.config.cjs">
const tsParser = require('@typescript-eslint/parser');
const tsPlugin = require('@typescript-eslint/eslint-plugin');
const unusedImports = require('eslint-plugin-unused-imports');
const nextPlugin = require('@next/eslint-plugin-next');

/** @type {import('eslint').Linter.Config[]} */
module.exports = [
  {
    ignores: [
      'node_modules/**',
      '.next/**',
      'dist/**',
      'out/**',
      'coverage/**',
      '**/*.d.ts'
    ]
  },
  {
    files: ['**/*.{js,jsx,ts,tsx}'],
    languageOptions: {
      parser: tsParser,
      parserOptions: {
        ecmaVersion: 'latest',
        sourceType: 'module',
        ecmaFeatures: { jsx: true }
      }
    },
    plugins: {
      '@typescript-eslint': tsPlugin,
      'unused-imports': unusedImports,
      '@next/next': nextPlugin
    },
    rules: {
      // Next.js specific rules
      '@next/next/no-html-link-for-pages': 'error',
      '@next/next/no-img-element': 'warn',
      '@next/next/no-unwanted-polyfillio': 'error',
      '@next/next/no-page-custom-font': 'error',
      '@next/next/no-sync-scripts': 'error',
      '@next/next/no-document-import-in-page': 'error',
      '@next/next/no-head-import-in-document': 'error',
      
      // Console rules - allow warn and error
      'no-console': ['warn', { allow: ['warn', 'error', 'log'] }],
      
      // Turn off base no-unused-vars in favor of TypeScript and unused-imports rules
      'no-unused-vars': 'off',
      '@typescript-eslint/no-unused-vars': 'off',
      
      // Unused imports handling
      'unused-imports/no-unused-imports': 'error',
      'unused-imports/no-unused-vars': [
        'warn',
        { vars: 'all', varsIgnorePattern: '^_', args: 'after-used', argsIgnorePattern: '^_' }
      ]
    }
  }
];
</file>

<file path="registry.json">
{
    "$schema": "https://ui.shadcn.com/schema.json",
    "name": "billingsdk",
    "homepage": "https://billingsdk.com",
    "items": [
        {
            "name": "index",
            "type": "registry:lib",
            "title": "BillingSDK Config",
            "description": "Config for BillingSDK components",
            "files": [
                {
                    "path": "src/registry/lib/billingsdk-config.ts",
                    "type": "registry:lib",
                    "target": "lib/billingsdk-config.ts"
                }
            ]
        },
        {
            "name": "all",
            "type": "registry:block",
            "title": "All Components",
            "description": "All components in the BillingSDK",
            "files": [],
            "registryDependencies": [
                "https://billingsdk.com/r/pricing-table-one.json",
                "https://billingsdk.com/r/pricing-table-two.json",
                "https://billingsdk.com/r/pricing-table-three.json",
                "https://billingsdk.com/r/cancel-subscription-dialog.json",
                "https://billingsdk.com/r/cancel-subscription-card.json",
                "https://billingsdk.com/r/update-plan-dialog.json",
                "https://billingsdk.com/r/update-plan-card.json",
                "https://billingsdk.com/r/subscription-management.json",
                "https://billingsdk.com/r/usage-meter-linear.json",
                "https://billingsdk.com/r/usage-meter-circle.json",
                "https://billingsdk.com/r/banner.json"
            ]
        },
        {
            "name": "hello-world",
            "type": "registry:block",
            "title": "Hello World Component",
            "description": "A simple hello world component",
            "files": [
                {
                    "path": "src/registry/billingsdk/hello-world.tsx",
                    "type": "registry:component",
                    "target": "components/billingsdk/hello-world.tsx"
                }
            ]
        },
        {
            "name": "pricing-table-one",
            "type": "registry:block",
            "title": "Pricing Table One",
            "description": "A pricing table component",
            "files": [
                {
                    "path": "src/registry/billingsdk/pricing-table-one.tsx",
                    "type": "registry:component",
                    "target": "components/billingsdk/pricing-table-one.tsx"
                },
                {
                    "path": "src/registry/billingsdk/demo/pricing-table-one-demo.tsx",
                    "type": "registry:component",
                    "target": "components/pricing-table-one-demo.tsx"
                },
                {
                    "path": "src/registry/lib/billingsdk-config.ts",
                    "type": "registry:lib",
                    "target": "lib/billingsdk-config.ts"
                }
            ],
            "dependencies": [
                "lucide-react",
                "class-variance-authority",
                "motion"
            ],
            "registryDependencies": [
                "button",
                "card",
                "badge",
                "switch",
                "radio-group",
                "label",
                "separator",
                "utils"
            ]
        },
        {
            "name": "pricing-table-two",
            "type": "registry:block",
            "title": "Pricing Table Two",
            "description": "A pricing table component with a feature table",
            "files": [
                {
                    "path": "src/registry/billingsdk/pricing-table-two.tsx",
                    "type": "registry:component",
                    "target": "components/billingsdk/pricing-table-two.tsx"
                },
                {
                    "path": "src/registry/billingsdk/demo/pricing-table-two-demo.tsx",
                    "type": "registry:component",
                    "target": "components/pricing-table-two-demo.tsx"
                },
                {
                    "path": "src/registry/lib/billingsdk-config.ts",
                    "type": "registry:lib",
                    "target": "lib/billingsdk-config.ts"
                }
            ],
            "dependencies": [
                "lucide-react",
                "class-variance-authority",
                "motion"
            ],
            "registryDependencies": [
                "button",
                "table",
                "switch",
                "utils"
            ]
        },
        {
            "name": "pricing-table-three",
            "type": "registry:block",
            "title": "Pricing Table Three",
            "description": "A pricing table component with a feature table",
            "files": [
                {
                    "path": "src/registry/billingsdk/pricing-table-three.tsx",
                    "type": "registry:component",
                    "target": "components/billingsdk/pricing-table-three.tsx"
                },
                {
                    "path": "src/registry/billingsdk/demo/pricing-table-three-demo.tsx",
                    "type": "registry:component",
                    "target": "components/pricing-table-three-demo.tsx"
                },
                {
                    "path": "src/registry/lib/billingsdk-config.ts",
                    "type": "registry:lib",
                    "target": "lib/billingsdk-config.ts"
                }
            ],
            "dependencies": [
                "lucide-react",
                "class-variance-authority",
                "motion"
            ],
            "registryDependencies": [
                "button",
                "card",
                "badge",
                "radio-group",
                "label",
                "utils"
            ]
        },
        {
            "name": "cancel-subscription-dialog",
            "type": "registry:block",
            "title": "Cancel Subscription Dialog",
            "description": "A cancel subscription dialog component",
            "files": [
                {
                    "path": "src/registry/billingsdk/cancel-subscription-dialog.tsx",
                    "type": "registry:component",
                    "target": "components/billingsdk/cancel-subscription-dialog.tsx"
                },
                {
                    "path": "src/registry/billingsdk/demo/cancel-subscription-dialog-demo.tsx",
                    "type": "registry:component",
                    "target": "components/cancel-subscription-dialog-demo.tsx"
                },
                {
                    "path": "src/registry/lib/billingsdk-config.ts",
                    "type": "registry:lib",
                    "target": "lib/billingsdk-config.ts"
                }
            ],
            "dependencies": [
                "lucide-react"
            ],
            "registryDependencies": [
                "button",
                "badge",
                "dialog",
                "utils"
            ]
        },
        {
            "name": "cancel-subscription-card",
            "type": "registry:block",
            "title": "Cancel Subscription Card",
            "description": "A cancel subscription card component",
            "files": [
                {
                    "path": "src/registry/billingsdk/cancel-subscription-card.tsx",
                    "type": "registry:component",
                    "target": "components/billingsdk/cancel-subscription-card.tsx"
                },
                {
                    "path": "src/registry/billingsdk/demo/cancel-subscription-card-demo.tsx",
                    "type": "registry:component",
                    "target": "components/cancel-subscription-card-demo.tsx"
                },
                {
                    "path": "src/registry/lib/billingsdk-config.ts",
                    "type": "registry:lib",
                    "target": "lib/billingsdk-config.ts"
                }
            ],
            "dependencies": [
                "lucide-react"
            ],
            "registryDependencies": [
                "button",
                "badge",
                "card",
                "utils"
            ]
        },
        {
            "name": "update-plan-dialog",
            "type": "registry:block",
            "title": "Update Plan Dialog",
            "description": "A update plan dialog component",
            "files": [
                {
                    "path": "src/registry/billingsdk/update-plan-dialog.tsx",
                    "type": "registry:component",
                    "target": "components/billingsdk/update-plan-dialog.tsx"
                },
                {
                    "path": "src/registry/billingsdk/demo/update-plan-dialog-demo.tsx",
                    "type": "registry:component",
                    "target": "components/update-plan-dialog-demo.tsx"
                },
                {
                    "path": "src/registry/lib/billingsdk-config.ts",
                    "type": "registry:lib",
                    "target": "lib/billingsdk-config.ts"
                }
            ],
            "dependencies": [
                "lucide-react",
                "motion"
            ],
            "registryDependencies": [
                "button",
                "badge",
                "radio-group",
                "toggle",
                "label",
                "dialog",
                "utils"
            ]
        },
        {
            "name": "update-plan-card",
            "type": "registry:block",
            "title": "Update Plan Card",
            "description": "A update plan card component",
            "files": [
                {
                    "path": "src/registry/billingsdk/update-plan-card.tsx",
                    "type": "registry:component",
                    "target": "components/billingsdk/update-plan-card.tsx"
                },
                {
                    "path": "src/registry/billingsdk/demo/update-plan-card-demo.tsx",
                    "type": "registry:component",
                    "target": "components/update-plan-card-demo.tsx"
                },
                {
                    "path": "src/registry/lib/billingsdk-config.ts",
                    "type": "registry:lib",
                    "target": "lib/billingsdk-config.ts"
                }
            ],
            "dependencies": [
                "lucide-react",
                "motion"
            ],
            "registryDependencies": [
                "button",
                "badge",
                "radio-group",
                "toggle",
                "label",
                "card",
                "utils"
            ]
        },
        {
            "name": "subscription-management",
            "type": "registry:block",
            "title": "Subscription Management",
            "description": "A subscription management component",
            "files": [
                {
                    "path": "src/registry/billingsdk/subscription-management.tsx",
                    "type": "registry:component",
                    "target": "components/billingsdk/subscription-management.tsx"
                },
                {
                    "path": "src/registry/billingsdk/demo/subscription-management-demo.tsx",
                    "type": "registry:component",
                    "target": "components/subscription-management-demo.tsx"
                },
                {
                    "path": "src/registry/lib/billingsdk-config.ts",
                    "type": "registry:lib",
                    "target": "lib/billingsdk-config.ts"
                }
            ],
            "dependencies": [
                "lucide-react"
            ],
            "registryDependencies": [
                "button",
                "card",
                "badge",
                "separator",
                "utils",
                "https://billingsdk.com/r/cancel-subscription-dialog.json",
                "https://billingsdk.com/r/update-plan-dialog.json"
            ]
        },
        {
            "name": "usage-meter-linear",
            "type": "registry:block",
            "title": "Usage Meter Linear",
            "description": "A usage meter linear component",
            "files": [
                {
                    "path": "src/registry/billingsdk/usage-meter.tsx",
                    "type": "registry:component",
                    "target": "components/billingsdk/usage-meter.tsx"
                },
                {
                    "path": "src/registry/billingsdk/demo/usage-meter-linear-demo.tsx",
                    "type": "registry:component",
                    "target": "components/usage-meter-linear-demo.tsx"
                }
            ],
            "dependencies": [
                "lucide-react",
                "motion"
            ],
            "registryDependencies": [
                "card",
                "badge",
                "utils"
            ]
        },
        {
            "name": "usage-meter-circle",
            "type": "registry:block",
            "title": "Usage Meter Circle",
            "description": "A usage meter circle component",
            "files": [
                {
                    "path": "src/registry/billingsdk/usage-meter.tsx",
                    "type": "registry:component",
                    "target": "components/billingsdk/usage-meter.tsx"
                },
                {
                    "path": "src/registry/billingsdk/demo/usage-meter-circle-demo.tsx",
                    "type": "registry:component",
                    "target": "components/usage-meter-circle-demo.tsx"
                }
            ],
            "dependencies": [
                "lucide-react",
                "motion"
            ],
            "registryDependencies": [
                "card",
                "badge",
                "utils"
            ]
        },
        {
            "name": "banner",
            "type": "registry:block",
            "title": "Top Banner",
            "description": "A banner component",
            "files": [
                {
                    "path": "src/registry/billingsdk/banner.tsx",
                    "type": "registry:component",
                    "target": "components/billingsdk/banner.tsx"
                },
                {
                    "path": "src/registry/billingsdk/demo/banner-demo.tsx",
                    "type": "registry:component",
                    "target": "components/banner-demo.tsx"
                }
            ],
            "dependencies": [
                "lucide-react",
                "motion"
            ],
            "registryDependencies": [
                "button",
                "utils"
            ]
        }
    ]
}
</file>

<file path="content/docs/components/banner/index.mdx">
---
title: Top Banner
description: The Top Banner component displays a banner at the top of the page.
---

You can change the variant of the banner to `default`, `minimal`, or `popup`.

## Default Banner

<Tabs items={['Preview', 'Code']} className="bg-transparent border-none">
  <Tab value="Preview" className="border-none bg-transparent p-0 mt-3">
    <PreviewComponents registryName="banner">
      <BannerDemo />
    </PreviewComponents>
  </Tab>

<Tab value="Code" className="mt-3">
  <include cwd lang="tsx" meta='title="src/components/banner-demo.tsx"'>src/components/banner-demo.tsx</include>
  </Tab>

</Tabs>

## Installation

<Tabs items={['npx', 'pnpm', 'yarn']} defaultValue="npx" groupId="installation-tabs">
  <Tab value="npx">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/banner.json
    ```
  </Tab>
  <Tab value="pnpm">
    ```bash
    pnpm dlx shadcn@latest add https://billingsdk.com/r/banner.json
    ```
  </Tab>
  <Tab value="yarn">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/banner.json
    ```
  </Tab>
</Tabs>

## Minimal Banner

<Tabs items={['Preview', 'Code']} className="bg-transparent border-none">
  <Tab value="Preview" className="border-none bg-transparent p-0 mt-3">
    <PreviewComponents registryName="banner">
      <BannerDemoTwo />
    </PreviewComponents>
  </Tab>

  <Tab value="Code" className="mt-3">
  <include cwd lang="tsx" meta='title="src/components/banner-demo-two.tsx"'>src/components/banner-demo-two.tsx</include>
  </Tab>

</Tabs>

## Popup Banner

<Tabs items={['Preview', 'Code']} className="bg-transparent border-none">
  <Tab value="Preview" className="border-none bg-transparent p-0 mt-3">
    <PreviewComponents registryName="banner">
      <BannerDemoThree />
    </PreviewComponents>
  </Tab>

  <Tab value="Code" className="mt-3">
  <include cwd lang="tsx" meta='title="src/components/banner-demo-three.tsx"'>src/components/banner-demo-three.tsx</include>
  </Tab>

</Tabs>

## Gradient Banner

The banner component supports animated gradient backgrounds with custom colors. The gradient automatically adapts to both light and dark themes.

<Tabs items={['Preview', 'Code']} className="bg-transparent border-none">
  <Tab value="Preview" className="border-none bg-transparent p-0 mt-3">
    <PreviewComponents registryName="banner">
      <BannerGradientDemo />
    </PreviewComponents>
  </Tab>

  <Tab value="Code" className="mt-3">
  <include cwd lang="tsx" meta='title="src/components/banner-gradient-demo.tsx"'>src/components/banner-gradient-demo.tsx</include>
  </Tab>

</Tabs>



## Usage

```tsx
import { Banner } from "@/components/billingsdk/banner";
```


```tsx
// Default Banner
<Banner
  title="🎉 Start your free trial today!"
  description="Get 30 days free access to all premium features"
  buttonText="Start Free Trial"
  buttonIcon={<Rocket />}
  buttonLink="https://example.com/signup"
  variant="default" // default, minimal, popup
/>
```

```tsx
// Minimal Banner
<Banner
  title="🎉 Start your free trial today!"
  description="Get 30 days free access to all premium features"
  variant="minimal" // default, minimal, popup
/>
```

```tsx
// Popup Banner
<Banner
  title="🎉 Start your free trial today!"
  description="Get 30 days free access to all premium features"
  variant="popup" // default, minimal, popup
/>
```

```tsx
// Gradient Banner
<Banner
  title="🌈 Experience the magic of gradients!"
  description="Beautiful animated gradient background with custom colors"
  buttonText="Learn More"
  buttonLink="https://example.com/gradients"
  variant="default"
  gradientColors={[
    "rgba(0,149,255,0.56)",
    "rgba(231,77,255,0.77)",
    "rgba(255,0,0,0.73)",
    "rgba(131,255,166,0.66)"
  ]}
/>
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `className` | `string` | ❌ | Additional CSS classes for styling |
| `title` | `string` | ✅ | The title of the banner |
| `description` | `string` | ❌ | The description of the banner |
| `buttonText` | `string` | ❌ | The text of the button |
| `buttonIcon` | `React.ReactNode` | ❌ | The icon of the button |
| `buttonLink` | `string` | ❌ | The link of the button |
| `variant` | `"default" \| "minimal" \| "popup"` | ✅ | The variant of the banner |
| `autoDismiss` | `number` | ❌ | The time in milliseconds to auto dismiss the banner |
| `onDismiss` | `() => void` | ❌ | The function to call when the banner is dismissed |
| `gradientColors` | `string[]` | ❌ | Array of color strings for animated gradient background |

## Gradient Colors

The `gradientColors` prop accepts an array of color strings (preferably in rgba format with alpha transparency). The gradient creates a smooth animated background effect.

### Color Guidelines:
- Use rgba colors with alpha values between 0.5-0.8 for best results
- Colors are automatically filtered for optimal contrast in both themes
- The gradient animation uses a 70-degree angle for a diagonal effect

## Example
<include cwd lang="tsx" meta='title="src/components/banner-demo.tsx"'>src/components/banner-demo.tsx</include>
</file>

<file path="content/docs/components/manage-subscription/index.mdx">
---
title: Manage Subscription
description: The Manage Subscription component provides a comprehensive interface for users to view and manage their current subscription details, including plan information, billing details, and actions to update or cancel their subscription.
---

<Tabs items={['Preview', 'Code']} className="bg-transparent border-none">
  <Tab value="Preview" className="border-none bg-transparent p-0 mt-3">
    <PreviewComponents registryName="subscription-management">
      <SubscriptionManagementDemo />
    </PreviewComponents>
  </Tab>

  <Tab value="Code" className="mt-3">
  <include cwd lang="tsx" meta='title="src/components/subscription-management-demo.tsx"'>src/components/subscription-management-demo.tsx</include>

  </Tab>
</Tabs>

## Installation

<Tabs items={['npx', 'pnpm', 'yarn']} defaultValue="npx" groupId="installation-tabs">
  <Tab value="npx">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/subscription-management.json
    ```
  </Tab>
  <Tab value="pnpm">
    ```bash
    pnpm dlx shadcn@latest add https://billingsdk.com/r/subscription-management.json
    ```
  </Tab>
  <Tab value="yarn">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/subscription-management.json
    ```
  </Tab>
</Tabs>

## Usage

```tsx
import { SubscriptionManagement } from "@/components/billingsdk/subscription-management";
import { type CurrentPlan, plans } from "@/lib/billingsdk-config";
```

```tsx
const currentPlan: CurrentPlan = {
  plan: plans[1],
  type: 'monthly',
  price: '$121',
  nextBillingDate: 'January 15, 2025',
  paymentMethod: 'Credit Card',
  status: 'active'
};
```

```tsx
<SubscriptionManagement
  className="max-w-2xl mx-auto"
  currentPlan={currentPlan}
  updatePlan={{
    currentPlan: currentPlan.plan,
    plans: plans,
    onPlanChange: (planId) => { console.log('update plan', planId) },
    triggerText: 'Update Plan'
  }}
  cancelSubscription={{
    title: 'Cancel Subscription',
    description: 'Are you sure you want to cancel your subscription?',
    plan: currentPlan.plan,
    onCancel: async (planId) => {
      // Handle cancellation
      await cancelSubscription(planId);
    },
  }}
/>
```

## Props

| Prop | Type | Required | Description |
|------|------|----------|-------------|
| `className` | `string` | ❌ | Additional CSS classes for styling |
| `currentPlan` | `CurrentPlan` | ✅ | Object containing current subscription details |
| `cancelSubscription` | `CancelSubscriptionDialogProps` | ✅ | Props for the cancel subscription dialog |
| `updatePlan` | `UpdatePlanDialogProps` | ✅ | Props for the update plan dialog |

## CurrentPlan Interface
Refer to the [CurrentPlan Interface](/docs/interfaces#currentplan-interface) for more details.

```tsx
interface CurrentPlan {
  plan: Plan;
  type: 'monthly' | 'yearly' | 'custom';
  price: string;
  nextBillingDate: string;
  paymentMethod: string;
  status: 'active' | 'inactive' | 'cancelled' | 'past_due';
}
```

## Theming

The subscription management component is styled using the `shadcn/ui` library. You can customize the colors and fonts by overriding the CSS variables. You can also get the theme from the [Theming](/docs/theming) page.

## Example
<include cwd lang="tsx" meta='title="src/components/subscription-management-demo.tsx"'>src/components/subscription-management-demo.tsx</include>
</file>

<file path="content/docs/quick-start.mdx">
---
title: Quick Start
description: Get up and running with Billing SDK in minutes
---


import { Tab, Tabs } from 'fumadocs-ui/components/tabs'
import { Callout } from 'fumadocs-ui/components/callout'

## Installation

A minimum version of Node.js 18 required. Install any component with a single command:

<Tabs items={['npm', 'pnpm', 'yarn', 'bun']}>
  <Tab value="npm">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/<component-name>.json
    ```
  </Tab>

  <Tab value="pnpm">
    ```bash
    pnpm dlx shadcn@latest add https://billingsdk.com/r/<component-name>.json
    ```
  </Tab>

  <Tab value="yarn">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/<component-name>.json
    ```
  </Tab>

  <Tab value="bun">
    ```bash
    npx shadcn@latest add https://billingsdk.com/r/<component-name>.json
    ```
  </Tab>
</Tabs>

This will automatically install the component and its dependencies into your project.

<Callout title="From Existing Project?">
  All components are designed to integrate seamlessly with existing Next.js and React applications.
</Callout>

## Your First Component

Create your first billing component setup.

```tsx title="lib/billingsdk-config.ts"
// no need to manually add this file. already added whenever you install a component.
export const plans = [{
  id: 'starter',
  title: 'Starter',
  description: 'Perfect for getting started',
  monthlyPrice: '$0',
  yearlyPrice: '$0',
  buttonText: 'Get Started',
  features: [
    { name: 'Basic features', icon: 'check' }
  ]
}]
```

Use the component in your application and see it in action.

<Tabs items={['npm', 'pnpm', 'yarn', 'bun']}>
  <Tab value="npm">
    ```bash
    npm run dev
    ```
  </Tab>

  <Tab value="pnpm">
    ```bash
    pnpm run dev
    ```
  </Tab>

  <Tab value="yarn">
    ```bash
    yarn dev
    ```
  </Tab>

  <Tab value="bun">
    ```bash
    bun run dev
    ```
  </Tab>
</Tabs>

## Quick Examples

### Install a Pricing Table

```bash
npx shadcn@latest add https://billingsdk.com/r/pricing-table-one.json
```

### Use in Your App

```tsx
import { PricingTableOne } from "@/components/billingsdk/pricing-table-one";
import { plans } from "@/lib/billingsdk-config";

export default function PricingPage() {
  return (
    <PricingTableOne 
      plans={plans}
      title="Choose Your Plan"
      description="Select the perfect plan for your needs"
      onPlanSelect={(planId) => console.log('Selected plan:', planId)}
    />
  );
}
```
</file>

<file path="public/r/pricing-table-one.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pricing-table-one",
  "type": "registry:block",
  "title": "Pricing Table One",
  "description": "A pricing table component",
  "dependencies": [
    "lucide-react",
    "class-variance-authority",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "card",
    "badge",
    "switch",
    "radio-group",
    "label",
    "separator",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/pricing-table-one.tsx",
      "content": "\"use client\";\r\n\r\nimport { Check, Zap } from \"lucide-react\";\r\nimport { useState, useId } from \"react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\n\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport { type Plan } from \"@/lib/billingsdk-config\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst sectionVariants = cva(\"py-32\", {\r\n  variants: {\r\n    size: {\r\n      small: \"py-6 md:py-12\",\r\n      medium: \"py-10 md:py-20\",\r\n      large: \"py-16 md:py-32\",\r\n    },\r\n    theme: {\r\n      minimal: \"\",\r\n      classic: \"bg-gradient-to-b from-background to-muted/20 relative overflow-hidden\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"medium\",\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst titleVariants = cva(\"text-pretty text-left font-bold\", {\r\n  variants: {\r\n    size: {\r\n      small: \"text-3xl lg:text-4xl\",\r\n      medium: \"text-4xl lg:text-5xl\",\r\n      large: \"text-4xl lg:text-6xl\",\r\n    },\r\n    theme: {\r\n      minimal: \"\",\r\n      classic: \"text-center bg-gradient-to-r from-foreground to-muted-foreground bg-clip-text text-transparent p-1\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"large\",\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst descriptionVariants = cva(\"text-muted-foreground max-w-3xl\", {\r\n  variants: {\r\n    size: {\r\n      small: \"text-base lg:text-lg\",\r\n      medium: \"text-lg lg:text-xl\",\r\n      large: \"lg:text-xl\",\r\n    },\r\n    theme: {\r\n      minimal: \"text-left\",\r\n      classic: \"text-center mx-auto\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"large\",\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst cardVariants = cva(\r\n  \"flex w-full flex-col rounded-lg border text-left h-full transition-all duration-300\",\r\n  {\r\n    variants: {\r\n      size: {\r\n        small: \"p-4\",\r\n        medium: \"p-5\",\r\n        large: \"p-6\",\r\n      },\r\n      theme: {\r\n        minimal: \"\",\r\n        classic: \"hover:shadow-xl backdrop-blur-sm bg-card/50 border-border/50\",\r\n      },\r\n      highlight: {\r\n        true: \"\",\r\n        false: \"\",\r\n      },\r\n    },\r\n    compoundVariants: [\r\n      {\r\n        theme: \"classic\",\r\n        highlight: true,\r\n        className: \"ring-2 ring-primary/20 border-primary/30 bg-gradient-to-b from-primary/5 to-transparent relative overflow-hidden\",\r\n      },\r\n      {\r\n        theme: \"minimal\",\r\n        highlight: true,\r\n        className: \"bg-muted\",\r\n      },\r\n    ],\r\n    defaultVariants: {\r\n      size: \"large\",\r\n      theme: \"minimal\",\r\n      highlight: false,\r\n    },\r\n  }\r\n);\r\n\r\nconst priceTextVariants = cva(\"font-medium\", {\r\n  variants: {\r\n    size: {\r\n      small: \"text-3xl\",\r\n      medium: \"text-4xl\",\r\n      large: \"text-4xl\",\r\n    },\r\n    theme: {\r\n      minimal: \"\",\r\n      classic: \"text-5xl font-extrabold bg-gradient-to-r from-foreground to-muted-foreground bg-clip-text text-transparent\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"large\",\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst featureIconVariants = cva(\"\", {\r\n  variants: {\r\n    size: {\r\n      small: \"size-3\",\r\n      medium: \"size-4\",\r\n      large: \"size-4\",\r\n    },\r\n    theme: {\r\n      minimal: \"text-primary\",\r\n      classic: \"text-emerald-500\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"large\",\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst highlightBadgeVariants = cva(\"mb-8 block w-fit\", {\r\n  variants: {\r\n    theme: {\r\n      minimal: \"\",\r\n      classic: \"bg-gradient-to-r from-primary to-primary/80 text-primary-foreground border-primary/20 shadow-lg\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst toggleVariants = cva(\"flex h-11 w-fit shrink-0 items-center rounded-md p-1 text-lg\", {\r\n  variants: {\r\n    theme: {\r\n      minimal: \"bg-muted\",\r\n      classic: \"bg-muted/50 backdrop-blur-sm border border-border/50 shadow-lg\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst buttonVariants = cva(\r\n  \"gap-2 whitespace-nowrap focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 transition-all duration-300\",\r\n  {\r\n    variants: {\r\n      theme: {\r\n        minimal: \"shadow hover:bg-primary/90 h-9 py-2 group bg-primary text-primary-foreground ring-primary before:from-primary-foreground/20 after:from-primary-foreground/10 relative isolate inline-flex w-full items-center justify-center overflow-hidden rounded-md px-3 text-left text-sm font-medium ring-1 before:pointer-events-none before:absolute before:inset-0 before:-z-10 before:rounded-md before:bg-gradient-to-b before:opacity-80 before:transition-opacity before:duration-300 before:ease-[cubic-bezier(0.4,0.36,0,1)] after:pointer-events-none after:absolute after:inset-0 after:-z-10 after:rounded-md after:bg-gradient-to-b after:to-transparent after:mix-blend-overlay hover:cursor-pointer\",\r\n        classic: \"relative overflow-hidden bg-gradient-to-r from-primary to-primary/80 text-primary-foreground font-semibold py-3 px-6 rounded-lg hover:shadow-xl active:scale-95 border border-primary/20\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      theme: \"minimal\",\r\n    },\r\n  }\r\n);\r\n\r\ninterface PricingTableOneProps extends VariantProps<typeof sectionVariants> {\r\n  className?: string;\r\n  plans: Plan[];\r\n  title?: string;\r\n  description?: string;\r\n  onPlanSelect?: (planId: string) => void;\r\n}\r\n\r\nexport function PricingTableOne({ \r\n  className, \r\n  plans, \r\n  title, \r\n  description, \r\n  onPlanSelect, \r\n  size,\r\n  theme = \"minimal\"\r\n}: PricingTableOneProps) {\r\n  const [isAnnually, setIsAnnually] = useState(false);\r\n  const uniqueId = useId(); // Generate unique ID automatically\r\n\r\n  function calculateDiscount(monthlyPrice: string, yearlyPrice: string): number {\r\n    const monthly = parseFloat(monthlyPrice);\r\n    const yearly = parseFloat(yearlyPrice);\r\n\r\n    if (\r\n      monthlyPrice.toLowerCase() === \"custom\" ||\r\n      yearlyPrice.toLowerCase() === \"custom\" ||\r\n      isNaN(monthly) ||\r\n      isNaN(yearly) ||\r\n      monthly === 0\r\n    ) {\r\n      return 0;\r\n    }\r\n\r\n    const discount = ((monthly * 12 - yearly) / (monthly * 12)) * 100;\r\n    return Math.round(discount);\r\n  }\r\n\r\n  const yearlyPriceDiscount = plans.length\r\n    ? Math.max(\r\n      ...plans.map((plan) =>\r\n        calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)\r\n      )\r\n    )\r\n    : 0;\r\n\r\n  return (\r\n    <section className={cn(sectionVariants({ size, theme }), className)}>\r\n      {/* Classic theme background elements */}\r\n      {theme === \"classic\" && (\r\n        <>\r\n          <div className=\"absolute inset-0 bg-grid-pattern opacity-5\" />\r\n          <div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-primary/5 rounded-full blur-3xl\" />\r\n          <div className=\"absolute top-1/4 right-1/4 w-64 h-64 bg-secondary/5 rounded-full blur-2xl\" />\r\n        </>\r\n      )}\r\n      \r\n      <div className={cn(\"container relative\", \"p-0 md:p-[1rem]\")}>\r\n        <div className=\"mx-auto flex max-w-7xl flex-col gap-6\">\r\n          <div className={cn(\"flex flex-col gap-4\", theme === \"classic\" && \"text-center\")}>\r\n            <h2 className={cn(titleVariants({ size, theme }))}>\r\n              {title || \"Pricing\"}\r\n            </h2>\r\n          </div>\r\n\r\n          <div className={cn(\r\n            \"flex flex-col justify-between gap-5 md:gap-10\",\r\n            theme === \"classic\" ? \"md:flex-col md:items-center\" : \"md:flex-row\"\r\n          )}>\r\n            <p className={cn(descriptionVariants({ size, theme }))}>\r\n              {description || \"Transparent pricing with no hidden fees. Upgrade or downgrade anytime.\"}\r\n            </p>\r\n            <div className={cn(toggleVariants({ theme }), theme === \"classic\" && \"mx-auto\")}>\r\n              <RadioGroup\r\n                defaultValue=\"monthly\"\r\n                className=\"h-full grid-cols-2\"\r\n                onValueChange={(value) => {\r\n                  setIsAnnually(value === \"annually\");\r\n                }}\r\n              >\r\n                <div className='has-[button[data-state=\"checked\"]]:bg-background h-full rounded-md transition-all'>\r\n                  <RadioGroupItem\r\n                    value=\"monthly\"\r\n                    id={`${uniqueId}-monthly`}\r\n                    className=\"peer sr-only\"\r\n                  />\r\n                  <Label\r\n                    htmlFor={`${uniqueId}-monthly`}\r\n                    className=\"text-muted-foreground peer-data-[state=checked]:text-primary flex h-full cursor-pointer items-center justify-center px-2 md:px-7 font-semibold transition-all hover:text-foreground\"\r\n                  >\r\n                    Monthly\r\n                  </Label>\r\n                </div>\r\n                <div className='has-[button[data-state=\"checked\"]]:bg-background h-full rounded-md transition-all'>\r\n                  <RadioGroupItem\r\n                    value=\"annually\"\r\n                    id={`${uniqueId}-annually`}\r\n                    className=\"peer sr-only\"\r\n                  />\r\n                  <Label\r\n                    htmlFor={`${uniqueId}-annually`}\r\n                    className=\"text-muted-foreground peer-data-[state=checked]:text-primary flex h-full cursor-pointer items-center justify-center gap-1 px-2 md:px-7 font-semibold transition-all hover:text-foreground\"\r\n                  >\r\n                    Yearly\r\n                    {yearlyPriceDiscount > 0 && (\r\n                      <span className=\"ml-1 rounded bg-primary/10 px-2 py-0.5 text-xs text-primary border border-primary/20 font-medium\">\r\n                        Save {yearlyPriceDiscount}%\r\n                      </span>\r\n                    )}\r\n                  </Label>\r\n                </div>\r\n              </RadioGroup>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex w-full flex-col items-stretch gap-6 md:flex-row md:items-stretch\">\r\n            {plans.map((plan, index) => (\r\n              <motion.div\r\n                key={plan.id}\r\n                layout\r\n                initial={{ opacity: 0 }}\r\n                animate={{ opacity: 1 }}\r\n                transition={{ duration: 0.3, delay: index * 0.1 }}\r\n                className={cn(\r\n                  cardVariants({ \r\n                    size, \r\n                    theme, \r\n                    highlight: plan.highlight \r\n                  })\r\n                )}\r\n              >\r\n                {/* Classic theme highlight effect */}\r\n                {theme === \"classic\" && plan.highlight && (\r\n                  <>\r\n                    <div className=\"absolute -top-px left-1/2 -translate-x-1/2 w-32 h-px bg-gradient-to-r from-transparent via-primary to-transparent\" />\r\n                    <div className=\"absolute top-4 right-4\">\r\n                      <Badge className={highlightBadgeVariants({ theme })}>\r\n                        Most Popular\r\n                      </Badge>\r\n                    </div>\r\n                  </>\r\n                )}\r\n                \r\n                <Badge className={cn(\r\n                  theme === \"classic\" && !plan.highlight \r\n                    ? \"bg-muted text-muted-foreground border-border/50 mb-8\" \r\n                    : highlightBadgeVariants({ theme })\r\n                )}>\r\n                  {plan.title}\r\n                </Badge>\r\n                \r\n                <AnimatePresence mode=\"wait\">\r\n                  <motion.div\r\n                    key={isAnnually ? \"year\" : \"month\"}\r\n                    initial={{ opacity: 0, y: 10 }}\r\n                    animate={{ opacity: 1, y: 0 }}\r\n                    exit={{ opacity: 0, y: -10 }}\r\n                    transition={{ duration: 0.2 }}\r\n                  >\r\n                    {isAnnually ? (\r\n                      <>\r\n                        <span className={cn(\"my-auto\", priceTextVariants({ size, theme }))}>\r\n                          {parseFloat(plan.yearlyPrice) >= 0 && (\r\n                            <>\r\n                              {plan.currency}\r\n                            </>\r\n                          )}\r\n                          {plan.yearlyPrice}\r\n                          {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice) > 0 && (\r\n                            <span className={cn(\r\n                              \"text-xs ml-2\",\r\n                              theme === \"classic\" ? \"text-emerald-500 font-semibold\" : \"underline\"\r\n                            )}>\r\n                              {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)}% off\r\n                            </span>\r\n                          )}\r\n                        </span>\r\n                        <p className=\"text-muted-foreground\">per year</p>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <span className={cn(priceTextVariants({ size, theme }))}>\r\n                          {parseFloat(plan.monthlyPrice) >= 0 && (\r\n                            <>\r\n                              {plan.currency}\r\n                            </>\r\n                          )}\r\n                          {plan.monthlyPrice}\r\n                        </span>\r\n                        <p className=\"text-muted-foreground\">per month</p>\r\n                      </>\r\n                    )}\r\n                  </motion.div>\r\n                </AnimatePresence>\r\n\r\n                <Separator className={cn(\r\n                  \"my-6\",\r\n                  theme === \"classic\" && \"bg-gradient-to-r from-transparent via-border to-transparent\"\r\n                )} />\r\n                \r\n                <div className=\"flex h-full flex-col justify-between gap-10\">\r\n                  <ul className=\"text-muted-foreground space-y-4\">\r\n                    {plan.features.map((feature, featureIndex) => (\r\n                      <motion.li \r\n                        key={featureIndex} \r\n                        className=\"flex items-center gap-3\"\r\n                        initial={{ opacity: 0, x: -10 }}\r\n                        animate={{ opacity: 1, x: 0 }}\r\n                        transition={{ duration: 0.3, delay: featureIndex * 0.05 }}\r\n                      >\r\n                        <Check className={cn(featureIconVariants({ size, theme }))} />\r\n                        <span className={cn(\r\n                          theme === \"classic\" && \"text-foreground/90\"\r\n                        )}>\r\n                          {feature.name}\r\n                        </span>\r\n                      </motion.li>\r\n                    ))}\r\n                  </ul>\r\n\r\n                  <Button\r\n                    className={buttonVariants({ theme })}\r\n                    onClick={() => onPlanSelect?.(plan.id)}\r\n                    aria-label={`Select ${plan.title} plan`}\r\n                  >\r\n                    {theme === \"classic\" && plan.highlight && (\r\n                      <Zap className=\"w-4 h-4 mr-1\" />\r\n                    )}\r\n                    {plan.buttonText}\r\n                    {theme === \"classic\" && (\r\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-white/0 via-white/10 to-white/0 translate-x-[-100%] hover:translate-x-[100%] transition-transform duration-700\" />\r\n                    )}\r\n                  </Button>\r\n                </div>\r\n              </motion.div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}",
      "type": "registry:component",
      "target": "components/billingsdk/pricing-table-one.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/pricing-table-one-demo.tsx",
      "content": "\"use client\"\r\n\r\nimport { PricingTableOne } from \"@/components/billingsdk/pricing-table-one\"\r\nimport { plans } from \"@/lib/billingsdk-config\"\r\n\r\nexport function PricingTableOneDemo() {\r\n    return <>\r\n        <PricingTableOne plans={plans}\r\n            title=\"Pricing\"\r\n            description=\"Choose the plan that's right for you\"\r\n            onPlanSelect={(planId) => console.log('Selected plan:', planId)}\r\n            size=\"small\" // small, medium, large\r\n            theme=\"classic\" // minimal or classic\r\n            className=\"w-full\"\r\n        />\r\n    </>\r\n}",
      "type": "registry:component",
      "target": "components/pricing-table-one-demo.tsx"
    },
    {
      "path": "src/registry/lib/billingsdk-config.ts",
      "content": "export interface Plan {\r\n    id: string\r\n    title: string\r\n    description: string\r\n    highlight?: boolean\r\n    type?: 'monthly' | 'yearly'\r\n    currency?: string\r\n    monthlyPrice: string\r\n    yearlyPrice: string\r\n    buttonText: string\r\n    badge?: string\r\n    features: {\r\n        name: string\r\n        icon: string\r\n        iconColor?: string\r\n    }[]\r\n}\r\n\r\nexport interface CurrentPlan {\r\n    plan: Plan\r\n    type: 'monthly' | 'yearly' | 'custom'\r\n    price?: string\r\n    nextBillingDate: string\r\n    paymentMethod: string\r\n    status: 'active' | 'inactive' | 'past_due' | 'cancelled'\r\n}\r\n\r\nexport const plans: Plan[] = [\r\n    {\r\n        id: 'starter',\r\n        title: 'Starter',\r\n        description: 'For developers testing out Liveblocks locally.',\r\n        currency: '$',\r\n        monthlyPrice: '0',\r\n        yearlyPrice: '0',\r\n        buttonText: 'Start today for free',\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        id: 'pro',\r\n        title: 'Pro',\r\n        description: 'For companies adding collaboration in production.',\r\n        currency: '$',\r\n        monthlyPrice: '20',\r\n        yearlyPrice: '199',\r\n        buttonText: 'Sign up',\r\n        badge: 'Most popular',\r\n        highlight: true,\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        id: 'enterprise',\r\n        title: 'Enterprise',\r\n        description: 'For organizations that need more support and compliance features.',\r\n        currency: '$',\r\n        monthlyPrice: 'Custom',\r\n        yearlyPrice: 'Custom',\r\n        buttonText: 'Contact sales',\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    }\r\n];\r\n",
      "type": "registry:lib",
      "target": "lib/billingsdk-config.ts"
    }
  ]
}
</file>

<file path="public/r/update-plan-dialog.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "update-plan-dialog",
  "type": "registry:block",
  "title": "Update Plan Dialog",
  "description": "A update plan dialog component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "badge",
    "radio-group",
    "toggle",
    "label",
    "dialog",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/update-plan-dialog.tsx",
      "content": "'use client';\r\n\r\nimport { motion, AnimatePresence } from \"motion/react\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\"\r\nimport { Toggle } from \"@/components/ui/toggle\"\r\nimport { Label } from \"@/components/ui/label\"\r\nimport { type Plan } from \"@/lib/billingsdk-config\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\r\nimport { useState } from \"react\"\r\nimport { useTheme } from \"@/contexts/theme-context\"\r\nimport { getThemeStyles } from \"@/lib/themes\"\r\n\r\nexport interface UpdatePlanDialogProps {\r\n    currentPlan: Plan\r\n    plans: Plan[]\r\n    triggerText: string\r\n    onPlanChange: (planId: string) => void\r\n    className?: string\r\n    title?: string\r\n}\r\n\r\nexport function UpdatePlanDialog({ currentPlan, plans, onPlanChange, className, title, triggerText }: UpdatePlanDialogProps) {\r\n    const [isYearly, setIsYearly] = useState(false);\r\n    const [selectedPlan, setSelectedPlan] = useState<string | undefined>(undefined);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const { currentTheme, previewDarkMode } = useTheme();\r\n    const themeStyles = getThemeStyles(currentTheme, previewDarkMode);\r\n\r\n    const getCurrentPrice = (plan: Plan) =>\r\n        isYearly ? `${plan.yearlyPrice}` : `${plan.monthlyPrice}`\r\n\r\n    const handlePlanChange = (planId: string) => {\r\n        setSelectedPlan(planId)\r\n    }\r\n\r\n    return (\r\n        <Dialog open={isOpen} onOpenChange={setIsOpen}>\r\n            <DialogTrigger asChild>\r\n                <Button>{triggerText || \"Update Plan\"}</Button>\r\n            </DialogTrigger>\r\n            <DialogContent className={cn(\"space-y-3 max-h-[90vh] flex flex-col text-foreground\", className)} style={themeStyles}>\r\n                <DialogHeader className=\"flex flex-row items-center justify-between py-2\">\r\n                    <DialogTitle className=\"text-base font-semibold\">\r\n                        {title || \"Upgrade Plan\"}\r\n                    </DialogTitle>\r\n                    <div className=\"flex items-center gap-2 text-sm\">\r\n                        <Toggle\r\n                            size=\"sm\"\r\n                            pressed={!isYearly}\r\n                            onPressedChange={(pressed) => setIsYearly(!pressed)}\r\n                            className=\"px-3\"\r\n                        >\r\n                            Monthly\r\n                        </Toggle>\r\n                        <Toggle\r\n                            pressed={isYearly}\r\n                            onPressedChange={(pressed) => setIsYearly(pressed)}\r\n                            className=\"px-3\"\r\n                        >\r\n                            Yearly\r\n                        </Toggle>\r\n                    </div>\r\n                </DialogHeader>\r\n                <div className=\"overflow-y-auto flex-1 min-h-0 space-y-3\">\r\n                    <RadioGroup value={selectedPlan} onValueChange={handlePlanChange}>\r\n                        <AnimatePresence mode=\"wait\">\r\n                            {plans.map((plan) => (\r\n                                <motion.div\r\n                                    key={plan.id}\r\n                                    onClick={() => handlePlanChange(plan.id)}\r\n                                    className={`p-4 rounded-lg border transition-all duration-300 shadow-sm hover:shadow-md cursor-pointer ${selectedPlan === plan.id\r\n                                        ? \"border-primary bg-gradient-to-br from-muted/60 to-muted/30 shadow-md\"\r\n                                        : \"border-border hover:border-primary/50\"\r\n                                        }`}\r\n                                >\r\n                                    <div className=\"flex items-start justify-between gap-3\">\r\n                                        <div className=\"flex gap-3 min-w-0 flex-1\">\r\n                                            <RadioGroupItem\r\n                                                value={plan.id}\r\n                                                id={plan.id}\r\n                                                className=\"flex-shrink-0 pointer-events-none\"\r\n                                            />\r\n                                            <div className=\"min-w-0 flex-1\">\r\n                                                <div className=\"flex items-center gap-2 flex-wrap\">\r\n                                                    <Label\r\n                                                        htmlFor={plan.id}\r\n                                                        className=\"font-medium cursor-pointer\"\r\n                                                    >\r\n                                                        {plan.title}\r\n                                                    </Label>\r\n                                                    {plan.badge && (\r\n                                                        <Badge variant=\"secondary\" className=\"flex-shrink-0\">{plan.badge}</Badge>\r\n                                                    )}\r\n                                                </div>\r\n                                                <p className=\"text-xs text-muted-foreground mt-1\">\r\n                                                    {plan.description}\r\n                                                </p>\r\n                                                {plan.features.length > 0 && (\r\n                                                    <div className=\"pt-3\">\r\n                                                        <div className=\"flex flex-wrap gap-2\">\r\n                                                            {plan.features.map((feature, featureIndex) => (\r\n                                                                <div\r\n                                                                    key={featureIndex}\r\n                                                                    className=\"flex items-center gap-2 px-2 py-1 rounded-lg bg-muted/20 border border-border/30 flex-shrink-0\"\r\n                                                                >\r\n                                                                    <div className=\"w-1.5 h-1.5 rounded-full bg-primary flex-shrink-0\" />\r\n                                                                    <span className=\"text-xs text-muted-foreground whitespace-nowrap\">\r\n                                                                        {feature.name}\r\n                                                                    </span>\r\n                                                                </div>\r\n                                                            ))}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"text-right flex-shrink-0\">\r\n                                            <div className=\"text-xl font-semibold\">\r\n                                                {\r\n                                                    parseFloat(getCurrentPrice(plan)) >= 0 ?\r\n                                                        `${plan.currency}${getCurrentPrice(plan)}` :\r\n                                                        getCurrentPrice(plan)\r\n                                                }\r\n                                            </div>\r\n                                            <div className=\"text-xs text-muted-foreground\">\r\n                                                /{isYearly ? \"year\" : \"month\"}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <AnimatePresence>\r\n                                        {selectedPlan === plan.id && (\r\n                                            <motion.div\r\n                                                initial={{ opacity: 0, height: 0, y: -10 }}\r\n                                                animate={{ opacity: 1, height: \"auto\", y: 0 }}\r\n                                                exit={{ opacity: 0, height: 0, y: -10 }}\r\n                                                transition={{ duration: 0.3, ease: \"easeOut\" }}\r\n                                            >\r\n                                                <Button className=\"w-full mt-4\"\r\n                                                    disabled={selectedPlan === currentPlan.id}\r\n                                                    onClick={() => {\r\n                                                        onPlanChange(plan.id)\r\n                                                        setIsOpen(false)\r\n                                                    }}\r\n                                                >{selectedPlan === currentPlan.id ? \"Current Plan\" : \"Upgrade\"}</Button>\r\n                                            </motion.div>\r\n                                        )}\r\n                                    </AnimatePresence>\r\n                                </motion.div>\r\n                            ))}\r\n                        </AnimatePresence>\r\n                    </RadioGroup>\r\n                </div>\r\n            </DialogContent>\r\n        </Dialog>\r\n\r\n    )\r\n}",
      "type": "registry:component",
      "target": "components/billingsdk/update-plan-dialog.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/update-plan-dialog-demo.tsx",
      "content": "'use client'\r\n\r\nimport { UpdatePlanDialog } from '@/components/billingsdk/update-plan-dialog';\r\nimport { plans } from '@/lib/billingsdk-config';\r\n\r\nexport function UpdatePlanDialogDemo() {\r\n\r\n  return (\r\n    <div className=\"flex flex-1 flex-col justify-center text-center p-4 mx-auto min-h-[300px]\">\r\n      <UpdatePlanDialog\r\n        currentPlan={plans[1]}\r\n        plans={plans}\r\n        onPlanChange={(planId) => {\r\n          console.log(planId)\r\n        }}\r\n        triggerText=\"Update Plan\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/update-plan-dialog-demo.tsx"
    },
    {
      "path": "src/registry/lib/billingsdk-config.ts",
      "content": "export interface Plan {\r\n    id: string\r\n    title: string\r\n    description: string\r\n    highlight?: boolean\r\n    type?: 'monthly' | 'yearly'\r\n    currency?: string\r\n    monthlyPrice: string\r\n    yearlyPrice: string\r\n    buttonText: string\r\n    badge?: string\r\n    features: {\r\n        name: string\r\n        icon: string\r\n        iconColor?: string\r\n    }[]\r\n}\r\n\r\nexport interface CurrentPlan {\r\n    plan: Plan\r\n    type: 'monthly' | 'yearly' | 'custom'\r\n    price?: string\r\n    nextBillingDate: string\r\n    paymentMethod: string\r\n    status: 'active' | 'inactive' | 'past_due' | 'cancelled'\r\n}\r\n\r\nexport const plans: Plan[] = [\r\n    {\r\n        id: 'starter',\r\n        title: 'Starter',\r\n        description: 'For developers testing out Liveblocks locally.',\r\n        currency: '$',\r\n        monthlyPrice: '0',\r\n        yearlyPrice: '0',\r\n        buttonText: 'Start today for free',\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        id: 'pro',\r\n        title: 'Pro',\r\n        description: 'For companies adding collaboration in production.',\r\n        currency: '$',\r\n        monthlyPrice: '20',\r\n        yearlyPrice: '199',\r\n        buttonText: 'Sign up',\r\n        badge: 'Most popular',\r\n        highlight: true,\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        id: 'enterprise',\r\n        title: 'Enterprise',\r\n        description: 'For organizations that need more support and compliance features.',\r\n        currency: '$',\r\n        monthlyPrice: 'Custom',\r\n        yearlyPrice: 'Custom',\r\n        buttonText: 'Contact sales',\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    }\r\n];\r\n",
      "type": "registry:lib",
      "target": "lib/billingsdk-config.ts"
    }
  ]
}
</file>

<file path="src/app/(home)/layout.tsx">
// import type { ReactNode } from "react";
// import { HomeLayout } from "fumadocs-ui/layouts/home";
// import { baseOptions } from "@/app/layout.config";

// export default function Layout({ children }: { children: ReactNode }) {
//   return (
//     <HomeLayout {...baseOptions}>
//       <div
//         className="max-w-7xl mx-auto border-x border-y border-base-900 px-2 md:px-0 w-full lg:overflow-hidden"
//         style={{
//           background:
//             "repeating-linear-gradient(125deg, transparent, transparent 6px, #e8e8e820 6px, #e8e8e820 7px)",
//         }}
//       >
//         {children}
//       </div>
//     </HomeLayout>
//   );
// }

import type { ReactNode } from "react";
import NavBar from "@/components/landing/NavBar";

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <div className="w-full max-w-[1920px] mx-auto min-h-screen bg-background">
      <NavBar />
      {/* Main Content */}
      {children}
    </div>
  );
}
</file>

<file path="src/components/billingsdk/update-plan-card.tsx">
"use client"

import { useState } from "react"
import { motion, AnimatePresence } from "motion/react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Toggle } from "@/components/ui/toggle"
import { Label } from "@/components/ui/label"
import { type Plan } from "@/lib/billingsdk-config"
import { cn } from "@/lib/utils"

export interface UpdatePlanCardProps {
    currentPlan: Plan
    plans: Plan[]
    onPlanChange: (planId: string) => void
    className?: string
    title?: string
}

export function UpdatePlanCard({ currentPlan, plans, onPlanChange, className, title }: UpdatePlanCardProps) {
    const [isYearly, setIsYearly] = useState(false)
    const [selectedPlan, setSelectedPlan] = useState<string | undefined>(undefined)

    const getCurrentPrice = (plan: Plan) =>
        isYearly ? `${plan.yearlyPrice}` : `${plan.monthlyPrice}`

    const handlePlanChange = (planId: string) => {
        setSelectedPlan(planId)
    }

    return (
        <Card className={cn("max-w-xl mx-auto text-left overflow-hidden shadow-lg w-full", className)}>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
                <CardTitle className="text-base font-semibold">
                    {title || "Upgrade Plan"}
                </CardTitle>
                <div className="flex items-center gap-2 text-sm">
                    <Toggle
                        size="sm"
                        pressed={!isYearly}
                        onPressedChange={(pressed) => setIsYearly(!pressed)}
                        className="px-3"
                    >
                        Monthly
                    </Toggle>
                    <Toggle
                        pressed={isYearly}
                        onPressedChange={(pressed) => setIsYearly(pressed)}
                        className="px-3"
                    >
                        Yearly
                    </Toggle>
                </div>
            </CardHeader>
            <CardContent className="space-y-3">
                <RadioGroup value={selectedPlan} onValueChange={handlePlanChange}>
                    <AnimatePresence mode="wait">
                        {plans.map((plan) => (
                            <motion.div
                                key={plan.id}
                                onClick={() => handlePlanChange(plan.id)}
                                className={`p-4 rounded-lg border transition-all duration-300 shadow-sm hover:shadow-md cursor-pointer ${selectedPlan === plan.id
                                    ? "border-primary bg-gradient-to-br from-muted/60 to-muted/30 shadow-md"
                                    : "border-border hover:border-primary/50"
                                    }`}
                            >
                                <div className="flex items-start justify-between gap-3">
                                    <div className="flex gap-3 min-w-0 flex-1">
                                        <RadioGroupItem 
                                            value={plan.id} 
                                            id={plan.id} 
                                            className="flex-shrink-0 pointer-events-none" 
                                        />
                                        <div className="min-w-0 flex-1">
                                            <div className="flex items-center gap-2 flex-wrap">
                                                <Label
                                                    htmlFor={plan.id}
                                                    className="font-medium cursor-pointer"
                                                >
                                                    {plan.title}
                                                </Label>
                                                {plan.badge && (
                                                    <Badge variant="secondary" className="flex-shrink-0">{plan.badge}</Badge>
                                                )}
                                            </div>
                                            <p className="text-xs text-muted-foreground mt-1">
                                                {plan.description}
                                            </p>
                                            {plan.features.length > 0 && (
                                                <div className="pt-3">
                                                    <div className="flex flex-wrap gap-2">
                                                        {plan.features.map((feature, featureIndex) => (
                                                            <div
                                                                key={featureIndex}
                                                                className="flex items-center gap-2 px-2 py-1 rounded-lg bg-muted/20 border border-border/30 flex-shrink-0"
                                                            >
                                                                <div className="w-1.5 h-1.5 rounded-full bg-primary flex-shrink-0" />
                                                                <span className="text-xs text-muted-foreground whitespace-nowrap">
                                                                    {feature.name}
                                                                </span>
                                                            </div>
                                                        ))}
                                                    </div>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                    <div className="text-right flex-shrink-0">
                                        <div className="text-xl font-semibold">
                                            {
                                                parseFloat(getCurrentPrice(plan)) >= 0 ?
                                                    `${plan.currency}${getCurrentPrice(plan)}` :
                                                    getCurrentPrice(plan)
                                            }
                                        </div>
                                        <div className="text-xs text-muted-foreground">
                                            /{isYearly ? "year" : "month"}
                                        </div>
                                    </div>
                                </div>
                                <AnimatePresence>
                                    {selectedPlan === plan.id && (
                                        <motion.div
                                            initial={{ opacity: 0, height: 0, y: -10 }}
                                            animate={{ opacity: 1, height: "auto", y: 0 }}
                                            exit={{ opacity: 0, height: 0, y: -10 }}
                                            transition={{ duration: 0.3, ease: "easeOut" }}
                                        >
                                            <Button className="w-full mt-4"
                                                disabled={selectedPlan === currentPlan.id}
                                                onClick={() => {
                                                    onPlanChange(plan.id)
                                                }}
                                            >{selectedPlan === currentPlan.id ? "Current Plan" : "Upgrade"}</Button>
                                        </motion.div>
                                    )}
                                </AnimatePresence>
                            </motion.div>
                        ))}
                    </AnimatePresence>
                </RadioGroup>
            </CardContent>
        </Card>
    )
}
</file>

<file path="src/components/billingsdk/update-plan-dialog.tsx">
'use client';

import { motion, AnimatePresence } from "motion/react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Toggle } from "@/components/ui/toggle"
import { Label } from "@/components/ui/label"
import { type Plan } from "@/lib/billingsdk-config"
import { cn } from "@/lib/utils"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { useState } from "react"
import { useTheme } from "@/contexts/theme-context"
import { getThemeStyles } from "@/lib/themes"

export interface UpdatePlanDialogProps {
    currentPlan: Plan
    plans: Plan[]
    triggerText: string
    onPlanChange: (planId: string) => void
    className?: string
    title?: string
}

export function UpdatePlanDialog({ currentPlan, plans, onPlanChange, className, title, triggerText }: UpdatePlanDialogProps) {
    const [isYearly, setIsYearly] = useState(false);
    const [selectedPlan, setSelectedPlan] = useState<string | undefined>(undefined);
    const [isOpen, setIsOpen] = useState(false);
    const { currentTheme, previewDarkMode } = useTheme();
    const themeStyles = getThemeStyles(currentTheme, previewDarkMode);

    const getCurrentPrice = (plan: Plan) =>
        isYearly ? `${plan.yearlyPrice}` : `${plan.monthlyPrice}`

    const handlePlanChange = (planId: string) => {
        setSelectedPlan(planId)
    }

    return (
        <Dialog open={isOpen} onOpenChange={setIsOpen}>
            <DialogTrigger asChild>
                <Button>{triggerText || "Update Plan"}</Button>
            </DialogTrigger>
            <DialogContent className={cn("space-y-3 max-h-[90vh] flex flex-col text-foreground", className)} style={themeStyles}>
                <DialogHeader className="flex flex-row items-center justify-between py-2">
                    <DialogTitle className="text-base font-semibold">
                        {title || "Upgrade Plan"}
                    </DialogTitle>
                    <div className="flex items-center gap-2 text-sm">
                        <Toggle
                            size="sm"
                            pressed={!isYearly}
                            onPressedChange={(pressed) => setIsYearly(!pressed)}
                            className="px-3"
                        >
                            Monthly
                        </Toggle>
                        <Toggle
                            pressed={isYearly}
                            onPressedChange={(pressed) => setIsYearly(pressed)}
                            className="px-3"
                        >
                            Yearly
                        </Toggle>
                    </div>
                </DialogHeader>
                <div className="overflow-y-auto flex-1 min-h-0 space-y-3">
                    <RadioGroup value={selectedPlan} onValueChange={handlePlanChange}>
                        <AnimatePresence mode="wait">
                            {plans.map((plan) => (
                                <motion.div
                                    key={plan.id}
                                    onClick={() => handlePlanChange(plan.id)}
                                    className={`p-4 rounded-lg border transition-all duration-300 shadow-sm hover:shadow-md cursor-pointer ${selectedPlan === plan.id
                                        ? "border-primary bg-gradient-to-br from-muted/60 to-muted/30 shadow-md"
                                        : "border-border hover:border-primary/50"
                                        }`}
                                >
                                    <div className="flex items-start justify-between gap-3">
                                        <div className="flex gap-3 min-w-0 flex-1">
                                            <RadioGroupItem
                                                value={plan.id}
                                                id={plan.id}
                                                className="flex-shrink-0 pointer-events-none"
                                            />
                                            <div className="min-w-0 flex-1">
                                                <div className="flex items-center gap-2 flex-wrap">
                                                    <Label
                                                        htmlFor={plan.id}
                                                        className="font-medium cursor-pointer"
                                                    >
                                                        {plan.title}
                                                    </Label>
                                                    {plan.badge && (
                                                        <Badge variant="secondary" className="flex-shrink-0">{plan.badge}</Badge>
                                                    )}
                                                </div>
                                                <p className="text-xs text-muted-foreground mt-1">
                                                    {plan.description}
                                                </p>
                                                {plan.features.length > 0 && (
                                                    <div className="pt-3">
                                                        <div className="flex flex-wrap gap-2">
                                                            {plan.features.map((feature, featureIndex) => (
                                                                <div
                                                                    key={featureIndex}
                                                                    className="flex items-center gap-2 px-2 py-1 rounded-lg bg-muted/20 border border-border/30 flex-shrink-0"
                                                                >
                                                                    <div className="w-1.5 h-1.5 rounded-full bg-primary flex-shrink-0" />
                                                                    <span className="text-xs text-muted-foreground whitespace-nowrap">
                                                                        {feature.name}
                                                                    </span>
                                                                </div>
                                                            ))}
                                                        </div>
                                                    </div>
                                                )}
                                            </div>
                                        </div>
                                        <div className="text-right flex-shrink-0">
                                            <div className="text-xl font-semibold">
                                                {
                                                    parseFloat(getCurrentPrice(plan)) >= 0 ?
                                                        `${plan.currency}${getCurrentPrice(plan)}` :
                                                        getCurrentPrice(plan)
                                                }
                                            </div>
                                            <div className="text-xs text-muted-foreground">
                                                /{isYearly ? "year" : "month"}
                                            </div>
                                        </div>
                                    </div>
                                    <AnimatePresence>
                                        {selectedPlan === plan.id && (
                                            <motion.div
                                                initial={{ opacity: 0, height: 0, y: -10 }}
                                                animate={{ opacity: 1, height: "auto", y: 0 }}
                                                exit={{ opacity: 0, height: 0, y: -10 }}
                                                transition={{ duration: 0.3, ease: "easeOut" }}
                                            >
                                                <Button className="w-full mt-4"
                                                    disabled={selectedPlan === currentPlan.id}
                                                    onClick={() => {
                                                        onPlanChange(plan.id)
                                                        setIsOpen(false)
                                                    }}
                                                >{selectedPlan === currentPlan.id ? "Current Plan" : "Upgrade"}</Button>
                                            </motion.div>
                                        )}
                                    </AnimatePresence>
                                </motion.div>
                            ))}
                        </AnimatePresence>
                    </RadioGroup>
                </div>
            </DialogContent>
        </Dialog>

    )
}
</file>

<file path="src/components/landing/code-section.tsx">
"use client";

import { CustomCodeBlock } from '@/components/code';

interface Code {
  title: string;
  description: string;
  code: string;
  language: string;
}

const features: Code[] = [{
  title: "Single Config for all..",
  description: "All components are configured with a single config object. No need to pass props to each component.",
  code: `export interface Plan {
    id: string
    title: string
    description: string
    highlight?: boolean
    type?: 'monthly' | 'yearly'
    currency?: string
    monthlyPrice: string
    yearlyPrice: string
    buttonText: string
    badge?: string
    features: {
        name: string
        icon: string
        iconColor?: string
    }[]
}

export interface CurrentPlan {
    plan: Plan
    type: 'monthly' | 'yearly' | 'custom'
    price?: string
    nextBillingDate: string
    paymentMethod: string
    status: 'active' | 'inactive' | 'past_due' | 'cancelled'
}

export const plans: Plan[] = [{
        id: 'pro',
        title: 'Starter',
        description: 'For developers testing out Liveblocks locally.',
        currency: '$',
        monthlyPrice: '0',
        yearlyPrice: '0',
        buttonText: 'Start today for free',
        features: [{
                name: 'Presence',
                icon: "check",
                iconColor: 'text-green-500'
            },
            {
                name: 'Comments',
                icon: "check",
                iconColor: 'text-orange-500'
            }],
    },{
        id: 'pro',
        title: 'Pro',
        description: 'For companies adding collaboration in production.',
        currency: '$',
        monthlyPrice: '20',
        yearlyPrice: '199',
        buttonText: 'Sign up',
        badge: 'Most popular',
        highlight: true,
        features: [{
                name: 'Notifications',
                icon: "check",
                iconColor: 'text-teal-500'
            },
            {
                name: 'Text Editor',
                icon: "check",
                iconColor: 'text-blue-500'
            },
            {
                name: 'Sync Datastore',
                icon: "check",
                iconColor: 'text-zinc-500'
            }],
    }]
];
`,
  language: "ts",
},

{
  title: "Drop-in Pricing Table",
  description: "Just 5 lines of code. Seriously. That's it!",
  code: `"use client"

import { PricingTableOne } from "@/components/billingsdk/pricing-table-one"
import { plans } from "@/lib/billingsdk-config"

export default function App() {
  return (
    <PricingTableOne
      plans={plans}
      onPlanSelect={(planId) => console.log(planId)}
    />
  )
}`,
  language: "tsx",
},
{
  title: "Cancel Flow? Easy Peasy!",
  description: "Complete cancellation flow with confirmation - just pass a plan!",
  code: `"use client"

import { CancelSubscriptionCard } from "@/components/billingsdk/cancel-subscription-card"
import { plans } from "@/lib/billingsdk-config"

export default function App() {
  return (
    <CancelSubscriptionCard
      plan={plans[0]}
      onCancel={(planId) => console.log('Cancelled:', planId)}
    />
  )
}`,
  language: "tsx",
},
{
  title: "Plan Upgrades in Seconds",
  description: "Beautiful plan upgrade interface - copy, paste, done!",
  code: `"use client"

import { UpdatePlanCard } from "@/components/billingsdk/update-plan-card"
import { plans } from "@/lib/billingsdk-config"

export default function App() {
  return (
    <UpdatePlanCard
      currentPlan={plans[0]}
      plans={plans}
      onPlanChange={(planId) => console.log('Upgraded to:', planId)}
    />
  )
}`,
  language: "tsx",
},
];

export function CodeSection() {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 divide-y md:divide-y-0 md:divide-x divide-accent-900 list-none border-none border-border w-full auto-rows-fr max-w-7xl mx-auto">
      {features.map((feature, index) => (
        <div
          key={index}
          className="min-h-160 bg-[radial-gradient(131.66%_109.77%_at_50%_97.75%,transparent_50%,rgba(74,0,224,0.25)_75%,rgba(0,234,255,0.3)_100%)] dark:bg-[radial-gradient(131.66%_109.77%_at_50%_97.75%,transparent_50%,#4a00e040_75%,#00eaff60_100%)] border-t border-card p-8 pt-24 pb-0 relative"
        >
          <div className="text-center">
            <h2 className="text-3xl sm:text-3xl md:text-4xl font-medium text-zinc-800 dark:text-zinc-300 font-display">
              {feature.title}
            </h2>
            <p className="text-sm mt-4 text-muted-foreground max-w-md mx-auto tracking-tight">
              {feature.description}
            </p>
          </div>

          <div className="shadow-lg border-x border-t border-border absolute bottom-0 left-0 right-0 mx-8 mt-8 h-96 overflow-hidden">
            {/* Window chrome */}
            <div className="py-2 px-4 border-b border-border bg-transparent border-l-foreground">
              <div className="flex items-center gap-1">
                <div className="size-2 outline rounded-full outline-border"></div>
                <div className="size-2 outline rounded-full outline-accent"></div>
              </div>
            </div>

            {/* Code block */}
            <CustomCodeBlock code={feature.code} language={feature.language} maxHeight="400px" />
          </div>
        </div>
      ))}
    </div>
  );
}
</file>

<file path="src/registry/billingsdk/update-plan-dialog.tsx">
'use client';

import { motion, AnimatePresence } from "motion/react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Toggle } from "@/components/ui/toggle"
import { Label } from "@/components/ui/label"
import { type Plan } from "@/lib/billingsdk-config"
import { cn } from "@/lib/utils"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { useState } from "react"
import { useTheme } from "@/contexts/theme-context"
import { getThemeStyles } from "@/lib/themes"

export interface UpdatePlanDialogProps {
    currentPlan: Plan
    plans: Plan[]
    triggerText: string
    onPlanChange: (planId: string) => void
    className?: string
    title?: string
}

export function UpdatePlanDialog({ currentPlan, plans, onPlanChange, className, title, triggerText }: UpdatePlanDialogProps) {
    const [isYearly, setIsYearly] = useState(false);
    const [selectedPlan, setSelectedPlan] = useState<string | undefined>(undefined);
    const [isOpen, setIsOpen] = useState(false);
    const { currentTheme, previewDarkMode } = useTheme();
    const themeStyles = getThemeStyles(currentTheme, previewDarkMode);

    const getCurrentPrice = (plan: Plan) =>
        isYearly ? `${plan.yearlyPrice}` : `${plan.monthlyPrice}`

    const handlePlanChange = (planId: string) => {
        setSelectedPlan(planId)
    }

    return (
        <Dialog open={isOpen} onOpenChange={setIsOpen}>
            <DialogTrigger asChild>
                <Button>{triggerText || "Update Plan"}</Button>
            </DialogTrigger>
            <DialogContent className={cn("space-y-3 max-h-[90vh] flex flex-col text-foreground", className)} style={themeStyles}>
                <DialogHeader className="flex flex-row items-center justify-between py-2">
                    <DialogTitle className="text-base font-semibold">
                        {title || "Upgrade Plan"}
                    </DialogTitle>
                    <div className="flex items-center gap-2 text-sm">
                        <Toggle
                            size="sm"
                            pressed={!isYearly}
                            onPressedChange={(pressed) => setIsYearly(!pressed)}
                            className="px-3"
                        >
                            Monthly
                        </Toggle>
                        <Toggle
                            pressed={isYearly}
                            onPressedChange={(pressed) => setIsYearly(pressed)}
                            className="px-3"
                        >
                            Yearly
                        </Toggle>
                    </div>
                </DialogHeader>
                <div className="overflow-y-auto flex-1 min-h-0 space-y-3">
                    <RadioGroup value={selectedPlan} onValueChange={handlePlanChange}>
                        <AnimatePresence mode="wait">
                            {plans.map((plan) => (
                                <motion.div
                                    key={plan.id}
                                    onClick={() => handlePlanChange(plan.id)}
                                    className={`p-4 rounded-lg border transition-all duration-300 shadow-sm hover:shadow-md cursor-pointer ${selectedPlan === plan.id
                                        ? "border-primary bg-gradient-to-br from-muted/60 to-muted/30 shadow-md"
                                        : "border-border hover:border-primary/50"
                                        }`}
                                >
                                    <div className="flex items-start justify-between gap-3">
                                        <div className="flex gap-3 min-w-0 flex-1">
                                            <RadioGroupItem
                                                value={plan.id}
                                                id={plan.id}
                                                className="flex-shrink-0 pointer-events-none"
                                            />
                                            <div className="min-w-0 flex-1">
                                                <div className="flex items-center gap-2 flex-wrap">
                                                    <Label
                                                        htmlFor={plan.id}
                                                        className="font-medium cursor-pointer"
                                                    >
                                                        {plan.title}
                                                    </Label>
                                                    {plan.badge && (
                                                        <Badge variant="secondary" className="flex-shrink-0">{plan.badge}</Badge>
                                                    )}
                                                </div>
                                                <p className="text-xs text-muted-foreground mt-1">
                                                    {plan.description}
                                                </p>
                                                {plan.features.length > 0 && (
                                                    <div className="pt-3">
                                                        <div className="flex flex-wrap gap-2">
                                                            {plan.features.map((feature, featureIndex) => (
                                                                <div
                                                                    key={featureIndex}
                                                                    className="flex items-center gap-2 px-2 py-1 rounded-lg bg-muted/20 border border-border/30 flex-shrink-0"
                                                                >
                                                                    <div className="w-1.5 h-1.5 rounded-full bg-primary flex-shrink-0" />
                                                                    <span className="text-xs text-muted-foreground whitespace-nowrap">
                                                                        {feature.name}
                                                                    </span>
                                                                </div>
                                                            ))}
                                                        </div>
                                                    </div>
                                                )}
                                            </div>
                                        </div>
                                        <div className="text-right flex-shrink-0">
                                            <div className="text-xl font-semibold">
                                                {
                                                    parseFloat(getCurrentPrice(plan)) >= 0 ?
                                                        `${plan.currency}${getCurrentPrice(plan)}` :
                                                        getCurrentPrice(plan)
                                                }
                                            </div>
                                            <div className="text-xs text-muted-foreground">
                                                /{isYearly ? "year" : "month"}
                                            </div>
                                        </div>
                                    </div>
                                    <AnimatePresence>
                                        {selectedPlan === plan.id && (
                                            <motion.div
                                                initial={{ opacity: 0, height: 0, y: -10 }}
                                                animate={{ opacity: 1, height: "auto", y: 0 }}
                                                exit={{ opacity: 0, height: 0, y: -10 }}
                                                transition={{ duration: 0.3, ease: "easeOut" }}
                                            >
                                                <Button className="w-full mt-4"
                                                    disabled={selectedPlan === currentPlan.id}
                                                    onClick={() => {
                                                        onPlanChange(plan.id)
                                                        setIsOpen(false)
                                                    }}
                                                >{selectedPlan === currentPlan.id ? "Current Plan" : "Upgrade"}</Button>
                                            </motion.div>
                                        )}
                                    </AnimatePresence>
                                </motion.div>
                            ))}
                        </AnimatePresence>
                    </RadioGroup>
                </div>
            </DialogContent>
        </Dialog>

    )
}
</file>

<file path="src/components/landing/footer.tsx">
import { Button } from "@/components/ui/button";
import Link from "next/link";

export function Footer() {
    return (
        <footer className="bg-[radial-gradient(131.66%_109.77%_at_50%_2.25%,transparent_37.41%,rgba(74,0,224,0.44)_69.27%,rgba(0,234,255,0.5)_100%)] dark:bg-[radial-gradient(131.66%_109.77%_at_50%_2.25%,transparent_37.41%,#4a00e070_69.27%,#00eaff_100%)] w-full my-5 py-20 rounded-b-xl">
            <div className="flex flex-col items-center justify-center h-full my-12 space-y-10 px-6">
                <div className="relative flex flex-col items-center justify-center">
                    <p className="text-zinc-800 dark:text-zinc-300 mt-3 tracking-tight text-xl md:text-3xl text-center">
                        Ready to use billing components and blocks for your next
                        project?
                    </p>
                    <p className="text-sm pt-2 text-muted-foreground text-center max-w-xl mx-auto">
                        Free Billing components and blocks built with React,
                        Typescript, Tailwind CSS, and Motion. Perfect companion for
                        shadcn/ui.
                    </p>
                    <div className="flex py-4 gap-2 mt-4">
                        <Button asChild className="bg-primary text-primary-foreground ring-primary before:from-primary-foreground/20 after:from-primary-foreground/10 relative isolate inline-flex items-center justify-center overflow-hidden rounded-md px-3 text-left text-sm font-medium ring-1 before:pointer-events-none before:absolute before:inset-0 before:-z-10 before:rounded-md before:bg-gradient-to-b before:opacity-80 before:transition-opacity before:duration-300 before:ease-[cubic-bezier(0.4,0.36,0,1)] after:pointer-events-none after:absolute after:inset-0 after:-z-10 after:rounded-md after:bg-gradient-to-b after:to-transparent after:mix-blend-overlay hover:cursor-pointer">
                            <Link href="/docs">Get Started</Link>
                        </Button>
                        <Button variant="secondary" asChild className="bg-secondary text-secondary-foreground ring-secondary before:from-secondary-foreground/20 after:from-secondary-foreground/10 relative isolate inline-flex items-center justify-center overflow-hidden rounded-md px-3 text-left text-sm font-medium ring-1 before:pointer-events-none before:absolute before:inset-0 before:-z-10 before:rounded-md before:bg-gradient-to-b before:opacity-80 before:transition-opacity before:duration-300 before:ease-[cubic-bezier(0.4,0.36,0,1)] after:pointer-events-none after:absolute after:inset-0 after:-z-10 after:rounded-md after:bg-gradient-to-b after:to-transparent after:mix-blend-overlay hover:cursor-pointer">
                            <Link href="/docs/components">Browse Components</Link>
                        </Button>
                    </div>
                </div>
            </div>
        </footer>
    )
}
</file>

<file path="src/components/preview/preview-components.tsx">
"use client"

import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { Palette, Check, Sun, Moon } from "lucide-react";
import { useTheme } from "@/contexts/theme-context";
import { getThemeStyles } from "@/lib/themes";
import * as DropdownMenu from "@radix-ui/react-dropdown-menu";

interface PreviewComponentsProps {  
  className?: string;
  children?: React.ReactNode;
  registryName?: string;
}

export function PreviewComponents({ className, children, registryName }: PreviewComponentsProps) {
  const { currentTheme, setTheme, themes, previewDarkMode, setPreviewDarkMode } = useTheme();
  const themeStyles = getThemeStyles(currentTheme, previewDarkMode);
  const registryUrl = `https://billingsdk.com/r/${registryName}.json`;

  return (
    <Card 
      className={cn("not-prose bg-background", className)} 
      style={themeStyles}
    >
      <CardHeader className="pb-0" style={previewDarkMode ? themes[0].cssVars.dark : themes[0].cssVars.light}>
        <div className="flex gap-2 justify-end">
          <div className="flex gap-2">
            {registryName && (
            <Button
              onClick={() => window.open(`https://v0.dev/chat/api/open?url=${registryUrl}`, '_blank')}
              size={"sm"}
              aria-label="Open in V0"
            >
              <span className="hidden md:block">Open in</span>
              <svg 
                viewBox="0 0 40 20" 
                fill="none" 
                xmlns="http://www.w3.org/2000/svg" 
                className="h-4 w-4 text-current"
              >
                <path 
                  d="M23.3919 0H32.9188C36.7819 0 39.9136 3.13165 39.9136 6.99475V16.0805H36.0006V6.99475C36.0006 6.90167 35.9969 6.80925 35.9898 6.71766L26.4628 16.079C26.4949 16.08 26.5272 16.0805 26.5595 16.0805H36.0006V19.7762H26.5595C22.6964 19.7762 19.4788 16.6139 19.4788 12.7508V3.68923H23.3919V12.7508C23.3919 12.9253 23.4054 13.0977 23.4316 13.2668L33.1682 3.6995C33.0861 3.6927 33.003 3.68923 32.9188 3.68923H23.3919V0Z" 
                  fill="currentColor"
                />
                <path 
                  d="M13.7688 19.0956L0 3.68759H5.53933L13.6231 12.7337V3.68759H17.7535V17.5746C17.7535 19.6705 15.1654 20.6584 13.7688 19.0956Z" 
                  fill="currentColor"
                />
              </svg>
            </Button>
            )}
            <Button 
              variant="ghost" 
              size="sm"
              onClick={() => setPreviewDarkMode(!previewDarkMode)}
            >
              {previewDarkMode ? (
                <Sun className="h-4 w-4" />
              ) : (
                <Moon className="h-4 w-4" />
              )}
              <span className="sr-only">Toggle preview dark mode</span>
            </Button>
            
            <DropdownMenu.Root>
              <DropdownMenu.Trigger asChild>
                <Button variant="ghost" size="sm">
                  <Palette className="h-4 w-4" />
                  <span className="sr-only">Switch theme</span>
                </Button>
              </DropdownMenu.Trigger>
              <DropdownMenu.Portal>
                <DropdownMenu.Content 
                  className="min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md z-50"
                  sideOffset={4}
                >
                  {themes.map((theme) => (
                    <DropdownMenu.Item
                      key={theme.name}
                      className={cn(
                        "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
                        "hover:bg-accent hover:text-accent-foreground"
                      )}
                      onClick={() => setTheme(theme)}
                    >
                      <div className="flex items-center gap-2">
                        <div 
                          className="h-4 w-4 rounded-full border-2 border-border"
                          style={{ 
                            background: `linear-gradient(45deg, ${theme.cssVars.light['--primary']}, ${theme.cssVars.light['--accent']})` 
                          }}
                        />
                        <span>{theme.label}</span>
                        {currentTheme.name === theme.name && (
                          <Check className="ml-auto h-4 w-4" />
                        )}
                      </div>
                    </DropdownMenu.Item>
                  ))}
                </DropdownMenu.Content>
              </DropdownMenu.Portal>
            </DropdownMenu.Root>
          </div>
        </div>
      </CardHeader>

      <CardContent className="flex flex-col gap-4 w-full h-full justify-center items-center">
        {children}
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/pricing-table-one-demo.tsx">
"use client"

import { PricingTableOne } from "@/components/billingsdk/pricing-table-one"
import { plans } from "@/lib/billingsdk-config"

export function PricingTableOneDemo() {
    return <>
        <PricingTableOne plans={plans}
            title="Pricing"
            description="Choose the plan that's right for you"
            onPlanSelect={(planId) => console.log('Selected plan:', planId)}
            size="medium" // small, medium, large
            theme="classic" // minimal or classic
            className="w-full"
        />
    </>
}
</file>

<file path="README.md">
# Billing SDK
[![GitHub stars](https://img.shields.io/github/stars/dodopayments/billingsdk?style=social)](https://github.com/dodopayments/billingsdk/stargazers)
[![Discord](https://img.shields.io/badge/chat-on%20discord-7289DA.svg)](https://discord.gg/bYqAp4ayYh)
[![Twitter Follow](https://img.shields.io/twitter/follow/dodopayments?label=Follow&style=social)](https://twitter.com/dodopayments)
![License](https://img.shields.io/github/license/dodopayments/billingsdk)


Modern, type-safe billing and subscription management components for React, built with TypeScript and Tailwind CSS. Designed to work seamlessly alongside shadcn/ui.

## Table of Contents

- [Overview](#overview)
- [Features](#features)
- [Components](#components)
- [Quick Example](#quick-example)
- [Tech Stack](#tech-stack)
- [Quick Start](#quick-start)
- [Installation in Your Project](#installation-in-your-project)
- [Documentation](#documentation)
- [Contributing](#contributing)
- [Contributors](#contributors)
- [License](#license)

## Overview

Billing SDK provides production-ready UI building blocks for pricing, usage, and subscription workflows. Drop them into your app, wire up your data, and ship faster with consistent UX.

## Features

- **Ready-to-use components**: End-to-end billing and subscription building blocks
- **Multiple themes**: Classic, Minimal, and custom theme tokens
- **Responsive by default**: Optimized for mobile, tablet, and desktop
- **TypeScript-first**: Strongly typed props for safe composition
- **Easy integration**: One-command install via shadcn/ui registry

## Components

- **Payment Method Manager**: Manage credit cards and ACH accounts for billing. [Docs](https://billingsdk.com/docs/components/payment-method-manager)
- **Pricing Tables**: Multiple variants for different use cases
- **Subscription Management**: Manage plans, status, and details
- **Usage Meters**: Linear and circular quota indicators
- **Banner Notifications**: Announcements and promotional banners
- **Plan Updates**: Upgrade/downgrade flows with clear affordances
- **Cancellation Flow**: Guided cancellation with retention patterns

### Quick Example

```tsx
import { PricingTableOne } from "@/components/billingsdk/pricing-table-one";

const plans = [
  {
    id: "starter",
    title: "Starter",
    price: 9,
    period: "month",
    features: ["100 requests", "Basic support", "1 project"],
    popular: false,
  },
  {
    id: "pro",
    title: "Pro",
    price: 29,
    period: "month",
    features: ["Unlimited requests", "Priority support", "10 projects"],
    popular: true,
  },
];

export default function App() {
  return (
    <PricingTableOne
      plans={plans}
      title="Choose your plan"
      description="Select the plan that works best for you"
      onPlanSelect={(planId) => {
        console.log("Selected plan:", planId);
      }}
      theme="classic"
      size="medium"
    />
  );
}
```

## Tech Stack

- **Runtime**: React 19, Next.js 15
- **Language**: TypeScript
- **Styling**: Tailwind CSS
- **UI**: shadcn/ui
- **Animation**: Motion

## Quick Start

1. Install dependencies
```bash
npm install
```

2. Start the development server
```bash
npm run dev
```

3. Open `http://localhost:3000`

### Installation in Your Project

Add Billing SDK components to your existing shadcn/ui project:

```bash
npx shadcn@latest add https://billingsdk.com/r/[component-name].json
```

## Documentation

Explore docs, guides and interactive examples:

[billingsdk.com/docs](https://billingsdk.com/docs)

## Contributing

See [CONTRIBUTING.md](CONTRIBUTING.md) for development setup, project structure, and contribution guidelines.

## Contributors

Thanks to all our amazing contributors for their support and code!

<a href="https://github.com/dodopayments/billingsdk/graphs/contributors">
  <img src="https://contrib.rocks/image?repo=dodopayments/billingsdk" />
</a>

## License

This project is licensed under the GNU General Public License (GPL), which allows you to use, modify, and distribute the software freely, provided that any derivative works are also distributed under the same license.
</file>

<file path="src/app/layout.config.tsx">
import { Logo } from "@/components/landing/NavBar";
import type { BaseLayoutProps } from "fumadocs-ui/layouts/shared";

/**
 * Shared layout configurations
 *
 * you can customise layouts individually from:
 * Home Layout: app/(home)/layout.tsx
 * Docs Layout: app/docs/layout.tsx
 */
export const baseOptions: BaseLayoutProps = {
  nav: {
    transparentMode: "top",
    title: <Logo />,
  },
  // see https://fumadocs.dev/docs/ui/navigation/links
  links: [],
};
</file>

<file path="src/components/landing/Features.tsx">
"use client";

import {
  Globe2Icon,
  CreditCardIcon,
  PlugZap2Icon,
  TrendingUpIcon,
  ShieldCheckIcon,
  BellIcon,
} from "lucide-react";

import { cn } from "@/lib/utils";
import React, { CSSProperties } from "react";

const features = [
  {
    id: 1,
    label: "Customizable",
    title: "<strong>Customizable</strong>",
    description:
      "Easily modify components with props and Tailwind classes to match your brand. Full control over styling, colors, and layout without compromising functionality or accessibility.",
    icon: PlugZap2Icon,
  },
  {
    id: 2,
    label: "Ready to Use",
    title: "<strong>Ready to Use</strong>",
    description:
      "Production-ready components that have been tested across different browsers and devices. No additional setup or configuration required - just import and use.",
    icon: ShieldCheckIcon,
  },
  {
    id: 3,
    label: "Copy & Paste",
    title: "<strong>Copy & Paste</strong>",
    description:
      "No package dependencies or complex installations. Simply copy the component code directly into your project and start using it immediately with full source code access.",
    icon: CreditCardIcon,
  },
  {
    id: 4,
    label: "Open Source",
    title: "<strong>Open Source</strong>",
    description:
      "Completely free to use and modify for personal and commercial projects. Access the full source code, contribute improvements, and customize to your heart's content.",
    icon: Globe2Icon,
  },
  {
    id: 5,
    label: "Fast Development",
    title: "<strong>Fast Development</strong>",
    description:
      "Skip weeks of development time with pre-built billing components. Focus on your core business logic while we handle the complex UI patterns and user flows.",
    icon: TrendingUpIcon,
  },
  {
    id: 6,
    label: "Accessible",
    title: "<strong>Accessible</strong>",
    description:
      "Built with accessibility in mind, ensuring your billing interfaces work for all users. WCAG compliant components with proper ARIA labels and keyboard navigation support.",
    icon: BellIcon,
  },
];

export default function Features() {
  return (
    <div className="flex flex-col my-24 mt-32 items-center justify-center max-w-7xl mx-auto">
      <h2 className="text-3xl sm:text-3xl font-display md:text-4xl font-medium text-primary animate-in fade-in slide-in-from-bottom-4 duration-1000">
        Why choose BillingSDK?
      </h2>
      <p className="text-sm mt-4 text-muted-foreground mb-12 max-w-xl mx-auto tracking-tight animate-in fade-in slide-in-from-bottom-4 duration-1000 delay-200">
        Beautiful, customizable billing components that save you development time and effort.
      </p>

      <div className="relative rounded-none -pr-2  ">
        <div className="w-full md:mx-0">
          <div className="grid grid-cols-1 relative md:grid-rows-2 md:grid-cols-3">
            {features.map((feature, index) => (
              <div
                key={feature.id}
                className={cn(
                  "justify-center md:min-h-[240px] transform-gpu flex flex-col p-10 2xl:p-12 animate-in fade-in slide-in-from-bottom-6 duration-1000",
                  // Add right border for all except last column
                  (index + 1) % 3 !== 0 && "md:border-r-[1.2px]",
                  // Add bottom border for first row
                  index < 3 && "md:border-b-[1.2px]",
                  // Add top border for mobile
                  index > 0 && "border-t-[1.2px] md:border-t-0"
                )}
                style={{
                  animationDelay: `${500 + index * 150}ms`,
                } as CSSProperties}
              >
                <div className="mt-2">
                  <div className="max-w-full">
                    <div className="flex gap-3 ">
                      <p
                        className="max-w-lg text-xl font-normal tracking-tighter md:text-2xl"
                        dangerouslySetInnerHTML={{
                          __html: feature.title,
                        }}
                      />
                    </div>
                  </div>
                                     <p className="mt-2 text-sm text-left text-muted-foreground">
                     {feature.description}
                   </p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/landing/components.tsx">
"use client"
import { useState, useEffect, useRef } from "react";
import { cn } from "@/lib/utils";
import { PreviewComponents } from "@/components/preview/preview-components";
import { PricingTableOne } from "@/components/billingsdk/pricing-table-one";
import { plans } from "@/lib/billingsdk-config";
import { Banner } from "@/components/billingsdk/banner";
import { UsageMeter } from "@/components/billingsdk/usage-meter";
import { SubscriptionManagementDemo } from "@/components/subscription-management-demo";
import { UpdatePlanCardDemo } from "@/components/update-plan-card-demo";
import { CancelSubscriptionCard } from "@/registry/billingsdk/cancel-subscription-card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { AiOutlineDollar } from "react-icons/ai";
import { FiSettings } from "react-icons/fi";
import { BsBell } from "react-icons/bs";
import { BiBarChartAlt2, BiArrowToTop } from "react-icons/bi";
import { MdClose } from "react-icons/md";
import { motion } from "framer-motion";

export function ComponentsSection() {
    return (
        <div className="md:px-8 py-12 relative overflow-hidden w-full max-w-7xl mx-auto">
            <div className="text-center">
                <h2 className="text-3xl sm:text-3xl font-display md:text-4xl font-medium text-primary">
                    Explore Interactive Billing Components
                </h2>
                <p className="text-sm mt-4 text-muted-foreground max-w-2xl mx-auto tracking-tight">
                    Interact with real-time UI elements designed to streamline your billing workflows.
                </p>
            </div>
            <ComponentsShowcase />
        </div>
    );
}

function ComponentsShowcase() {
    const [active, setActive] = useState("pricing");
    const [isAutoRotating, setIsAutoRotating] = useState(true);
    const [isHovered, setIsHovered] = useState(false);
    const [borderPosition, setBorderPosition] = useState({ left: 0, top: 0, width: 0, height: 2 });
    const tabsListRef = useRef<HTMLDivElement>(null);

    const components = [
        { id: "pricing", label: "Pricing", icon: AiOutlineDollar },
        { id: "subscription", label: "Subscription Management", icon: FiSettings },
        { id: "banner", label: "Banner Notifications", icon: BsBell },
        { id: "usage", label: "Usage Meters", icon: BiBarChartAlt2 },
        { id: "updates", label: "Plan Updates", icon: BiArrowToTop },
        { id: "cancellation", label: "Cancellation Flow", icon: MdClose },
    ];

    useEffect(() => {
        if (!tabsListRef.current) return;

        const tabsList = tabsListRef.current;
        const activeTab = tabsList.querySelector(`[data-state="active"]`) as HTMLElement;
        const isMobile = window.innerWidth < 640;

        if (activeTab) {
            const tabsListRect = tabsList.getBoundingClientRect();
            const activeTabRect = activeTab.getBoundingClientRect();

            if (isMobile) {
                // Vertical layout - left border
                setBorderPosition({
                    left: 0,
                    top: activeTabRect.top - tabsListRect.top,
                    width: 2,
                    height: activeTabRect.height
                });
            } else {
                // Horizontal layout - bottom border
                setBorderPosition({
                    left: activeTabRect.left - tabsListRect.left,
                    top: tabsListRect.height - 2, // Position at bottom of container
                    width: activeTabRect.width,
                    height: 2
                });
            }
        }
    }, [active]);

    useEffect(() => {
        if (!isAutoRotating || isHovered) return;

        const interval = setInterval(() => {
            handleTransition();
        }, 6000);

        return () => clearInterval(interval);
    }, [active, isAutoRotating, isHovered]);

    const handleTransition = (targetComponent?: string) => {
        const currentIndex = components.findIndex(comp => comp.id === active);
        let nextComponent;

        if (targetComponent) {
            nextComponent = targetComponent;
        } else {
            const nextIndex = (currentIndex + 1) % components.length;
            nextComponent = components[nextIndex].id;
        }

        setActive(nextComponent);
    };

    const handleComponentClick = (componentId: string) => {
        if (componentId === active) return;

        handleTransition(componentId);
        setIsAutoRotating(false);

        setTimeout(() => {
            setIsAutoRotating(true);
        }, 15000);
    };

    return (
        <div id="components-showcase"
            className="flex flex-col gap-3 my-auto w-full mt-5">
            <div className="relative flex flex-col sm:flex-row w-full overflow-x-auto scrollbar-hide justify-start sm:justify-center">
                <Tabs value={active} onValueChange={handleComponentClick} className="w-full">
                    <div className="flex flex-col sm:flex-row gap-2 md:mx-auto my-auto relative">
                        <TabsList ref={tabsListRef} className="flex flex-col sm:flex-row gap-2 h-auto bg-background rounded-sm border relative p-0 w-full md:w-auto">
                            {components.map((item) => {
                                const IconComponent = item.icon;
                                return (
                                    <TabsTrigger
                                        key={item.id}
                                        value={item.id}
                                        className={cn(
                                            "flex flex-row gap-1 h-auto transition-all duration-200 p-2 w-full",
                                            "text-xs font-medium whitespace-nowrap border-0 rounded-none",
                                            "hover:bg-muted/50 w-full sm:w-auto justify-start sm:justify-center"
                                        )}
                                    >
                                        <IconComponent className="h-4 w-4" />
                                        <span className="hidden sm:inline text-[10px] leading-tight">
                                            {item.label.split(' ')[0]}
                                        </span>
                                        <span className="sm:hidden text-[10px] leading-tight">
                                            {item.label}
                                        </span>
                                    </TabsTrigger>
                                );
                            })}
                        </TabsList>
                        <motion.div
                            className="absolute bg-white rounded-full"
                            animate={{
                                left: borderPosition.left,
                                top: borderPosition.top,
                                width: borderPosition.width,
                                height: borderPosition.height
                            }}
                            transition={{
                                type: "spring",
                                stiffness: 300,
                                damping: 30
                            }}
                            style={{
                                position: 'absolute'
                            }}
                        />
                    </div>

                    <div
                        className="flex flex-col border border-fd-primary/10 bg-background rounded-lg shadow-lg w-full items-center justify-center mt-5"
                        onMouseEnter={() => setIsHovered(true)}
                        onMouseLeave={() => setIsHovered(false)}
                    >
                        <div className="w-full h-full transition-all duration-300 ease-in-out">
                            <TabsContent value="pricing" className="mt-0">
                                <PreviewComponents className="duration-300 animate-in fade-in max-w-none w-full h-full border-none  bg-background min-h-[500px] md:min-h-[900px] px-0">
                                    <PricingTableOne
                                        className="w-full"
                                        plans={plans}
                                        title="Pricing"
                                        description="Choose the plan that's right for you"
                                        onPlanSelect={(planId) => console.log("Selected plan:", planId)}
                                        size="small" // small, medium, large
                                        theme="classic" // minimal or classic
                                    />
                                </PreviewComponents>
                            </TabsContent>

                            <TabsContent value="banner" className="mt-0">
                                <PreviewComponents className="duration-300 animate-in fade-in text-sm max-w-none w-full border-none rounded-lg border-fd-primary/10 bg-background min-h-[500px] md:min-h-[900px] px-0">
                                    <Banner
                                        title="🎉 Start your free trial today!"
                                        description="Get 30 days free access to all premium features"
                                        buttonText="Start Free Trial"
                                        buttonLink="https://example.com/signup"
                                        gradientColors={[
                                            "rgba(0,149,255,0.56)",
                                            "rgba(231,77,255,0.77)",
                                            "rgba(255,0,0,0.73)",
                                            "rgba(131,255,166,0.66)",
                                        ]}
                                        variant="default" // default, minimal, popup
                                    />
                                </PreviewComponents>
                            </TabsContent>

                            <TabsContent value="usage" className="mt-0">
                                <PreviewComponents className="duration-300 animate-in fade-in text-sm max-w-none w-full border-none rounded-lg border-fd-primary/10 bg-background min-h-[500px] md:min-h-[900px] px-0">
                                    <UsageMeter
                                        usage={[{
                                            name: "Claude Sonnet 4",
                                            usage: 75,
                                            limit: 100,
                                        }, {
                                            name: "ChatGPT 5",
                                            usage: 12,
                                            limit: 100,
                                        }, {
                                            name: "Grok 3",
                                            usage: 95,
                                            limit: 100,
                                        }
                                        ]}
                                        title="LLM Usage"
                                        description="Your usage of the LLM models"
                                        variant="linear"
                                        size="md"
                                        className="mx-auto"
                                    />
                                </PreviewComponents>
                            </TabsContent>

                            <TabsContent value="subscription" className="mt-0">
                                <PreviewComponents className="duration-300 animate-in fade-in text-sm max-w-none w-full border-none border rounded-lg border-fd-primary/10 bg-background min-h-[500px] md:min-h-[900px] px-0">
                                    <div className="mt-4">
                                        <SubscriptionManagementDemo />
                                    </div>
                                </PreviewComponents>
                            </TabsContent>

                            <TabsContent value="updates" className="mt-0">
                                <PreviewComponents className="duration-300 animate-in fade-in text-sm max-w-none w-full border-none border rounded-lg border-fd-primary/10 bg-background min-h-[500px] md:min-h-[900px] px-0">
                                    <div className="mt-4 w-full">
                                        <UpdatePlanCardDemo />
                                    </div>
                                </PreviewComponents>
                            </TabsContent>

                            <TabsContent value="cancellation" className="mt-0">
                                <PreviewComponents className="duration-300 animate-in fade-in text-sm max-w-none w-full border-none border rounded-lg border-fd-primary/10 bg-background min-h-[500px] md:min-h-[900px] px-0">
                                    <div className=" flex items-center justify-center w-full">
                                        <CancelSubscriptionCard
                                            title="We're sorry to see you go..."
                                            description={`Before you cancel, we hope you'll consider upgrading to a ${plans[1].title} plan again.`}
                                            plan={plans[1]}
                                            leftPanelImageUrl="https://framerusercontent.com/images/GWE8vop9hubsuh3uWWn0vyuxEg.webp"
                                            warningTitle="You will lose access to your account"
                                            warningText="If you cancel your subscription, you will lose access to your account and all your data will be deleted."
                                            keepButtonText={`Keep My ${plans[1].title} Plan`}
                                            continueButtonText="Continue with Cancellation"
                                            finalTitle="Final Step - Confirm Cancellation"
                                            finalSubtitle="This action will immediately cancel your subscription"
                                            finalWarningText="You'll lose access to all Pro features and your data will be permanently deleted after 30 days."
                                            goBackButtonText="Wait, Go Back"
                                            confirmButtonText="Yes, Cancel My Subscription"
                                            onCancel={async (planId) => {
                                                console.log("Cancelling subscription for plan:", planId);
                                                return new Promise((resolve) => {
                                                    setTimeout(() => {
                                                        resolve(void 0);
                                                    }, 1000);
                                                });
                                            }}
                                            onKeepSubscription={async (planId) => {
                                                console.log("Keeping subscription for plan:", planId);
                                            }}
                                            className="max-w-4xl"
                                        />
                                    </div>
                                </PreviewComponents>
                            </TabsContent>
                        </div>
                    </div>
                </Tabs>
            </div>
        </div>
    );
}
</file>

<file path="package.json">
{
  "name": "billingsdk",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "build": "next build",
    "dev": "next dev --turbo",
    "start": "next start",
    "lint": "eslint . --config eslint.config.cjs --ext .js,.jsx,.ts,.tsx",
    "lint:fix": "eslint . --config eslint.config.cjs --ext .js,.jsx,.ts,.tsx --fix",
    "typecheck": "tsc --noEmit",
    "postinstall": "fumadocs-mdx"
  },
  "dependencies": {
    "@ai-sdk/openai-compatible": "^1.0.10",
    "@ai-sdk/react": "^2.0.18",
    "@hookform/resolvers": "^5.2.1",
    "@radix-ui/react-dialog": "^1.1.15",
    "@radix-ui/react-dropdown-menu": "^2.1.16",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-radio-group": "^1.3.8",
    "@radix-ui/react-select": "^2.2.6",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.6",
    "@radix-ui/react-tabs": "^1.1.13",
    "@radix-ui/react-toggle": "^1.1.10",
    "@radix-ui/react-tooltip": "^1.2.8",
    "@tsparticles/engine": "^3.9.1",
    "@tsparticles/react": "^3.0.0",
    "@tsparticles/slim": "^3.9.1",
    "ai": "^5.0.18",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "fumadocs-core": "15.6.10",
    "fumadocs-mdx": "11.7.5",
    "fumadocs-ui": "15.6.10",
    "hast-util-to-jsx-runtime": "^2.3.6",
    "lucide-react": "^0.539.0",
    "motion": "^12.23.12",
    "next": "15.4.6",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-hook-form": "^7.62.0",
    "react-icons": "^5.5.0",
    "react-syntax-highlighter": "^15.6.1",
    "remark": "^15.0.1",
    "remark-gfm": "^4.0.1",
    "remark-rehype": "^11.1.2",
    "tailwind-merge": "^3.3.1",
    "zod": "^4.1.3"
  },
  "devDependencies": {
    "@eslint/js": "^9.14.0",
    "@next/eslint-plugin-next": "^15.5.0",
    "@tailwindcss/postcss": "^4.1.11",
    "@types/mdx": "^2.0.13",
    "@types/node": "24.2.1",
    "@types/react": "^19.1.9",
    "@types/react-dom": "^19.1.7",
    "@types/react-syntax-highlighter": "^15.5.13",
    "@typescript-eslint/eslint-plugin": "^8.7.0",
    "@typescript-eslint/parser": "^8.7.0",
    "eslint": "^9.34.0",
    "eslint-config-next": "^15.4.6",
    "eslint-plugin-unused-imports": "^4.1.4",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.11",
    "tw-animate-css": "^1.3.6",
    "typescript": "^5.9.2"
  }
}
</file>

<file path="src/app/layout.tsx">
import "@/app/global.css";
import { RootProvider } from "fumadocs-ui/provider";
import { ThemeProvider } from "@/contexts/theme-context";
import { Darker_Grotesque, Inter, Kalam } from "next/font/google";
import type { ReactNode } from "react";
import type { Metadata } from "next";

const DarkerGrotesque = Darker_Grotesque({
  subsets: ["latin"],
  variable: "--font-darker-grotesque",
});
const inter = Inter({
  subsets: ["latin"],
  variable: "--font-inter",
});

const kalam = Kalam({
  subsets: ["latin"],
  weight: ["300", "400", "700"],
  variable: "--font-kalam",
});

export const metadata: Metadata = {
  title: {
    default: "Billing SDK - Modern Billing & Monetization Components",
    template: "%s | Billing SDK"
  },
  description: "A comprehensive collection of modern billing and subscription management components built with React, TypeScript, and Tailwind CSS. Perfect companion for shadcn/ui.",
  keywords: [
    "billing components",
    "subscription management",
    "pricing tables",
    "usage meters",
    "React components",
    "nextjs components",
    "TypeScript",
    "Tailwind CSS",
    "shadcn/ui",
    "billing UI",
    "subscription UI",
    "pricing UI",
    "billing SDK",
    "payment components"
  ],
  metadataBase: new URL("https://billingsdk.com"),
  alternates: {
    canonical: "/",
  },
  openGraph: {
    type: "website",
    locale: "en_US",
    url: new URL("https://billingsdk.com"),
    title: "Billing SDK - Modern Billing & Monetization Components",
    description: "A comprehensive collection of modern billing and subscription management components built with React, TypeScript, and Tailwind CSS. Perfect companion for shadcn/ui.",
    siteName: "Billing SDK",
    images: [
      {
        url: "/landing/og-image.png",
        width: 1200,
        height: 630,
        alt: "Billing SDK - Modern Billing & Monetization Components",
      },
    ],
  },
  twitter: {
    card: "summary_large_image",
    title: "Billing SDK - Modern Billing & Subscription Components",
    description: "A comprehensive collection of modern billing and subscription management components built with React, TypeScript, and Tailwind CSS.",
    images: ["/logo/logo-dodo.svg"],
    creator: "@billingsdk",
  },
  robots: {
    index: true,
    follow: true,
    googleBot: {
      index: true,
      follow: true,
      "max-video-preview": -1,
      "max-image-preview": "large",
      "max-snippet": -1,
    },
  },

};

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <html
      lang="en"
      className={`${DarkerGrotesque.variable} ${inter.variable} ${kalam.variable} dark`}
      suppressHydrationWarning
    >
      <head>
        <link rel="icon" href="/logo/logo-dodo.svg" />
        <link rel="apple-touch-icon" href="/logo/logo-dodo.svg" />
        <link rel="manifest" href="/manifest.json" />
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5" />
        <meta name="theme-color" content="#000000" />
        <meta name="color-scheme" content="light dark" />
      </head>
      <body className="flex flex-col min-h-screen font-body">
        <ThemeProvider>
          <RootProvider
          theme={{
            enabled: false, // Disable theme switching
            defaultTheme: 'dark',
            storageKey: 'fumadocs-theme',
          }}
        >{children}</RootProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}
</file>

<file path="src/components/landing/Hero.tsx">
"use client";

import React from "react";
import { Button } from "@/components/ui/button";
import { CustomCodeBlock } from "@/components/code";
import { motion } from "motion/react";
import Link from "next/link";
import { Cover } from "../ui/cover";
const Hero = () => {
  const feature = {
    title: "Plan Upgrades in Seconds",
    description: "Beautiful plan upgrade interface - copy, paste, done!",
    code: `
  import { UpdatePlanCard } from "@/components/billingsdk/update-plan-card"
  import { plans } from "@/lib/billingsdk-config"

  export default function App() {
    return (
      <UpdatePlanCard
        currentPlan={plans[0]}
        plans={plans}
        onPlanChange={(planId) => console.log('Upgraded to:', planId)}
      />
    ) 
  }`,
    language: "tsx",
  };

  return (
    <div className="bg-[url('/landing/hero-bg.webp')] rounded-lg bg-cover bg-center">
      {/* Content */}
      <motion.div
        className="relative z-10 pt-[calc(70vh/3)] px-6"
        initial="hidden"
        animate="visible"
      >
        <div className="max-w-7xl mx-auto w-full">
          {/* Main Hero Section */}
          <div className="text-center mb-8 sm:mb-12 md:mb-16 relative">
            <motion.h1
              className="text-3xl sm:text-4xl w-fit mx-auto md:text-5xl lg:text-7xl font-medium font-display text-white mb-3 leading-tight relative"
              variants={{
                hidden: { opacity: 0, y: 20 },
                visible: { opacity: 1, y: 0 },
              }}
              transition={{ duration: 0.4, ease: "easeOut" }}
            >
              Ship Billing UIs <Cover className="text-primary">10x</Cover>{" "}
              Faster

              {/* Fully Open Source annotation inside h1 */}
              <motion.div
                className="hidden lg:block absolute top-[100px] -right-[145px]"
                variants={{
                  hidden: { opacity: 0, y: -20 },
                  visible: { opacity: 1, y: 0 },
                }}
                transition={{ duration: 0.4, delay: 0.3, ease: "easeOut" }}
              >
                <div className="relative">
                  <div className="handwritten text-white text-lg transform rotate-12 whitespace-nowrap">
                    Fully Open Source
                  </div>
                  <svg
                    className="absolute -top-8 right-1/2 transform translate-x-1/2 -rotate-12 text-white"
                    width="40"
                    height="30"
                    viewBox="0 0 40 30"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M38 28C32 22 28 18 22 15C16 12 12 10 5 5"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      fill="none"
                    />
                    <path
                      d="M8 10L5 5L10 6"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      fill="none"
                    />
                  </svg>
                </div>
              </motion.div>
            </motion.h1>

            <motion.p
              className="text-neutral-300/80 text-sm sm:text-lg max-w-2xl mx-auto tracking-tighter"
              variants={{
                hidden: { opacity: 0, y: 20 },
                visible: { opacity: 1, y: 0 },
              }}
              transition={{ duration: 0.4, delay: 0.1, ease: "easeOut" }}
            >
              Stop reinventing the wheel. Use production-ready, accessible
              billing components, from pricing cards to subscription dashboards,
              built for React and ShadCN.
            </motion.p>

            {/* Email Signup */}
            <motion.div
              className="flex flex-col sm:flex-row gap-4 justify-center items-center my-8 max-w-md mx-auto"
              variants={{
                hidden: { opacity: 0, y: 20 },
                visible: { opacity: 1, y: 0 },
              }}
              transition={{ duration: 0.4, delay: 0.2, ease: "easeOut" }}
            >
              <Button
                className="bg-primary text-primary-foreground ring-primary before:from-primary-foreground/20 after:from-primary-foreground/10 relative isolate inline-flex items-center justify-center overflow-hidden rounded-md px-3 text-left text-sm font-medium ring-1 before:pointer-events-none before:absolute before:inset-0 before:-z-10 before:rounded-md before:bg-gradient-to-b before:opacity-80 before:transition-opacity before:duration-300 before:ease-[cubic-bezier(0.4,0.36,0,1)] after:pointer-events-none after:absolute after:inset-0 after:-z-10 after:rounded-md after:bg-gradient-to-b after:to-transparent after:mix-blend-overlay hover:cursor-pointer"
                asChild
              >
                <Link href="/docs">Get Started</Link>
              </Button>
              <Button
                variant="secondary"
                className="bg-secondary text-secondary-foreground ring-secondary before:from-secondary-foreground/20 after:from-secondary-foreground/10 relative isolate inline-flex items-center justify-center overflow-hidden rounded-md px-3 text-left text-sm font-medium ring-1 before:pointer-events-none before:absolute before:inset-0 before:-z-10 before:rounded-md before:bg-gradient-to-b before:opacity-80 before:transition-opacity before:duration-300 before:ease-[cubic-bezier(0.4,0.36,0,1)] after:pointer-events-none after:absolute after:inset-0 after:-z-10 after:rounded-md after:bg-gradient-to-b after:to-transparent after:mix-blend-overlay hover:cursor-pointer"
              >
                <Link href="/docs/components">
                  Browse Components
                </Link>
              </Button>
            </motion.div>

          </div>

          {/* Demo Section */}
          <motion.div
            className="flex flex-col lg:flex-row items-center justify-center gap-6 sm:gap-8 lg:gap-12 relative"
            variants={{
              hidden: { opacity: 0, y: 20 },
              visible: { opacity: 1, y: 0 },
            }}
            transition={{ duration: 0.4, delay: 0.4, ease: "easeOut" }}
          >
            {/* Search Card */}
            <motion.div
              className="shadow-lg border-x border-t border-border mx-4 sm:mx-6 md:mx-8 mt-4 h-64 sm:h-72 lg:h-80  w-full max-w-2xl relative"
              variants={{
                hidden: { opacity: 0, scale: 0.95 },
                visible: { opacity: 1, scale: 1 },
              }}
              transition={{ duration: 0.4, delay: 0.6, ease: "easeOut" }}
            >
              {/* Window chrome */}
              <div className="py-2 px-4 border-b border-border bg-transparent border-l-foreground relative">
                <div className="flex items-center gap-1">
                  <div className="size-2 outline rounded-full outline-border"></div>
                  <div className="size-2 outline rounded-full outline-accent"></div>
                </div>

                {/* Easy to Use Components annotation inside window chrome */}
                <motion.div
                  className="hidden lg:block absolute -top-[30px] -left-[150px]"
                  variants={{
                    hidden: { opacity: 0, x: -20 },
                    visible: { opacity: 1, x: 0 },
                  }}
                  transition={{ duration: 0.4, delay: 0.5, ease: "easeOut" }}
                >
                  <div className="relative">
                    <div className="handwritten text-white text-lg transform -rotate-12 whitespace-nowrap">
                      Easy to Use Components
                    </div>
                    <svg
                      className="absolute -bottom-8 left-1/2 transform -translate-x-1/2 rotate-12 text-white"
                      width="40"
                      height="30"
                      viewBox="0 0 40 30"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M2 2C8 8 12 12 18 15C24 18 28 20 35 25"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeLinecap="round"
                        fill="none"
                      />
                      <path
                        d="M32 20L35 25L30 24"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeLinecap="round"
                        fill="none"
                      />
                    </svg>
                  </div>
                </motion.div>
              </div>

              {/* Code block */}
              <CustomCodeBlock
                code={feature.code}
                language={feature.language}
                maxHeight="400px"
              />
            </motion.div>
          </motion.div>
        </div>
      </motion.div>
    </div>
  );
};

export default Hero;
</file>

<file path="src/app/(home)/page.tsx">
"use client"

import React from "react";
import { Footer2 } from "@/components/landing/footer2";
import Hero from "@/components/landing/Hero";
import { ComponentsSection } from "@/components/landing/components";
import Features from "@/components/landing/Features";
import { Footer } from "@/components/landing/footer";
import { OpenSource } from "@/components/landing/opensource";

const Page = () => {
  return (
    <main className="w-full relative overflow-hidden p-4">
      <Hero />
      <Features />
      <ComponentsSection />
      <OpenSource />
      <Footer />
      <Footer2 />
    </main>
  );
};

export default Page;
</file>

</files>
