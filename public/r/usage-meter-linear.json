{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "usage-meter-linear",
  "type": "registry:block",
  "title": "Usage Meter Linear",
  "description": "A usage meter linear component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "card",
    "badge",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/usage-meter.tsx",
      "content": "\"use client\"\n\nimport { cn } from \"@/lib/utils\"\nimport {\n    Card,\n    CardContent,\n    CardDescription,\n    CardHeader,\n    CardTitle,\n} from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { motion, useSpring, useMotionValue, useTransform } from \"motion/react\"\nimport { useEffect } from \"react\"\n\ninterface UsageMeterProps {\n    usage: number\n    limit: number\n    className?: string\n    variant?: \"linear\" | \"circle\"\n    size?: \"sm\" | \"md\" | \"lg\"\n    title?: string\n    description?: string\n}\n\nexport function UsageMeter({\n    usage,\n    limit,\n    className,\n    variant = \"linear\",\n    size = \"md\",\n    title,\n    description,\n}: UsageMeterProps) {\n    const percentage = Math.min((usage / limit) * 100, 100)\n    const remaining = Math.max(limit - usage, 0)\n\n    // Smooth count-up animation for percentage\n    const motionValue = useMotionValue(0)\n    const springValue = useSpring(motionValue, { stiffness: 100, damping: 20 })\n    const display = useTransform(springValue, (latest) => `${Math.round(latest)}%`)\n\n    useEffect(() => {\n        motionValue.set(percentage)\n    }, [percentage, motionValue])\n\n    const getStatus = () => {\n        if (percentage >= 90) {\n            return <Badge variant=\"destructive\">Critical</Badge>\n        }\n        if (percentage >= 75) {\n            return <Badge variant=\"secondary\">High</Badge>\n        }\n        return null\n    }\n\n    if (variant === \"circle\") {\n        const sizeConfig = {\n            sm: { circle: 80, stroke: 6, text: \"text-base\", label: \"text-xs\" },\n            md: { circle: 120, stroke: 8, text: \"text-xl\", label: \"text-sm\" },\n            lg: { circle: 160, stroke: 10, text: \"text-2xl\", label: \"text-base\" },\n        }\n\n        const config = sizeConfig[size]\n        const radius = (config.circle - config.stroke) / 2\n        const circumference = radius * 2 * Math.PI\n\n        return (\n            <Card className={cn(\"text-left mx-auto w-full max-w-sm\", className)}>\n                <CardHeader className=\"pb-3\">\n                    <div className=\"flex flex-wrap items-center justify-between gap-2\">\n                        <CardTitle className=\"text-sm font-medium flex-1 min-w-0 truncate\">{title}</CardTitle>\n                        <span className=\"text-xs text-muted-foreground shrink-0\">\n                            {remaining.toLocaleString()} / {limit.toLocaleString()} left\n                        </span>\n                    </div>\n                    {description && (\n                        <CardDescription className=\"text-xs text-muted-foreground\">\n                            {description}\n                        </CardDescription>\n                    )}\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                    <div className=\"flex justify-center\">\n                        <div className=\"relative\">\n                            <svg\n                                width={config.circle}\n                                height={config.circle}\n                                className=\"transform -rotate-90\"\n                            >\n                                {/* background ring */}\n                                <circle\n                                    cx={config.circle / 2}\n                                    cy={config.circle / 2}\n                                    r={radius}\n                                    stroke=\"currentColor\"\n                                    strokeWidth={config.stroke}\n                                    fill=\"transparent\"\n                                    className=\"text-muted\"\n                                />\n\n                                {/* animated progress ring */}\n                                <motion.circle\n                                    cx={config.circle / 2}\n                                    cy={config.circle / 2}\n                                    r={radius}\n                                    stroke=\"currentColor\"\n                                    strokeWidth={config.stroke}\n                                    fill=\"transparent\"\n                                    strokeDasharray={circumference}\n                                    strokeLinecap=\"round\"\n                                    className=\"text-primary\"\n                                    initial={{ strokeDashoffset: circumference }}\n                                    animate={{ strokeDashoffset: circumference - (percentage / 100) * circumference }}\n                                    transition={{ duration: 0.4, ease: \"easeOut\" }}\n                                />\n\n                            </svg>\n                            <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n                                <motion.span\n                                    className={cn(\"font-bold text-foreground\", config.text)}\n                                >\n                                    {display}\n                                </motion.span>\n                                <span className=\"text-xs text-muted-foreground\">used</span>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"flex justify-center\">{getStatus()}</div>\n                </CardContent>\n            </Card>\n        )\n    }\n\n    // linear variant\n    const sizeConfig = {\n        sm: { bar: \"h-2\", text: \"text-xs\" },\n        md: { bar: \"h-3\", text: \"text-sm\" },\n        lg: { bar: \"h-4\", text: \"text-base\" },\n    }\n\n    const config = sizeConfig[size]\n\n    return (\n        <Card className={cn(\"text-left mx-auto w-full max-w-sm\", className)}>\n            <CardHeader className=\"pb-3\">\n                <div className=\"flex flex-wrap items-center justify-between gap-2\">\n                    <CardTitle className=\"text-sm font-medium flex-1 min-w-0 truncate\">{title}</CardTitle>\n                    <motion.span className=\"text-xs text-muted-foreground shrink-0\">\n                        {display}\n                    </motion.span>\n                </div>\n                {description && (\n                    <CardDescription className=\"text-xs text-muted-foreground\">\n                        {description}\n                    </CardDescription>\n                )}\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n                <div className={cn(\"w-full bg-muted rounded-full overflow-hidden\", config.bar)}>\n                    <motion.div\n                        className={cn(\n                            \"rounded-full bg-gradient-to-r from-primary to-primary/80\",\n                            config.bar\n                        )}\n                        initial={{ width: 0 }}\n                        animate={{ width: `${percentage}%` }}\n                        transition={{ duration: 0.4, ease: \"easeOut\" }}\n                    />\n                </div>\n                <div className=\"flex flex-wrap items-center justify-between gap-2\">\n                    <span className={cn(\"text-muted-foreground flex-1 min-w-0 truncate\", config.text)}>\n                        {remaining.toLocaleString()} / {limit.toLocaleString()} left\n                    </span>\n                    {getStatus()}\n                </div>\n            </CardContent>\n        </Card>\n    )\n}\n",
      "type": "registry:component",
      "target": "components/billingsdk/usage-meter.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/usage-meter-linear-demo.tsx",
      "content": "'use client'\n\nimport { UsageMeter } from \"@/components/billingsdk/usage-meter\";\n\nexport default function UsageMeterLinearDemo() {\n\n  return (\n    <div className=\"flex flex-col gap-4 max-w-lg mx-auto w-full\">\n      <UsageMeter \n      usage={75} \n      limit={100} \n      title=\"Usage\" \n      description=\"Lorem ipsum dolor sit amet\" \n      variant=\"linear\" \n      size=\"md\" \n      className=\"mx-auto\" />\n    </div>\n\n  );\n}\n",
      "type": "registry:component",
      "target": "components/usage-meter-linear-demo.tsx"
    }
  ]
}