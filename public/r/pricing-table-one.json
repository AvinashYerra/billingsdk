{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pricing-table-one",
  "type": "registry:block",
  "title": "Pricing Table One",
  "description": "A pricing table component",
  "dependencies": [
    "lucide-react",
    "class-variance-authority",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "card",
    "badge",
    "switch",
    "radio-group",
    "label",
    "separator",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/pricing-table-one.tsx",
      "content": "\"use client\";\n\nimport { Check } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Plan } from \"@/lib/const\";\nimport { cn } from \"@/lib/utils\";\n\nconst sectionVariants = cva(\"py-32\", {\n  variants: {\n    variant: {\n      small: \"py-12\",\n      medium: \"py-20\",\n      large: \"py-32\",\n    },\n  },\n  defaultVariants: {\n    variant: \"medium\",\n  },\n});\n\nconst titleVariants = cva(\"text-pretty text-left font-bold text-4xl lg:text-6xl\", {\n  variants: {\n    variant: {\n      small: \"text-3xl lg:text-4xl\",\n      medium: \"text-4xl lg:text-5xl\",\n      large: \"text-4xl lg:text-6xl\",\n    },\n  },\n  defaultVariants: {\n    variant: \"large\",\n  },\n});\n\nconst descriptionVariants = cva(\"text-muted-foreground max-w-3xl text-left lg:text-xl\", {\n  variants: {\n    variant: {\n      small: \"text-base lg:text-lg\",\n      medium: \"text-lg lg:text-xl\",\n      large: \"lg:text-xl\",\n    },\n  },\n  defaultVariants: {\n    variant: \"large\",\n  },\n});\n\nconst cardVariants = cva(\n  \"flex w-full flex-col rounded-lg border text-left p-6 h-full\",\n  {\n    variants: {\n      variant: {\n        small: \"p-4\",\n        medium: \"p-5\",\n        large: \"p-6\",\n      },\n    },\n    defaultVariants: {\n      variant: \"large\",\n    },\n  }\n);\n\nconst priceTextVariants = cva(\"font-medium text-4xl\", {\n  variants: {\n    variant: {\n      small: \"text-3xl\",\n      medium: \"text-4xl\",\n      large: \"text-4xl\",\n    },\n  },\n  defaultVariants: {\n    variant: \"large\",\n  },\n});\n\nconst featureIconVariants = cva(\"size-4\", {\n  variants: {\n    variant: {\n      small: \"size-3\",\n      medium: \"size-4\",\n      large: \"size-4\",\n    },\n  },\n  defaultVariants: {\n    variant: \"large\",\n  },\n});\n\n\ninterface PricingTableOneProps extends VariantProps<typeof sectionVariants> {\n  className?: string;\n  plans: Plan[];\n  title?: string;\n  description?: string;\n  onPlanSelect?: (planId: string) => void;\n}\n\nexport function PricingTableOne({ className, plans, title, description, onPlanSelect, variant }: PricingTableOneProps) {\n  const [isAnnually, setIsAnnually] = useState(false);\n\n  function calculateDiscount(monthlyPrice: string, yearlyPrice: string): number {\n    const monthly = parseFloat(monthlyPrice);\n    const yearly = parseFloat(yearlyPrice);\n\n    if (\n      monthlyPrice.toLowerCase() === \"custom\" ||\n      yearlyPrice.toLowerCase() === \"custom\" ||\n      isNaN(monthly) ||\n      isNaN(yearly) ||\n      monthly === 0\n    ) {\n      return 0;\n    }\n\n    const discount = ((monthly * 12 - yearly) / (monthly * 12)) * 100;\n    return Math.round(discount);\n  }\n\n  const yearlyPriceDiscount = plans.length\n    ? Math.max(\n      ...plans.map((plan) =>\n        calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)\n      )\n    )\n    : 0;\n\n  return (\n    <section className={cn(sectionVariants({ variant }), className)}>\n      <div className=\"container\">\n        <div className=\"mx-auto flex max-w-7xl flex-col gap-6\">\n          <h2 className={cn(titleVariants({ variant }))}>{title || \"Pricing\"}</h2>\n\n          <div className=\"flex flex-col justify-between gap-10 md:flex-row\">\n            <p className={cn(descriptionVariants({ variant }))}>\n              {description || \"Transparent pricing with no hidden fees. Upgrade or downgrade anytime.\"}\n            </p>\n            <div className=\"bg-muted flex h-11 w-fit shrink-0 items-center rounded-md p-1 text-lg\">\n              <RadioGroup\n                defaultValue=\"monthly\"\n                className=\"h-full grid-cols-2\"\n                onValueChange={(value) => {\n                  setIsAnnually(value === \"annually\");\n                }}\n              >\n                <div className='has-[button[data-state=\"checked\"]]:bg-background h-full rounded-md transition-all'>\n                  <RadioGroupItem\n                    value=\"monthly\"\n                    id=\"monthly\"\n                    className=\"peer sr-only\"\n                  />\n                  <Label\n                    htmlFor=\"monthly\"\n                    className=\"text-muted-foreground peer-data-[state=checked]:text-primary flex h-full cursor-pointer items-center justify-center px-7 font-semibold\"\n                  >\n                    Monthly\n                  </Label>\n                </div>\n                <div className='has-[button[data-state=\"checked\"]]:bg-background h-full rounded-md transition-all'>\n                  <RadioGroupItem\n                    value=\"annually\"\n                    id=\"annually\"\n                    className=\"peer sr-only\"\n                  />\n                  <Label\n                    htmlFor=\"annually\"\n                    className=\"text-muted-foreground peer-data-[state=checked]:text-primary flex h-full cursor-pointer items-center justify-center gap-1 px-7 font-semibold\"\n                  >\n                    Yearly\n                    {yearlyPriceDiscount > 0 && (\n                      <span className=\"ml-1 rounded bg-primary/10 px-2 py-0.5 text-xs text-primary\">Save {yearlyPriceDiscount}%</span>\n                    )}\n                  </Label>\n                </div>\n              </RadioGroup>\n            </div>\n          </div>\n\n          <div className=\"flex w-full flex-col items-stretch gap-6 md:flex-row md:items-stretch\">\n            {plans.map((plan) => (\n              <motion.div\n                key={plan.id}\n                layout\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.3, delay: 0.1 }}\n                className={cn(\n                  cardVariants({ variant }),\n                  plan.highlight && \"bg-muted\"\n                )}\n              >\n                <Badge className=\"mb-8 block w-fit\">{plan.title}</Badge>\n                <AnimatePresence mode=\"wait\">\n                  <motion.div\n                    key={isAnnually ? \"year\" : \"month\"}\n                    initial={{ opacity: 0, y: 10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    exit={{ opacity: 0, y: -10 }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    {isAnnually ? (\n                      <>\n                        <span className={cn(\"my-auto\", priceTextVariants({ variant }))}>\n                          {parseFloat(plan.yearlyPrice) >= 0 && (\n                            <>\n                              {plan.currency}\n                            </>\n                          )}\n                          {plan.yearlyPrice}\n                          {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice) > 0 && (\n                            <span className=\"text-xs ml-2 underline\">\n                              {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)}% off\n                            </span>\n                          )}\n                        </span>\n                        <p className=\"text-muted-foreground\">per year</p>\n                      </>\n                    ) : (\n                      <>\n                        <span className={cn(priceTextVariants({ variant }))}>\n                          {parseFloat(plan.monthlyPrice) >= 0 && (\n                            <>\n                              {plan.currency}\n                            </>\n                          )}\n                          {plan.monthlyPrice}\n                        </span>\n                        <p className=\"text-muted-foreground\">per month</p>\n                      </>\n                    )}\n                  </motion.div>\n                </AnimatePresence>\n\n                <Separator className=\"my-6\" />\n                <div className=\"flex h-full flex-col justify-between gap-10\">\n                  <ul className=\"text-muted-foreground space-y-4\">\n                    {plan.features.map((feature, featureIndex) => (\n                      <li key={featureIndex} className=\"flex items-center gap-2\">\n                        <Check className={cn(featureIconVariants({ variant }))} />\n                        <span>{feature.name}</span>\n                      </li>\n                    ))}\n                  </ul>\n\n                  <Button\n                    className=\"gap-2 whitespace-nowrap focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 shadow hover:bg-primary/90 h-9 py-2 group bg-primary text-primary-foreground ring-primary before:from-primary-foreground/20 after:from-primary-foreground/10 relative isolate inline-flex w-full items-center justify-center overflow-hidden rounded-md px-3 text-left text-sm font-medium ring-1 transition duration-300 ease-[cubic-bezier(0.4,0.36,0,1)] before:pointer-events-none before:absolute before:inset-0 before:-z-10 before:rounded-md before:bg-gradient-to-b before:opacity-80 before:transition-opacity before:duration-300 before:ease-[cubic-bezier(0.4,0.36,0,1)] after:pointer-events-none after:absolute after:inset-0 after:-z-10 after:rounded-md after:bg-gradient-to-b after:to-transparent after:mix-blend-overlay hover:cursor-pointer\"\n                    onClick={() => onPlanSelect?.(plan.id)}\n                    aria-label={`Select ${plan.title} plan`}\n                  >\n                    {plan.buttonText}\n                  </Button>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/billingsdk/pricing-table-one.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/pricing-table-one-demo.tsx",
      "content": "\"use client\"\n\nimport { PricingTableOne } from \"@/components/billingsdk/pricing-table-one\"\nimport { plans } from \"@/lib/const\"\n\nexport function PricingTableOneDemo() {\n    return <>\n        <PricingTableOne plans={plans}\n        title=\"Pricing\"\n        description=\"Choose the plan that's right for you\"\n        onPlanSelect={(planId) => console.log('Selected plan:', planId)}\n        variant=\"small\"\n        />\n        </>\n}",
      "type": "registry:component",
      "target": "components/pricing-table-one-demo.tsx"
    },
    {
      "path": "src/registry/lib/const.ts",
      "content": "export interface Plan {\n    id: string\n    title: string\n    description: string\n    highlight?: boolean\n    type?: 'monthly' | 'yearly'\n    currency?: string\n    monthlyPrice: string\n    yearlyPrice: string\n    buttonText: string\n    badge?: string\n    features: {\n        name: string\n        icon: string\n        iconColor?: string\n    }[]\n}\n\nexport interface CurrentPlan {\n    plan: Plan\n    type: 'monthly' | 'yearly' | 'custom'\n    price?: string\n    nextBillingDate: string\n    paymentMethod: string\n    status: 'active' | 'inactive' | 'past_due' | 'cancelled'\n}\n\nexport const plans: Plan[] = [\n    {\n        id: 'starter',\n        title: 'Starter',\n        description: 'For developers testing out Liveblocks locally.',\n        currency: '$',\n        monthlyPrice: '0',\n        yearlyPrice: '0',\n        buttonText: 'Start today for free',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    },\n    {\n        id: 'pro',\n        title: 'Pro',\n        description: 'For companies adding collaboration in production.',\n        currency: '$',\n        monthlyPrice: '20',\n        yearlyPrice: '199',\n        buttonText: 'Sign up',\n        badge: 'Most popular',\n        highlight: true,\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    },\n    {\n        id: 'enterprise',\n        title: 'Enterprise',\n        description: 'For organizations that need more support and compliance features.',\n        currency: '$',\n        monthlyPrice: 'Custom',\n        yearlyPrice: 'Custom',\n        buttonText: 'Contact sales',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    }\n];\n",
      "type": "registry:lib",
      "target": "src/lib/const.ts"
    }
  ]
}