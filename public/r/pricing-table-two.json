{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pricing-table-two",
  "type": "registry:block",
  "title": "Pricing Table Two",
  "description": "A pricing table component with a feature table",
  "dependencies": [
    "lucide-react",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "button",
    "table",
    "switch",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/pricing-table-two.tsx",
      "content": "\"use client\";\n\nimport { Check, Minus } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { Plan } from \"@/lib/const\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\n\nconst sectionVariants = cva(\"py-32\", {\n  variants: {\n    variant: {\n      small: \"py-12\",\n      medium: \"py-20\",\n      large: \"py-32\",\n    },\n  },\n  defaultVariants: {\n    variant: \"medium\",\n  },\n});\n\nconst titleVariants = cva(\"mb-2 font-semibold text-3xl lg:text-5xl\", {\n  variants: {\n    variant: {\n      small: \"text-2xl lg:text-3xl\",\n      medium: \"text-3xl lg:text-4xl\",\n      large: \"text-3xl lg:text-5xl\",\n    },\n  },\n  defaultVariants: {\n    variant: \"large\",\n  },\n});\n\nconst descriptionVariants = cva(\"text-muted-foreground lg:text-lg\", {\n  variants: {\n    variant: {\n      small: \"text-sm lg:text-base\",\n      medium: \"text-base lg:text-lg\",\n      large: \"lg:text-lg\",\n    },\n  },\n  defaultVariants: {\n    variant: \"large\",\n  },\n});\n\nconst toggleWrapperVariants = cva(\"flex justify-center items-center gap-3\", {\n  variants: {\n    variant: {\n      small: \"mt-6\",\n      medium: \"mt-7\",\n      large: \"mt-8\",\n    },\n  },\n  defaultVariants: {\n    variant: \"large\",\n  },\n});\n\nconst toggleLabelVariants = cva(\"font-medium text-sm\", {\n  variants: {\n    variant: {\n      small: \"text-xs\",\n      medium: \"text-sm\",\n      large: \"text-sm\",\n    },\n  },\n  defaultVariants: {\n    variant: \"large\",\n  },\n});\n\nconst switchScaleVariants = cva(\"\", {\n  variants: {\n    variant: {\n      small: \"scale-90\",\n      medium: \"scale-95\",\n      large: \"\",\n    },\n  },\n  defaultVariants: {\n    variant: \"large\",\n  },\n});\n\nconst plansWrapperVariants = cva(\"flex\", {\n  variants: {\n    variant: {\n      small: \"mt-6\",\n      medium: \"mt-8\",\n      large: \"mt-10\",\n    },\n  },\n  defaultVariants: {\n    variant: \"large\",\n  },\n});\n\nconst cardVariants = cva(\n  \"bg-card text-card-foreground border shadow-sm flex w-full flex-col justify-between text-center rounded-xl md:rounded-none\",\n  {\n    variants: {\n      variant: {\n        small: \"py-4 gap-6\",\n        medium: \"py-5 gap-7\",\n        large: \"py-6 gap-8\",\n      },\n    },\n    defaultVariants: {\n      variant: \"large\",\n    },\n  }\n);\n\nconst priceTextVariants = cva(\"font-bold text-5xl\", {\n  variants: {\n    variant: {\n      small: \"text-3xl\",\n      medium: \"text-4xl\",\n      large: \"text-5xl\",\n    },\n  },\n  defaultVariants: {\n    variant: \"large\",\n  },\n});\n\nconst priceSubTextVariants = cva(\"text-muted-foreground mt-3\", {\n  variants: {\n    variant: {\n      small: \"mt-2\",\n      medium: \"mt-3\",\n      large: \"mt-3\",\n    },\n  },\n  defaultVariants: {\n    variant: \"large\",\n  },\n});\n\nconst tableWrapperVariants = cva(\"relative w-full overflow-x-auto mt-10\", {\n  variants: {\n    variant: {\n      small: \"mt-6\",\n      medium: \"mt-8\",\n      large: \"mt-10\",\n    },\n  },\n  defaultVariants: {\n    variant: \"large\",\n  },\n});\n\nconst featureIconVariants = cva(\"mx-auto size-5\", {\n  variants: {\n    variant: {\n      small: \"size-4\",\n      medium: \"size-5\",\n      large: \"size-5\",\n    },\n  },\n  defaultVariants: {\n    variant: \"large\",\n  },\n});\n\nconst firstColWidthVariants = cva(\"w-[200px]\", {\n  variants: {\n    variant: {\n      small: \"w-[140px]\",\n      medium: \"w-[180px]\",\n      large: \"w-[200px]\",\n    },\n  },\n  defaultVariants: {\n    variant: \"large\",\n  },\n});\n\ninterface PricingTableTwoProps extends VariantProps<typeof sectionVariants> {\n  className?: string;\n  plans: Plan[];\n  title?: string;\n  description?: string;\n  onPlanSelect?: (planId: string) => void;\n}\n\nexport function PricingTableTwo({ className, plans, title, description, onPlanSelect, variant }: PricingTableTwoProps) {\n  const [isAnnually, setIsAnnually] = useState(false);\n\n  // Use all plans from const.ts\n  const filteredPlans: Plan[] = plans;\n\n  return (\n    <section className={cn(sectionVariants({ variant }), className)}>\n      <div className=\"container max-w-5xl\">\n        <div className=\"flex flex-col items-center gap-4 text-center\">\n          <h2 className={cn(titleVariants({ variant }))}>{title || \"We offer 3 plans\"}</h2>\n          <p className={cn(descriptionVariants({ variant }))}>\n            {description || \"Lorem ipsum dolor sit amet consectetur adipisicing.\"}\n          </p>\n        </div>\n        \n        {/* Monthly/Yearly Toggle */}\n        <div className={cn(toggleWrapperVariants({ variant }))}> \n          <span className={cn(\n            toggleLabelVariants({ variant }),\n            !isAnnually ? \"text-foreground\" : \"text-muted-foreground\"\n          )}>\n            Monthly\n          </span>\n          <Switch\n            checked={isAnnually}\n            onCheckedChange={setIsAnnually}\n            className={cn(switchScaleVariants({ variant }))}\n          />\n          <span className={cn(\n            toggleLabelVariants({ variant }),\n            isAnnually ? \"text-foreground\" : \"text-muted-foreground\"\n          )}>\n            Yearly\n          </span>\n        </div>\n        \n        <div className={cn(\n          plansWrapperVariants({ variant }),\n          \"gap-4 md:gap-0\",\n          filteredPlans.length === 1 && \"flex-col max-w-md mx-auto\",\n          filteredPlans.length === 2 && \"flex-col md:flex-row max-w-4xl mx-auto\",\n          filteredPlans.length >= 3 && \"flex-col lg:flex-row max-w-7xl mx-auto\"\n        )}>\n          {filteredPlans.map((plan: Plan, index: number) => (\n            <div\n              key={plan.id}\n              className={cn(\n                cardVariants({ variant }),\n                // First card: rounded left corners\n                index === 0 && \"md:rounded-l-xl md:border-r-0\",\n                // Last card: rounded right corners\n                index === filteredPlans.length - 1 && \"md:rounded-r-xl md:border-l-0\",\n                // Middle cards: no rounded corners, no left border\n                index > 0 && index < filteredPlans.length - 1 && \"md:border-l-0 md:border-r-0\",\n                // Single card: all corners rounded\n                filteredPlans.length === 1 && \"rounded-xl\",\n                plan.highlight && \"bg-muted/30 shadow-lg\"\n              )}\n            >\n              <div className=\"grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"leading-none font-semibold\">{plan.title}</div>\n                </div>\n                <p className=\"text-muted-foreground text-left\">{plan.description}</p>\n              </div>\n              \n              <div className=\"px-6\">\n                {isAnnually ? (\n                  <>\n                    <span className={cn(priceTextVariants({ variant }))}>{plan.yearlyPrice}</span>\n                    <p className={cn(priceSubTextVariants({ variant }))}>per year</p>\n                  </>\n                ) : (\n                  <>\n                    <span className={cn(priceTextVariants({ variant }))}>{plan.monthlyPrice}</span>\n                    <p className={cn(priceSubTextVariants({ variant }))}>per month</p>\n                  </>\n                )}\n              </div>\n              \n              <div className=\"flex items-center px-6\">\n                <Button \n                  className={cn(\n                    \"w-full\",\n                    plan.highlight && \"shadow-lg\"\n                  )}\n                  variant={plan.highlight ? \"default\" : \"secondary\"}\n                onClick={() => onPlanSelect?.(plan.id)}\n                >\n                  {plan.buttonText}\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n        \n        <div className={cn(tableWrapperVariants({ variant }))}>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead className={firstColWidthVariants({ variant })}></TableHead>\n                {filteredPlans.map((plan: Plan) => (\n                  <TableHead key={plan.id} className=\"text-center font-bold text-primary\">\n                    {plan.title}\n                  </TableHead>\n                ))}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {/* Get all unique features from all plans */}\n              {(() => {\n                const allFeatures = new Set<string>();\n                filteredPlans.forEach(plan => {\n                  plan.features.forEach(feature => {\n                    allFeatures.add(feature.name);\n                  });\n                });\n                return Array.from(allFeatures).map((featureName, featureIndex) => (\n                  <TableRow key={featureIndex}>\n                    <TableCell className=\"font-medium text-left\">{featureName}</TableCell>\n                    {filteredPlans.map((plan: Plan) => {\n                      const feature = plan.features.find(f => f.name === featureName);\n                      return (\n                        <TableCell key={plan.id} className=\"text-left\">\n                          {feature ? (\n                            feature.icon === \"check\" ? (\n                              <Check className={cn(featureIconVariants({ variant }))} />\n                            ) : feature.icon === \"minus\" ? (\n                              <Minus className={cn(featureIconVariants({ variant }))} />\n                            ) : (\n                              <span className=\"text-sm text-muted-foreground\">{feature.name}</span>\n                            )\n                          ) : (\n                            <Minus className={cn(featureIconVariants({ variant }))} />\n                          )}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                ));\n              })()}\n              \n            </TableBody>\n          </Table>\n        </div>\n      </div>\n    </section>\n  );\n}",
      "type": "registry:component",
      "target": "components/billingsdk/pricing-table-two.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/pricing-table-two-demo.tsx",
      "content": "import { plans } from \"@/lib/const\";\nimport { PricingTableTwo } from \"@/components/billingsdk/pricing-table-two\";\n\nexport function PricingTableTwoDemo() {\n    return <>\n    <PricingTableTwo plans={plans} className=\"w-full max-w-4xl mx-auto mt-10\"\n        title={`We offer ${plans.length} plans`}\n        description=\"Choose the plan that's right for you\"\n        onPlanSelect={(planId) => console.log('Selected plan:', planId)}\n        variant=\"small\"\n        />\n        </>\n} ",
      "type": "registry:component",
      "target": "components/pricing-table-two-demo.tsx"
    },
    {
      "path": "src/registry/lib/const.ts",
      "content": "export interface Plan {\n    id: string\n    title: string\n    description: string\n    highlight?: boolean\n    type?: 'monthly' | 'yearly'\n    monthlyPrice: string\n    yearlyPrice: string\n    buttonText: string\n    badge?: string\n    features: {\n        name: string\n        icon: string\n        iconColor?: string\n    }[],\n    benefits?: string[]\n}\n\n\nexport const plans: Plan[] = [\n    {\n        id: 'starter',\n        title: 'Starter',\n        description: 'For developers testing out Liveblocks locally.',\n        monthlyPrice: '$0',\n        yearlyPrice: '$0',\n        buttonText: 'Start today for free',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n        benefits: ['WebSocket infrastructure', 'Pre-built components', 'Community support']\n    },\n    {\n        id: 'pro',\n        title: 'Pro',\n        description: 'For companies adding collaboration in production.',\n        monthlyPrice: '$10',\n        yearlyPrice: '$100',\n        buttonText: 'Sign up',\n        badge: 'Most popular',\n        highlight: true,\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n        benefits: ['WebSocket infrastructure', 'Pre-built components', 'Email support']\n    },\n    {\n        id: 'enterprise',\n        title: 'Enterprise',\n        description: 'For organizations that need more support and compliance features.',\n        monthlyPrice: 'Custom',\n        yearlyPrice: 'Custom',\n        buttonText: 'Contact sales',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n        benefits: ['WebSocket infrastructure', 'Pre-built components', 'Priority support']\n    }\n];\n",
      "type": "registry:lib",
      "target": "src/lib/const.ts"
    }
  ]
}